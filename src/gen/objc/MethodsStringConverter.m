//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/andrewebling/Laundrapp/Joda-time-Project/Joda-Convert/src/main/java/org/joda/convert/MethodsStringConverter.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "MethodsStringConverter.h"
#include "java/lang/CharSequence.h"
#include "java/lang/IllegalAccessException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/Throwable.h"
#include "java/lang/reflect/InvocationTargetException.h"
#include "java/lang/reflect/Method.h"
#include "java/lang/reflect/Modifier.h"

@implementation OrgJodaConvertMethodsStringConverter

- (instancetype)initWithIOSClass:(IOSClass *)cls
       withJavaLangReflectMethod:(JavaLangReflectMethod *)toString
       withJavaLangReflectMethod:(JavaLangReflectMethod *)fromString
                    withIOSClass:(IOSClass *)effectiveType {
  if (self = [super initWithIOSClass:cls withJavaLangReflectMethod:toString]) {
    if ([JavaLangReflectModifier isStaticWithInt:[((JavaLangReflectMethod *) nil_chk(fromString)) getModifiers]] == NO) {
      @throw [[JavaLangIllegalStateException alloc] initWithNSString:[NSString stringWithFormat:@"FromString method must be static: %@", fromString]];
    }
    if ((int) [((IOSObjectArray *) nil_chk([fromString getParameterTypes])) count] != 1) {
      @throw [[JavaLangIllegalStateException alloc] initWithNSString:[NSString stringWithFormat:@"FromString method must have one parameter: %@", fromString]];
    }
    IOSClass *param = IOSObjectArray_Get(nil_chk([fromString getParameterTypes]), 0);
    if (param != [IOSClass classWithClass:[NSString class]] && param != [IOSClass classWithProtocol:@protocol(JavaLangCharSequence)]) {
      @throw [[JavaLangIllegalStateException alloc] initWithNSString:[NSString stringWithFormat:@"FromString method must take a String or CharSequence: %@", fromString]];
    }
    if ([nil_chk([fromString getReturnType]) isAssignableFrom:cls] == NO && [nil_chk(cls) isAssignableFrom:[fromString getReturnType]] == NO) {
      @throw [[JavaLangIllegalStateException alloc] initWithNSString:[NSString stringWithFormat:@"FromString method must return specified class or a supertype: %@", fromString]];
    }
    self->fromString_ = fromString;
    self->effectiveType_ = effectiveType;
  }
  return self;
}

- (id)convertFromStringWithIOSClass:(IOSClass *)cls
                       withNSString:(NSString *)str {
  @try {
    return [((IOSClass *) nil_chk(cls)) cast:[((JavaLangReflectMethod *) nil_chk(fromString_)) invokeWithId:nil withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ str } count:1 type:[IOSClass classWithClass:[NSObject class]]]]];
  }
  @catch (JavaLangIllegalAccessException *ex) {
    @throw [[JavaLangIllegalStateException alloc] initWithNSString:[NSString stringWithFormat:@"Method is not accessible: %@", fromString_]];
  }
  @catch (JavaLangReflectInvocationTargetException *ex) {
    if ([[((JavaLangReflectInvocationTargetException *) nil_chk(ex)) getCause] isKindOfClass:[JavaLangRuntimeException class]]) {
      @throw (JavaLangRuntimeException *) check_class_cast([ex getCause], [JavaLangRuntimeException class]);
    }
    @throw [[JavaLangRuntimeException alloc] initWithNSString:[ex getMessage] withJavaLangThrowable:[ex getCause]];
  }
}

- (IOSClass *)getEffectiveType {
  return effectiveType_;
}

- (void)copyAllFieldsTo:(OrgJodaConvertMethodsStringConverter *)other {
  [super copyAllFieldsTo:other];
  other->effectiveType_ = effectiveType_;
  other->fromString_ = fromString_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "initWithIOSClass:withJavaLangReflectMethod:withJavaLangReflectMethod:withIOSClass:", "MethodsStringConverter", NULL, 0x0, NULL },
    { "convertFromStringWithIOSClass:withNSString:", "convertFromString", "TT;", 0x1, NULL },
    { "getEffectiveType", NULL, "Ljava.lang.Class;", 0x1, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "fromString_", NULL, 0x12, "Ljava.lang.reflect.Method;", NULL,  },
    { "effectiveType_", NULL, 0x12, "Ljava.lang.Class;", NULL,  },
  };
  static const char *superclass_type_args[] = {"TT;"};
  static J2ObjcClassInfo _OrgJodaConvertMethodsStringConverter = { "MethodsStringConverter", "org.joda.convert", NULL, 0x10, 3, methods, 2, fields, 1, superclass_type_args};
  return &_OrgJodaConvertMethodsStringConverter;
}

@end
