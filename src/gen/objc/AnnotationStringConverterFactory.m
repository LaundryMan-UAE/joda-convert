//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/andrewebling/Laundrapp/Joda-time-Project/Joda-Convert/src/main/java/org/joda/convert/AnnotationStringConverterFactory.java
//

#include "AnnotationStringConverterFactory.h"
#include "FromString.h"
#include "FromStringFactory.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "MethodConstructorStringConverter.h"
#include "MethodsStringConverter.h"
#include "StringConverter.h"
#include "StringConverterFactory.h"
#include "ToString.h"
#include "java/lang/CharSequence.h"
#include "java/lang/Enum.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/NoSuchMethodException.h"
#include "java/lang/reflect/Constructor.h"
#include "java/lang/reflect/Method.h"

BOOL OrgJodaConvertAnnotationStringConverterFactory_initialized = NO;

@implementation OrgJodaConvertAnnotationStringConverterFactory

id<OrgJodaConvertStringConverterFactory> OrgJodaConvertAnnotationStringConverterFactory_INSTANCE_;

- (instancetype)init {
  return [super init];
}

- (id<OrgJodaConvertStringConverter>)findConverterWithIOSClass:(IOSClass *)cls {
  return [self findAnnotatedConverterWithIOSClass:cls];
}

- (id<OrgJodaConvertStringConverter>)findAnnotatedConverterWithIOSClass:(IOSClass *)cls {
  JavaLangReflectMethod *toString = [self findToStringMethodWithIOSClass:cls];
  if (toString == nil) {
    return nil;
  }
  OrgJodaConvertMethodConstructorStringConverter *con = [self findFromStringConstructorWithIOSClass:cls withJavaLangReflectMethod:toString];
  OrgJodaConvertMethodsStringConverter *mth = [self findFromStringMethodWithIOSClass:cls withJavaLangReflectMethod:toString withBoolean:con == nil];
  if (con == nil && mth == nil) {
    @throw [[JavaLangIllegalStateException alloc] initWithNSString:[NSString stringWithFormat:@"Class annotated with @ToString but not with @FromString: %@", [((IOSClass *) nil_chk(cls)) getName]]];
  }
  if (con != nil && mth != nil) {
    @throw [[JavaLangIllegalStateException alloc] initWithNSString:[NSString stringWithFormat:@"Both method and constructor are annotated with @FromString: %@", [((IOSClass *) nil_chk(cls)) getName]]];
  }
  return (con != nil ? con : mth);
}

- (JavaLangReflectMethod *)findToStringMethodWithIOSClass:(IOSClass *)cls {
  JavaLangReflectMethod *matched = nil;
  IOSClass *loopCls = cls;
  while (loopCls != nil && matched == nil) {
    IOSObjectArray *methods = [((IOSClass *) nil_chk(loopCls)) getDeclaredMethods];
    {
      IOSObjectArray *a__ = methods;
      JavaLangReflectMethod * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
      JavaLangReflectMethod * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        JavaLangReflectMethod *method = (*b__++);
        id<OrgJodaConvertToString> toString = [((JavaLangReflectMethod *) nil_chk(method)) getAnnotationWithIOSClass:[IOSClass classWithProtocol:@protocol(OrgJodaConvertToString)]];
        if (toString != nil) {
          if (matched != nil) {
            @throw [[JavaLangIllegalStateException alloc] initWithNSString:[NSString stringWithFormat:@"Two methods are annotated with @ToString: %@", [((IOSClass *) nil_chk(cls)) getName]]];
          }
          matched = method;
        }
      }
    }
    loopCls = [loopCls getSuperclass];
  }
  if (matched == nil) {
    {
      IOSObjectArray *a__ = [((IOSClass *) nil_chk([self eliminateEnumSubclassWithIOSClass:cls])) getInterfaces];
      IOSClass * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
      IOSClass * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        IOSClass *loopIfc = (*b__++);
        IOSObjectArray *methods = [((IOSClass *) nil_chk(loopIfc)) getDeclaredMethods];
        {
          IOSObjectArray *a__ = methods;
          JavaLangReflectMethod * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
          JavaLangReflectMethod * const *e__ = b__ + a__->size_;
          while (b__ < e__) {
            JavaLangReflectMethod *method = (*b__++);
            id<OrgJodaConvertToString> toString = [((JavaLangReflectMethod *) nil_chk(method)) getAnnotationWithIOSClass:[IOSClass classWithProtocol:@protocol(OrgJodaConvertToString)]];
            if (toString != nil) {
              if (matched != nil) {
                @throw [[JavaLangIllegalStateException alloc] initWithNSString:[NSString stringWithFormat:@"Two methods are annotated with @ToString on interfaces: %@", [((IOSClass *) nil_chk(cls)) getName]]];
              }
              matched = method;
            }
          }
        }
      }
    }
  }
  return matched;
}

- (OrgJodaConvertMethodConstructorStringConverter *)findFromStringConstructorWithIOSClass:(IOSClass *)cls
                                                                withJavaLangReflectMethod:(JavaLangReflectMethod *)toString {
  JavaLangReflectConstructor *con;
  @try {
    con = [((IOSClass *) nil_chk(cls)) getDeclaredConstructor:[IOSObjectArray arrayWithObjects:(id[]){ [IOSClass classWithClass:[NSString class]] } count:1 type:[IOSClass classWithClass:[IOSClass class]]]];
  }
  @catch (JavaLangNoSuchMethodException *ex) {
    @try {
      con = [((IOSClass *) nil_chk(cls)) getDeclaredConstructor:[IOSObjectArray arrayWithObjects:(id[]){ [IOSClass classWithProtocol:@protocol(JavaLangCharSequence)] } count:1 type:[IOSClass classWithClass:[IOSClass class]]]];
    }
    @catch (JavaLangNoSuchMethodException *ex2) {
      return nil;
    }
  }
  id<OrgJodaConvertFromString> fromString = [((JavaLangReflectConstructor *) nil_chk(con)) getAnnotationWithIOSClass:[IOSClass classWithProtocol:@protocol(OrgJodaConvertFromString)]];
  if (fromString == nil) {
    return nil;
  }
  return [[OrgJodaConvertMethodConstructorStringConverter alloc] initWithIOSClass:cls withJavaLangReflectMethod:toString withJavaLangReflectConstructor:con];
}

- (OrgJodaConvertMethodsStringConverter *)findFromStringMethodWithIOSClass:(IOSClass *)cls
                                                 withJavaLangReflectMethod:(JavaLangReflectMethod *)toString
                                                               withBoolean:(BOOL)searchSuperclasses {
  IOSClass *loopCls = cls;
  while (loopCls != nil) {
    JavaLangReflectMethod *fromString = [self findFromStringWithIOSClass:loopCls];
    if (fromString != nil) {
      return [[OrgJodaConvertMethodsStringConverter alloc] initWithIOSClass:cls withJavaLangReflectMethod:toString withJavaLangReflectMethod:fromString withIOSClass:loopCls];
    }
    if (searchSuperclasses == NO) {
      break;
    }
    loopCls = [((IOSClass *) nil_chk(loopCls)) getSuperclass];
  }
  OrgJodaConvertMethodsStringConverter *matched = nil;
  if (searchSuperclasses) {
    {
      IOSObjectArray *a__ = [((IOSClass *) nil_chk([self eliminateEnumSubclassWithIOSClass:cls])) getInterfaces];
      IOSClass * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
      IOSClass * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        IOSClass *loopIfc = (*b__++);
        JavaLangReflectMethod *fromString = [self findFromStringWithIOSClass:loopIfc];
        if (fromString != nil) {
          if (matched != nil) {
            @throw [[JavaLangIllegalStateException alloc] initWithNSString:[NSString stringWithFormat:@"Two different interfaces are annotated with @FromString or @FromStringFactory: %@", [((IOSClass *) nil_chk(cls)) getName]]];
          }
          matched = [[OrgJodaConvertMethodsStringConverter alloc] initWithIOSClass:cls withJavaLangReflectMethod:toString withJavaLangReflectMethod:fromString withIOSClass:loopIfc];
        }
      }
    }
  }
  return matched;
}

- (JavaLangReflectMethod *)findFromStringWithIOSClass:(IOSClass *)cls {
  IOSObjectArray *methods = [((IOSClass *) nil_chk(cls)) getDeclaredMethods];
  JavaLangReflectMethod *matched = nil;
  {
    IOSObjectArray *a__ = methods;
    JavaLangReflectMethod * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    JavaLangReflectMethod * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      JavaLangReflectMethod *method = (*b__++);
      id<OrgJodaConvertFromString> fromString = [((JavaLangReflectMethod *) nil_chk(method)) getAnnotationWithIOSClass:[IOSClass classWithProtocol:@protocol(OrgJodaConvertFromString)]];
      if (fromString != nil) {
        if (matched != nil) {
          @throw [[JavaLangIllegalStateException alloc] initWithNSString:[NSString stringWithFormat:@"Two methods are annotated with @FromString: %@", [cls getName]]];
        }
        matched = method;
      }
    }
  }
  id<OrgJodaConvertFromStringFactory> factory = [cls getAnnotationWithIOSClass:[IOSClass classWithProtocol:@protocol(OrgJodaConvertFromStringFactory)]];
  if (factory != nil) {
    if (matched != nil) {
      @throw [[JavaLangIllegalStateException alloc] initWithNSString:[NSString stringWithFormat:@"Class annotated with @FromString and @FromStringFactory: %@", [cls getName]]];
    }
    IOSObjectArray *factoryMethods = [((IOSClass *) nil_chk([factory factory])) getDeclaredMethods];
    {
      IOSObjectArray *a__ = factoryMethods;
      JavaLangReflectMethod * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
      JavaLangReflectMethod * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        JavaLangReflectMethod *method = (*b__++);
        if ([cls isAssignableFrom:[((JavaLangReflectMethod *) nil_chk(method)) getReturnType]]) {
          id<OrgJodaConvertFromString> fromString = [method getAnnotationWithIOSClass:[IOSClass classWithProtocol:@protocol(OrgJodaConvertFromString)]];
          if (fromString != nil) {
            if (matched != nil) {
              @throw [[JavaLangIllegalStateException alloc] initWithNSString:[NSString stringWithFormat:@"Two methods are annotated with @FromString on the factory: %@", [((IOSClass *) nil_chk([factory factory])) getName]]];
            }
            matched = method;
          }
        }
      }
    }
  }
  return matched;
}

- (IOSClass *)eliminateEnumSubclassWithIOSClass:(IOSClass *)cls {
  IOSClass *sup = [((IOSClass *) nil_chk(cls)) getSuperclass];
  if (sup != nil && [sup getSuperclass] == [IOSClass classWithClass:[JavaLangEnum class]]) {
    return sup;
  }
  return cls;
}

- (NSString *)description {
  return [[self getClass] getSimpleName];
}

+ (void)initialize {
  if (self == [OrgJodaConvertAnnotationStringConverterFactory class]) {
    OrgJodaConvertAnnotationStringConverterFactory_INSTANCE_ = [[OrgJodaConvertAnnotationStringConverterFactory alloc] init];
    OrgJodaConvertAnnotationStringConverterFactory_initialized = YES;
  }
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "init", "AnnotationStringConverterFactory", NULL, 0x2, NULL },
    { "findConverterWithIOSClass:", "findConverter", "Lorg.joda.convert.StringConverter;", 0x1, NULL },
    { "findAnnotatedConverterWithIOSClass:", "findAnnotatedConverter", "Lorg.joda.convert.StringConverter;", 0x2, NULL },
    { "findToStringMethodWithIOSClass:", "findToStringMethod", "Ljava.lang.reflect.Method;", 0x2, NULL },
    { "findFromStringConstructorWithIOSClass:withJavaLangReflectMethod:", "findFromStringConstructor", "Lorg.joda.convert.MethodConstructorStringConverter;", 0x2, NULL },
    { "findFromStringMethodWithIOSClass:withJavaLangReflectMethod:withBoolean:", "findFromStringMethod", "Lorg.joda.convert.MethodsStringConverter;", 0x2, NULL },
    { "findFromStringWithIOSClass:", "findFromString", "Ljava.lang.reflect.Method;", 0x2, NULL },
    { "eliminateEnumSubclassWithIOSClass:", "eliminateEnumSubclass", "Ljava.lang.Class;", 0x2, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "INSTANCE_", NULL, 0x18, "Lorg.joda.convert.StringConverterFactory;", &OrgJodaConvertAnnotationStringConverterFactory_INSTANCE_,  },
  };
  static J2ObjcClassInfo _OrgJodaConvertAnnotationStringConverterFactory = { "AnnotationStringConverterFactory", "org.joda.convert", NULL, 0x10, 9, methods, 1, fields, 0, NULL};
  return &_OrgJodaConvertAnnotationStringConverterFactory;
}

@end
