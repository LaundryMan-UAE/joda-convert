//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/andrefonseca/Documents/PodsFolders/joda-convert/src/main/java/org/joda/convert/JDKStringConverter.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "com/google/common/io/BaseEncoding.h"
#include "java/io/File.h"
#include "java/lang/Boolean.h"
#include "java/lang/Byte.h"
#include "java/lang/CharSequence.h"
#include "java/lang/Character.h"
#include "java/lang/ClassNotFoundException.h"
#include "java/lang/Double.h"
#include "java/lang/Enum.h"
#include "java/lang/Float.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/Long.h"
#include "java/lang/Package.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/Short.h"
#include "java/lang/StringBuffer.h"
#include "java/lang/StringBuilder.h"
#include "java/math/BigDecimal.h"
#include "java/math/BigInteger.h"
#include "java/net/InetAddress.h"
#include "java/net/MalformedURLException.h"
#include "java/net/URI.h"
#include "java/net/URL.h"
#include "java/net/UnknownHostException.h"
#include "java/text/ParseException.h"
#include "java/text/SimpleDateFormat.h"
#include "java/util/Calendar.h"
#include "java/util/Currency.h"
#include "java/util/Date.h"
#include "java/util/GregorianCalendar.h"
#include "java/util/Locale.h"
#include "java/util/TimeZone.h"
#include "java/util/UUID.h"
#include "java/util/concurrent/atomic/AtomicBoolean.h"
#include "java/util/concurrent/atomic/AtomicInteger.h"
#include "java/util/concurrent/atomic/AtomicLong.h"
#include "org/joda/convert/JDKStringConverter.h"
#include "org/joda/convert/RenameHandler.h"

#pragma clang diagnostic ignored "-Wprotocol"

@interface OrgJodaConvertJDKStringConverter () {
 @public
  /*!
   @brief The type.
   */
  IOSClass *type_;
}

@end

J2OBJC_FIELD_SETTER(OrgJodaConvertJDKStringConverter, type_, IOSClass *)

__attribute__((unused)) static void OrgJodaConvertJDKStringConverter_initWithIOSClass_withNSString_withInt_(OrgJodaConvertJDKStringConverter *self, IOSClass *type, NSString *__name, jint __ordinal);

@interface OrgJodaConvertJDKStringConverter_$1 : OrgJodaConvertJDKStringConverter < NSCopying >

- (id)convertFromStringWithIOSClass:(IOSClass *)cls
                       withNSString:(NSString *)str;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgJodaConvertJDKStringConverter_$1)

__attribute__((unused)) static void OrgJodaConvertJDKStringConverter_$1_initWithIOSClass_withNSString_withInt_(OrgJodaConvertJDKStringConverter_$1 *self, IOSClass *arg$0, NSString *__name, jint __ordinal);

@interface OrgJodaConvertJDKStringConverter_$2 : OrgJodaConvertJDKStringConverter < NSCopying >

- (id)convertFromStringWithIOSClass:(IOSClass *)cls
                       withNSString:(NSString *)str;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgJodaConvertJDKStringConverter_$2)

__attribute__((unused)) static void OrgJodaConvertJDKStringConverter_$2_initWithIOSClass_withNSString_withInt_(OrgJodaConvertJDKStringConverter_$2 *self, IOSClass *arg$0, NSString *__name, jint __ordinal);

@interface OrgJodaConvertJDKStringConverter_$3 : OrgJodaConvertJDKStringConverter < NSCopying >

- (id)convertFromStringWithIOSClass:(IOSClass *)cls
                       withNSString:(NSString *)str;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgJodaConvertJDKStringConverter_$3)

__attribute__((unused)) static void OrgJodaConvertJDKStringConverter_$3_initWithIOSClass_withNSString_withInt_(OrgJodaConvertJDKStringConverter_$3 *self, IOSClass *arg$0, NSString *__name, jint __ordinal);

@interface OrgJodaConvertJDKStringConverter_$4 : OrgJodaConvertJDKStringConverter < NSCopying >

- (id)convertFromStringWithIOSClass:(IOSClass *)cls
                       withNSString:(NSString *)str;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgJodaConvertJDKStringConverter_$4)

__attribute__((unused)) static void OrgJodaConvertJDKStringConverter_$4_initWithIOSClass_withNSString_withInt_(OrgJodaConvertJDKStringConverter_$4 *self, IOSClass *arg$0, NSString *__name, jint __ordinal);

@interface OrgJodaConvertJDKStringConverter_$5 : OrgJodaConvertJDKStringConverter < NSCopying >

- (id)convertFromStringWithIOSClass:(IOSClass *)cls
                       withNSString:(NSString *)str;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgJodaConvertJDKStringConverter_$5)

__attribute__((unused)) static void OrgJodaConvertJDKStringConverter_$5_initWithIOSClass_withNSString_withInt_(OrgJodaConvertJDKStringConverter_$5 *self, IOSClass *arg$0, NSString *__name, jint __ordinal);

@interface OrgJodaConvertJDKStringConverter_$6 : OrgJodaConvertJDKStringConverter < NSCopying >

- (id)convertFromStringWithIOSClass:(IOSClass *)cls
                       withNSString:(NSString *)str;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgJodaConvertJDKStringConverter_$6)

__attribute__((unused)) static void OrgJodaConvertJDKStringConverter_$6_initWithIOSClass_withNSString_withInt_(OrgJodaConvertJDKStringConverter_$6 *self, IOSClass *arg$0, NSString *__name, jint __ordinal);

@interface OrgJodaConvertJDKStringConverter_$7 : OrgJodaConvertJDKStringConverter < NSCopying >

- (id)convertFromStringWithIOSClass:(IOSClass *)cls
                       withNSString:(NSString *)str;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgJodaConvertJDKStringConverter_$7)

__attribute__((unused)) static void OrgJodaConvertJDKStringConverter_$7_initWithIOSClass_withNSString_withInt_(OrgJodaConvertJDKStringConverter_$7 *self, IOSClass *arg$0, NSString *__name, jint __ordinal);

@interface OrgJodaConvertJDKStringConverter_$8 : OrgJodaConvertJDKStringConverter < NSCopying >

- (id)convertFromStringWithIOSClass:(IOSClass *)cls
                       withNSString:(NSString *)str;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgJodaConvertJDKStringConverter_$8)

__attribute__((unused)) static void OrgJodaConvertJDKStringConverter_$8_initWithIOSClass_withNSString_withInt_(OrgJodaConvertJDKStringConverter_$8 *self, IOSClass *arg$0, NSString *__name, jint __ordinal);

@interface OrgJodaConvertJDKStringConverter_$9 : OrgJodaConvertJDKStringConverter < NSCopying >

- (NSString *)convertToStringWithId:(id)object;

- (id)convertFromStringWithIOSClass:(IOSClass *)cls
                       withNSString:(NSString *)str;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgJodaConvertJDKStringConverter_$9)

__attribute__((unused)) static void OrgJodaConvertJDKStringConverter_$9_initWithIOSClass_withNSString_withInt_(OrgJodaConvertJDKStringConverter_$9 *self, IOSClass *arg$0, NSString *__name, jint __ordinal);

@interface OrgJodaConvertJDKStringConverter_$10 : OrgJodaConvertJDKStringConverter < NSCopying >

- (id)convertFromStringWithIOSClass:(IOSClass *)cls
                       withNSString:(NSString *)str;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgJodaConvertJDKStringConverter_$10)

__attribute__((unused)) static void OrgJodaConvertJDKStringConverter_$10_initWithIOSClass_withNSString_withInt_(OrgJodaConvertJDKStringConverter_$10 *self, IOSClass *arg$0, NSString *__name, jint __ordinal);

@interface OrgJodaConvertJDKStringConverter_$11 : OrgJodaConvertJDKStringConverter < NSCopying >

- (NSString *)convertToStringWithId:(id)object;

- (id)convertFromStringWithIOSClass:(IOSClass *)cls
                       withNSString:(NSString *)str;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgJodaConvertJDKStringConverter_$11)

__attribute__((unused)) static void OrgJodaConvertJDKStringConverter_$11_initWithIOSClass_withNSString_withInt_(OrgJodaConvertJDKStringConverter_$11 *self, IOSClass *arg$0, NSString *__name, jint __ordinal);

@interface OrgJodaConvertJDKStringConverter_$12 : OrgJodaConvertJDKStringConverter < NSCopying >

- (id)convertFromStringWithIOSClass:(IOSClass *)cls
                       withNSString:(NSString *)str;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgJodaConvertJDKStringConverter_$12)

__attribute__((unused)) static void OrgJodaConvertJDKStringConverter_$12_initWithIOSClass_withNSString_withInt_(OrgJodaConvertJDKStringConverter_$12 *self, IOSClass *arg$0, NSString *__name, jint __ordinal);

@interface OrgJodaConvertJDKStringConverter_$13 : OrgJodaConvertJDKStringConverter < NSCopying >

- (id)convertFromStringWithIOSClass:(IOSClass *)cls
                       withNSString:(NSString *)str;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgJodaConvertJDKStringConverter_$13)

__attribute__((unused)) static void OrgJodaConvertJDKStringConverter_$13_initWithIOSClass_withNSString_withInt_(OrgJodaConvertJDKStringConverter_$13 *self, IOSClass *arg$0, NSString *__name, jint __ordinal);

@interface OrgJodaConvertJDKStringConverter_$14 : OrgJodaConvertJDKStringConverter < NSCopying >

- (id)convertFromStringWithIOSClass:(IOSClass *)cls
                       withNSString:(NSString *)str;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgJodaConvertJDKStringConverter_$14)

__attribute__((unused)) static void OrgJodaConvertJDKStringConverter_$14_initWithIOSClass_withNSString_withInt_(OrgJodaConvertJDKStringConverter_$14 *self, IOSClass *arg$0, NSString *__name, jint __ordinal);

@interface OrgJodaConvertJDKStringConverter_$15 : OrgJodaConvertJDKStringConverter < NSCopying >

- (id)convertFromStringWithIOSClass:(IOSClass *)cls
                       withNSString:(NSString *)str;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgJodaConvertJDKStringConverter_$15)

__attribute__((unused)) static void OrgJodaConvertJDKStringConverter_$15_initWithIOSClass_withNSString_withInt_(OrgJodaConvertJDKStringConverter_$15 *self, IOSClass *arg$0, NSString *__name, jint __ordinal);

@interface OrgJodaConvertJDKStringConverter_$16 : OrgJodaConvertJDKStringConverter < NSCopying >

- (id)convertFromStringWithIOSClass:(IOSClass *)cls
                       withNSString:(NSString *)str;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgJodaConvertJDKStringConverter_$16)

__attribute__((unused)) static void OrgJodaConvertJDKStringConverter_$16_initWithIOSClass_withNSString_withInt_(OrgJodaConvertJDKStringConverter_$16 *self, IOSClass *arg$0, NSString *__name, jint __ordinal);

@interface OrgJodaConvertJDKStringConverter_$17 : OrgJodaConvertJDKStringConverter < NSCopying >

- (id)convertFromStringWithIOSClass:(IOSClass *)cls
                       withNSString:(NSString *)str;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgJodaConvertJDKStringConverter_$17)

__attribute__((unused)) static void OrgJodaConvertJDKStringConverter_$17_initWithIOSClass_withNSString_withInt_(OrgJodaConvertJDKStringConverter_$17 *self, IOSClass *arg$0, NSString *__name, jint __ordinal);

@interface OrgJodaConvertJDKStringConverter_$18 : OrgJodaConvertJDKStringConverter < NSCopying >

- (id)convertFromStringWithIOSClass:(IOSClass *)cls
                       withNSString:(NSString *)str;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgJodaConvertJDKStringConverter_$18)

__attribute__((unused)) static void OrgJodaConvertJDKStringConverter_$18_initWithIOSClass_withNSString_withInt_(OrgJodaConvertJDKStringConverter_$18 *self, IOSClass *arg$0, NSString *__name, jint __ordinal);

@interface OrgJodaConvertJDKStringConverter_$19 : OrgJodaConvertJDKStringConverter < NSCopying >

- (id)convertFromStringWithIOSClass:(IOSClass *)cls
                       withNSString:(NSString *)str;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgJodaConvertJDKStringConverter_$19)

__attribute__((unused)) static void OrgJodaConvertJDKStringConverter_$19_initWithIOSClass_withNSString_withInt_(OrgJodaConvertJDKStringConverter_$19 *self, IOSClass *arg$0, NSString *__name, jint __ordinal);

@interface OrgJodaConvertJDKStringConverter_$20 : OrgJodaConvertJDKStringConverter < NSCopying >

- (id)convertFromStringWithIOSClass:(IOSClass *)cls
                       withNSString:(NSString *)str;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgJodaConvertJDKStringConverter_$20)

__attribute__((unused)) static void OrgJodaConvertJDKStringConverter_$20_initWithIOSClass_withNSString_withInt_(OrgJodaConvertJDKStringConverter_$20 *self, IOSClass *arg$0, NSString *__name, jint __ordinal);

@interface OrgJodaConvertJDKStringConverter_$21 : OrgJodaConvertJDKStringConverter < NSCopying >

- (NSString *)convertToStringWithId:(id)object;

- (id)convertFromStringWithIOSClass:(IOSClass *)cls
                       withNSString:(NSString *)str;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgJodaConvertJDKStringConverter_$21)

__attribute__((unused)) static void OrgJodaConvertJDKStringConverter_$21_initWithIOSClass_withNSString_withInt_(OrgJodaConvertJDKStringConverter_$21 *self, IOSClass *arg$0, NSString *__name, jint __ordinal);

@interface OrgJodaConvertJDKStringConverter_$22 : OrgJodaConvertJDKStringConverter < NSCopying >

- (NSString *)convertToStringWithId:(id)object;

- (id)convertFromStringWithIOSClass:(IOSClass *)cls
                       withNSString:(NSString *)str;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgJodaConvertJDKStringConverter_$22)

__attribute__((unused)) static void OrgJodaConvertJDKStringConverter_$22_initWithIOSClass_withNSString_withInt_(OrgJodaConvertJDKStringConverter_$22 *self, IOSClass *arg$0, NSString *__name, jint __ordinal);

@interface OrgJodaConvertJDKStringConverter_$23 : OrgJodaConvertJDKStringConverter < NSCopying >

- (id)convertFromStringWithIOSClass:(IOSClass *)cls
                       withNSString:(NSString *)str;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgJodaConvertJDKStringConverter_$23)

__attribute__((unused)) static void OrgJodaConvertJDKStringConverter_$23_initWithIOSClass_withNSString_withInt_(OrgJodaConvertJDKStringConverter_$23 *self, IOSClass *arg$0, NSString *__name, jint __ordinal);

@interface OrgJodaConvertJDKStringConverter_$24 : OrgJodaConvertJDKStringConverter < NSCopying >

- (NSString *)convertToStringWithId:(id)object;

- (id)convertFromStringWithIOSClass:(IOSClass *)cls
                       withNSString:(NSString *)str;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgJodaConvertJDKStringConverter_$24)

__attribute__((unused)) static void OrgJodaConvertJDKStringConverter_$24_initWithIOSClass_withNSString_withInt_(OrgJodaConvertJDKStringConverter_$24 *self, IOSClass *arg$0, NSString *__name, jint __ordinal);

@interface OrgJodaConvertJDKStringConverter_$25 : OrgJodaConvertJDKStringConverter < NSCopying >

- (id)convertFromStringWithIOSClass:(IOSClass *)cls
                       withNSString:(NSString *)str;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgJodaConvertJDKStringConverter_$25)

__attribute__((unused)) static void OrgJodaConvertJDKStringConverter_$25_initWithIOSClass_withNSString_withInt_(OrgJodaConvertJDKStringConverter_$25 *self, IOSClass *arg$0, NSString *__name, jint __ordinal);

@interface OrgJodaConvertJDKStringConverter_$26 : OrgJodaConvertJDKStringConverter < NSCopying >

- (id)convertFromStringWithIOSClass:(IOSClass *)cls
                       withNSString:(NSString *)str;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgJodaConvertJDKStringConverter_$26)

__attribute__((unused)) static void OrgJodaConvertJDKStringConverter_$26_initWithIOSClass_withNSString_withInt_(OrgJodaConvertJDKStringConverter_$26 *self, IOSClass *arg$0, NSString *__name, jint __ordinal);

@interface OrgJodaConvertJDKStringConverter_$27 : OrgJodaConvertJDKStringConverter < NSCopying >

- (id)convertFromStringWithIOSClass:(IOSClass *)cls
                       withNSString:(NSString *)str;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgJodaConvertJDKStringConverter_$27)

__attribute__((unused)) static void OrgJodaConvertJDKStringConverter_$27_initWithIOSClass_withNSString_withInt_(OrgJodaConvertJDKStringConverter_$27 *self, IOSClass *arg$0, NSString *__name, jint __ordinal);

@interface OrgJodaConvertJDKStringConverter_$28 : OrgJodaConvertJDKStringConverter < NSCopying >

- (NSString *)convertToStringWithId:(id)object;

- (id)convertFromStringWithIOSClass:(IOSClass *)cls
                       withNSString:(NSString *)str;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgJodaConvertJDKStringConverter_$28)

__attribute__((unused)) static void OrgJodaConvertJDKStringConverter_$28_initWithIOSClass_withNSString_withInt_(OrgJodaConvertJDKStringConverter_$28 *self, IOSClass *arg$0, NSString *__name, jint __ordinal);

@interface OrgJodaConvertJDKStringConverter_$29 : OrgJodaConvertJDKStringConverter < NSCopying >

- (id)convertFromStringWithIOSClass:(IOSClass *)cls
                       withNSString:(NSString *)str;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgJodaConvertJDKStringConverter_$29)

__attribute__((unused)) static void OrgJodaConvertJDKStringConverter_$29_initWithIOSClass_withNSString_withInt_(OrgJodaConvertJDKStringConverter_$29 *self, IOSClass *arg$0, NSString *__name, jint __ordinal);

@interface OrgJodaConvertJDKStringConverter_$30 : OrgJodaConvertJDKStringConverter < NSCopying >

- (NSString *)convertToStringWithId:(id)object;

- (id)convertFromStringWithIOSClass:(IOSClass *)cls
                       withNSString:(NSString *)str;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgJodaConvertJDKStringConverter_$30)

__attribute__((unused)) static void OrgJodaConvertJDKStringConverter_$30_initWithIOSClass_withNSString_withInt_(OrgJodaConvertJDKStringConverter_$30 *self, IOSClass *arg$0, NSString *__name, jint __ordinal);

@interface OrgJodaConvertJDKStringConverter_$31 : OrgJodaConvertJDKStringConverter < NSCopying >

- (NSString *)convertToStringWithId:(id)object;

- (id)convertFromStringWithIOSClass:(IOSClass *)cls
                       withNSString:(NSString *)str;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgJodaConvertJDKStringConverter_$31)

__attribute__((unused)) static void OrgJodaConvertJDKStringConverter_$31_initWithIOSClass_withNSString_withInt_(OrgJodaConvertJDKStringConverter_$31 *self, IOSClass *arg$0, NSString *__name, jint __ordinal);

J2OBJC_INITIALIZED_DEFN(OrgJodaConvertJDKStringConverter)

OrgJodaConvertJDKStringConverter *OrgJodaConvertJDKStringConverter_values_[31];

@implementation OrgJodaConvertJDKStringConverter

- (IOSClass *)getType {
  return type_;
}

- (IOSClass *)getEffectiveType {
  return type_;
}

- (NSString *)convertToStringWithId:(id)object {
  return [nil_chk(object) description];
}

+ (IOSObjectArray *)values {
  return OrgJodaConvertJDKStringConverter_values();
}

+ (OrgJodaConvertJDKStringConverter *)valueOfWithNSString:(NSString *)name {
  return OrgJodaConvertJDKStringConverter_valueOfWithNSString_(name);
}

- (id)copyWithZone:(NSZone *)zone {
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LIOSClass;", 0x0, -1, -1, -1, 0, -1, -1 },
    { NULL, "LIOSClass;", 0x1, -1, -1, -1, 0, -1, -1 },
    { NULL, "LNSString;", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "[LOrgJodaConvertJDKStringConverter;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaConvertJDKStringConverter;", 0x9, 3, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(getType);
  methods[1].selector = @selector(getEffectiveType);
  methods[2].selector = @selector(convertToStringWithId:);
  methods[3].selector = @selector(values);
  methods[4].selector = @selector(valueOfWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "STRING", "LOrgJodaConvertJDKStringConverter;", .constantValue.asLong = 0, 0x4019, -1, 5, -1, -1 },
    { "CHAR_SEQUENCE", "LOrgJodaConvertJDKStringConverter;", .constantValue.asLong = 0, 0x4019, -1, 6, -1, -1 },
    { "STRING_BUFFER", "LOrgJodaConvertJDKStringConverter;", .constantValue.asLong = 0, 0x4019, -1, 7, -1, -1 },
    { "STRING_BUILDER", "LOrgJodaConvertJDKStringConverter;", .constantValue.asLong = 0, 0x4019, -1, 8, -1, -1 },
    { "LONG", "LOrgJodaConvertJDKStringConverter;", .constantValue.asLong = 0, 0x4019, -1, 9, -1, -1 },
    { "INTEGER", "LOrgJodaConvertJDKStringConverter;", .constantValue.asLong = 0, 0x4019, -1, 10, -1, -1 },
    { "SHORT", "LOrgJodaConvertJDKStringConverter;", .constantValue.asLong = 0, 0x4019, -1, 11, -1, -1 },
    { "BYTE", "LOrgJodaConvertJDKStringConverter;", .constantValue.asLong = 0, 0x4019, -1, 12, -1, -1 },
    { "BYTE_ARRAY", "LOrgJodaConvertJDKStringConverter;", .constantValue.asLong = 0, 0x4019, -1, 13, -1, -1 },
    { "CHARACTER", "LOrgJodaConvertJDKStringConverter;", .constantValue.asLong = 0, 0x4019, -1, 14, -1, -1 },
    { "CHAR_ARRAY", "LOrgJodaConvertJDKStringConverter;", .constantValue.asLong = 0, 0x4019, -1, 15, -1, -1 },
    { "BOOLEAN", "LOrgJodaConvertJDKStringConverter;", .constantValue.asLong = 0, 0x4019, -1, 16, -1, -1 },
    { "DOUBLE", "LOrgJodaConvertJDKStringConverter;", .constantValue.asLong = 0, 0x4019, -1, 17, -1, -1 },
    { "FLOAT", "LOrgJodaConvertJDKStringConverter;", .constantValue.asLong = 0, 0x4019, -1, 18, -1, -1 },
    { "BIG_INTEGER", "LOrgJodaConvertJDKStringConverter;", .constantValue.asLong = 0, 0x4019, -1, 19, -1, -1 },
    { "BIG_DECIMAL", "LOrgJodaConvertJDKStringConverter;", .constantValue.asLong = 0, 0x4019, -1, 20, -1, -1 },
    { "ATOMIC_LONG", "LOrgJodaConvertJDKStringConverter;", .constantValue.asLong = 0, 0x4019, -1, 21, -1, -1 },
    { "ATOMIC_INTEGER", "LOrgJodaConvertJDKStringConverter;", .constantValue.asLong = 0, 0x4019, -1, 22, -1, -1 },
    { "ATOMIC_BOOLEAN", "LOrgJodaConvertJDKStringConverter;", .constantValue.asLong = 0, 0x4019, -1, 23, -1, -1 },
    { "LOCALE", "LOrgJodaConvertJDKStringConverter;", .constantValue.asLong = 0, 0x4019, -1, 24, -1, -1 },
    { "CLASS", "LOrgJodaConvertJDKStringConverter;", .constantValue.asLong = 0, 0x4019, -1, 25, -1, -1 },
    { "PACKAGE", "LOrgJodaConvertJDKStringConverter;", .constantValue.asLong = 0, 0x4019, -1, 26, -1, -1 },
    { "CURRENCY", "LOrgJodaConvertJDKStringConverter;", .constantValue.asLong = 0, 0x4019, -1, 27, -1, -1 },
    { "TIME_ZONE", "LOrgJodaConvertJDKStringConverter;", .constantValue.asLong = 0, 0x4019, -1, 28, -1, -1 },
    { "UUID", "LOrgJodaConvertJDKStringConverter;", .constantValue.asLong = 0, 0x4019, -1, 29, -1, -1 },
    { "URL", "LOrgJodaConvertJDKStringConverter;", .constantValue.asLong = 0, 0x4019, -1, 30, -1, -1 },
    { "URI", "LOrgJodaConvertJDKStringConverter;", .constantValue.asLong = 0, 0x4019, -1, 31, -1, -1 },
    { "INET_ADDRESS", "LOrgJodaConvertJDKStringConverter;", .constantValue.asLong = 0, 0x4019, -1, 32, -1, -1 },
    { "FILE", "LOrgJodaConvertJDKStringConverter;", .constantValue.asLong = 0, 0x4019, -1, 33, -1, -1 },
    { "DATE", "LOrgJodaConvertJDKStringConverter;", .constantValue.asLong = 0, 0x4019, -1, 34, -1, -1 },
    { "CALENDAR", "LOrgJodaConvertJDKStringConverter;", .constantValue.asLong = 0, 0x4019, -1, 35, -1, -1 },
    { "type_", "LIOSClass;", .constantValue.asLong = 0, 0x2, -1, -1, 36, -1 },
  };
  static const void *ptrTable[] = { "()Ljava/lang/Class<*>;", "convertToString", "LNSObject;", "valueOf", "LNSString;", &JreEnum(OrgJodaConvertJDKStringConverter, STRING), &JreEnum(OrgJodaConvertJDKStringConverter, CHAR_SEQUENCE), &JreEnum(OrgJodaConvertJDKStringConverter, STRING_BUFFER), &JreEnum(OrgJodaConvertJDKStringConverter, STRING_BUILDER), &JreEnum(OrgJodaConvertJDKStringConverter, LONG), &JreEnum(OrgJodaConvertJDKStringConverter, INTEGER), &JreEnum(OrgJodaConvertJDKStringConverter, SHORT), &JreEnum(OrgJodaConvertJDKStringConverter, BYTE), &JreEnum(OrgJodaConvertJDKStringConverter, BYTE_ARRAY), &JreEnum(OrgJodaConvertJDKStringConverter, CHARACTER), &JreEnum(OrgJodaConvertJDKStringConverter, CHAR_ARRAY), &JreEnum(OrgJodaConvertJDKStringConverter, BOOLEAN), &JreEnum(OrgJodaConvertJDKStringConverter, DOUBLE), &JreEnum(OrgJodaConvertJDKStringConverter, FLOAT), &JreEnum(OrgJodaConvertJDKStringConverter, BIG_INTEGER), &JreEnum(OrgJodaConvertJDKStringConverter, BIG_DECIMAL), &JreEnum(OrgJodaConvertJDKStringConverter, ATOMIC_LONG), &JreEnum(OrgJodaConvertJDKStringConverter, ATOMIC_INTEGER), &JreEnum(OrgJodaConvertJDKStringConverter, ATOMIC_BOOLEAN), &JreEnum(OrgJodaConvertJDKStringConverter, LOCALE), &JreEnum(OrgJodaConvertJDKStringConverter, CLASS), &JreEnum(OrgJodaConvertJDKStringConverter, PACKAGE), &JreEnum(OrgJodaConvertJDKStringConverter, CURRENCY), &JreEnum(OrgJodaConvertJDKStringConverter, TIME_ZONE), &JreEnum(OrgJodaConvertJDKStringConverter, UUID), &JreEnum(OrgJodaConvertJDKStringConverter, URL), &JreEnum(OrgJodaConvertJDKStringConverter, URI), &JreEnum(OrgJodaConvertJDKStringConverter, INET_ADDRESS), &JreEnum(OrgJodaConvertJDKStringConverter, FILE), &JreEnum(OrgJodaConvertJDKStringConverter, DATE), &JreEnum(OrgJodaConvertJDKStringConverter, CALENDAR), "Ljava/lang/Class<*>;", "Ljava/lang/Enum<Lorg/joda/convert/JDKStringConverter;>;Lorg/joda/convert/TypedStringConverter<Ljava/lang/Object;>;" };
  static const J2ObjcClassInfo _OrgJodaConvertJDKStringConverter = { "JDKStringConverter", "org.joda.convert", ptrTable, methods, fields, 7, 0x4400, 5, 32, -1, -1, -1, 37, -1 };
  return &_OrgJodaConvertJDKStringConverter;
}

+ (void)initialize {
  if (self == [OrgJodaConvertJDKStringConverter class]) {
    size_t allocSize = 0;
    size_t objSize_STRING = class_getInstanceSize([OrgJodaConvertJDKStringConverter_$1 class]);
    allocSize += objSize_STRING;
    size_t objSize_CHAR_SEQUENCE = class_getInstanceSize([OrgJodaConvertJDKStringConverter_$2 class]);
    allocSize += objSize_CHAR_SEQUENCE;
    size_t objSize_STRING_BUFFER = class_getInstanceSize([OrgJodaConvertJDKStringConverter_$3 class]);
    allocSize += objSize_STRING_BUFFER;
    size_t objSize_STRING_BUILDER = class_getInstanceSize([OrgJodaConvertJDKStringConverter_$4 class]);
    allocSize += objSize_STRING_BUILDER;
    size_t objSize_LONG = class_getInstanceSize([OrgJodaConvertJDKStringConverter_$5 class]);
    allocSize += objSize_LONG;
    size_t objSize_INTEGER = class_getInstanceSize([OrgJodaConvertJDKStringConverter_$6 class]);
    allocSize += objSize_INTEGER;
    size_t objSize_SHORT = class_getInstanceSize([OrgJodaConvertJDKStringConverter_$7 class]);
    allocSize += objSize_SHORT;
    size_t objSize_BYTE = class_getInstanceSize([OrgJodaConvertJDKStringConverter_$8 class]);
    allocSize += objSize_BYTE;
    size_t objSize_BYTE_ARRAY = class_getInstanceSize([OrgJodaConvertJDKStringConverter_$9 class]);
    allocSize += objSize_BYTE_ARRAY;
    size_t objSize_CHARACTER = class_getInstanceSize([OrgJodaConvertJDKStringConverter_$10 class]);
    allocSize += objSize_CHARACTER;
    size_t objSize_CHAR_ARRAY = class_getInstanceSize([OrgJodaConvertJDKStringConverter_$11 class]);
    allocSize += objSize_CHAR_ARRAY;
    size_t objSize_BOOLEAN = class_getInstanceSize([OrgJodaConvertJDKStringConverter_$12 class]);
    allocSize += objSize_BOOLEAN;
    size_t objSize_DOUBLE = class_getInstanceSize([OrgJodaConvertJDKStringConverter_$13 class]);
    allocSize += objSize_DOUBLE;
    size_t objSize_FLOAT = class_getInstanceSize([OrgJodaConvertJDKStringConverter_$14 class]);
    allocSize += objSize_FLOAT;
    size_t objSize_BIG_INTEGER = class_getInstanceSize([OrgJodaConvertJDKStringConverter_$15 class]);
    allocSize += objSize_BIG_INTEGER;
    size_t objSize_BIG_DECIMAL = class_getInstanceSize([OrgJodaConvertJDKStringConverter_$16 class]);
    allocSize += objSize_BIG_DECIMAL;
    size_t objSize_ATOMIC_LONG = class_getInstanceSize([OrgJodaConvertJDKStringConverter_$17 class]);
    allocSize += objSize_ATOMIC_LONG;
    size_t objSize_ATOMIC_INTEGER = class_getInstanceSize([OrgJodaConvertJDKStringConverter_$18 class]);
    allocSize += objSize_ATOMIC_INTEGER;
    size_t objSize_ATOMIC_BOOLEAN = class_getInstanceSize([OrgJodaConvertJDKStringConverter_$19 class]);
    allocSize += objSize_ATOMIC_BOOLEAN;
    size_t objSize_LOCALE = class_getInstanceSize([OrgJodaConvertJDKStringConverter_$20 class]);
    allocSize += objSize_LOCALE;
    size_t objSize_CLASS = class_getInstanceSize([OrgJodaConvertJDKStringConverter_$21 class]);
    allocSize += objSize_CLASS;
    size_t objSize_PACKAGE = class_getInstanceSize([OrgJodaConvertJDKStringConverter_$22 class]);
    allocSize += objSize_PACKAGE;
    size_t objSize_CURRENCY = class_getInstanceSize([OrgJodaConvertJDKStringConverter_$23 class]);
    allocSize += objSize_CURRENCY;
    size_t objSize_TIME_ZONE = class_getInstanceSize([OrgJodaConvertJDKStringConverter_$24 class]);
    allocSize += objSize_TIME_ZONE;
    size_t objSize_UUID = class_getInstanceSize([OrgJodaConvertJDKStringConverter_$25 class]);
    allocSize += objSize_UUID;
    size_t objSize_URL = class_getInstanceSize([OrgJodaConvertJDKStringConverter_$26 class]);
    allocSize += objSize_URL;
    size_t objSize_URI = class_getInstanceSize([OrgJodaConvertJDKStringConverter_$27 class]);
    allocSize += objSize_URI;
    size_t objSize_INET_ADDRESS = class_getInstanceSize([OrgJodaConvertJDKStringConverter_$28 class]);
    allocSize += objSize_INET_ADDRESS;
    size_t objSize_FILE = class_getInstanceSize([OrgJodaConvertJDKStringConverter_$29 class]);
    allocSize += objSize_FILE;
    size_t objSize_DATE = class_getInstanceSize([OrgJodaConvertJDKStringConverter_$30 class]);
    allocSize += objSize_DATE;
    size_t objSize_CALENDAR = class_getInstanceSize([OrgJodaConvertJDKStringConverter_$31 class]);
    allocSize += objSize_CALENDAR;
    uintptr_t ptr = (uintptr_t)calloc(allocSize, 1);
    id e;
    (JreEnum(OrgJodaConvertJDKStringConverter, STRING) = e = objc_constructInstance([OrgJodaConvertJDKStringConverter_$1 class], (void *)ptr), ptr += objSize_STRING);
    OrgJodaConvertJDKStringConverter_$1_initWithIOSClass_withNSString_withInt_(e, NSString_class_(), @"STRING", 0);
    (JreEnum(OrgJodaConvertJDKStringConverter, CHAR_SEQUENCE) = e = objc_constructInstance([OrgJodaConvertJDKStringConverter_$2 class], (void *)ptr), ptr += objSize_CHAR_SEQUENCE);
    OrgJodaConvertJDKStringConverter_$2_initWithIOSClass_withNSString_withInt_(e, JavaLangCharSequence_class_(), @"CHAR_SEQUENCE", 1);
    (JreEnum(OrgJodaConvertJDKStringConverter, STRING_BUFFER) = e = objc_constructInstance([OrgJodaConvertJDKStringConverter_$3 class], (void *)ptr), ptr += objSize_STRING_BUFFER);
    OrgJodaConvertJDKStringConverter_$3_initWithIOSClass_withNSString_withInt_(e, JavaLangStringBuffer_class_(), @"STRING_BUFFER", 2);
    (JreEnum(OrgJodaConvertJDKStringConverter, STRING_BUILDER) = e = objc_constructInstance([OrgJodaConvertJDKStringConverter_$4 class], (void *)ptr), ptr += objSize_STRING_BUILDER);
    OrgJodaConvertJDKStringConverter_$4_initWithIOSClass_withNSString_withInt_(e, JavaLangStringBuilder_class_(), @"STRING_BUILDER", 3);
    (JreEnum(OrgJodaConvertJDKStringConverter, LONG) = e = objc_constructInstance([OrgJodaConvertJDKStringConverter_$5 class], (void *)ptr), ptr += objSize_LONG);
    OrgJodaConvertJDKStringConverter_$5_initWithIOSClass_withNSString_withInt_(e, JavaLangLong_class_(), @"LONG", 4);
    (JreEnum(OrgJodaConvertJDKStringConverter, INTEGER) = e = objc_constructInstance([OrgJodaConvertJDKStringConverter_$6 class], (void *)ptr), ptr += objSize_INTEGER);
    OrgJodaConvertJDKStringConverter_$6_initWithIOSClass_withNSString_withInt_(e, JavaLangInteger_class_(), @"INTEGER", 5);
    (JreEnum(OrgJodaConvertJDKStringConverter, SHORT) = e = objc_constructInstance([OrgJodaConvertJDKStringConverter_$7 class], (void *)ptr), ptr += objSize_SHORT);
    OrgJodaConvertJDKStringConverter_$7_initWithIOSClass_withNSString_withInt_(e, JavaLangShort_class_(), @"SHORT", 6);
    (JreEnum(OrgJodaConvertJDKStringConverter, BYTE) = e = objc_constructInstance([OrgJodaConvertJDKStringConverter_$8 class], (void *)ptr), ptr += objSize_BYTE);
    OrgJodaConvertJDKStringConverter_$8_initWithIOSClass_withNSString_withInt_(e, JavaLangByte_class_(), @"BYTE", 7);
    (JreEnum(OrgJodaConvertJDKStringConverter, BYTE_ARRAY) = e = objc_constructInstance([OrgJodaConvertJDKStringConverter_$9 class], (void *)ptr), ptr += objSize_BYTE_ARRAY);
    OrgJodaConvertJDKStringConverter_$9_initWithIOSClass_withNSString_withInt_(e, IOSClass_byteArray(1), @"BYTE_ARRAY", 8);
    (JreEnum(OrgJodaConvertJDKStringConverter, CHARACTER) = e = objc_constructInstance([OrgJodaConvertJDKStringConverter_$10 class], (void *)ptr), ptr += objSize_CHARACTER);
    OrgJodaConvertJDKStringConverter_$10_initWithIOSClass_withNSString_withInt_(e, JavaLangCharacter_class_(), @"CHARACTER", 9);
    (JreEnum(OrgJodaConvertJDKStringConverter, CHAR_ARRAY) = e = objc_constructInstance([OrgJodaConvertJDKStringConverter_$11 class], (void *)ptr), ptr += objSize_CHAR_ARRAY);
    OrgJodaConvertJDKStringConverter_$11_initWithIOSClass_withNSString_withInt_(e, IOSClass_charArray(1), @"CHAR_ARRAY", 10);
    (JreEnum(OrgJodaConvertJDKStringConverter, BOOLEAN) = e = objc_constructInstance([OrgJodaConvertJDKStringConverter_$12 class], (void *)ptr), ptr += objSize_BOOLEAN);
    OrgJodaConvertJDKStringConverter_$12_initWithIOSClass_withNSString_withInt_(e, JavaLangBoolean_class_(), @"BOOLEAN", 11);
    (JreEnum(OrgJodaConvertJDKStringConverter, DOUBLE) = e = objc_constructInstance([OrgJodaConvertJDKStringConverter_$13 class], (void *)ptr), ptr += objSize_DOUBLE);
    OrgJodaConvertJDKStringConverter_$13_initWithIOSClass_withNSString_withInt_(e, JavaLangDouble_class_(), @"DOUBLE", 12);
    (JreEnum(OrgJodaConvertJDKStringConverter, FLOAT) = e = objc_constructInstance([OrgJodaConvertJDKStringConverter_$14 class], (void *)ptr), ptr += objSize_FLOAT);
    OrgJodaConvertJDKStringConverter_$14_initWithIOSClass_withNSString_withInt_(e, JavaLangFloat_class_(), @"FLOAT", 13);
    (JreEnum(OrgJodaConvertJDKStringConverter, BIG_INTEGER) = e = objc_constructInstance([OrgJodaConvertJDKStringConverter_$15 class], (void *)ptr), ptr += objSize_BIG_INTEGER);
    OrgJodaConvertJDKStringConverter_$15_initWithIOSClass_withNSString_withInt_(e, JavaMathBigInteger_class_(), @"BIG_INTEGER", 14);
    (JreEnum(OrgJodaConvertJDKStringConverter, BIG_DECIMAL) = e = objc_constructInstance([OrgJodaConvertJDKStringConverter_$16 class], (void *)ptr), ptr += objSize_BIG_DECIMAL);
    OrgJodaConvertJDKStringConverter_$16_initWithIOSClass_withNSString_withInt_(e, JavaMathBigDecimal_class_(), @"BIG_DECIMAL", 15);
    (JreEnum(OrgJodaConvertJDKStringConverter, ATOMIC_LONG) = e = objc_constructInstance([OrgJodaConvertJDKStringConverter_$17 class], (void *)ptr), ptr += objSize_ATOMIC_LONG);
    OrgJodaConvertJDKStringConverter_$17_initWithIOSClass_withNSString_withInt_(e, JavaUtilConcurrentAtomicAtomicLong_class_(), @"ATOMIC_LONG", 16);
    (JreEnum(OrgJodaConvertJDKStringConverter, ATOMIC_INTEGER) = e = objc_constructInstance([OrgJodaConvertJDKStringConverter_$18 class], (void *)ptr), ptr += objSize_ATOMIC_INTEGER);
    OrgJodaConvertJDKStringConverter_$18_initWithIOSClass_withNSString_withInt_(e, JavaUtilConcurrentAtomicAtomicInteger_class_(), @"ATOMIC_INTEGER", 17);
    (JreEnum(OrgJodaConvertJDKStringConverter, ATOMIC_BOOLEAN) = e = objc_constructInstance([OrgJodaConvertJDKStringConverter_$19 class], (void *)ptr), ptr += objSize_ATOMIC_BOOLEAN);
    OrgJodaConvertJDKStringConverter_$19_initWithIOSClass_withNSString_withInt_(e, JavaUtilConcurrentAtomicAtomicBoolean_class_(), @"ATOMIC_BOOLEAN", 18);
    (JreEnum(OrgJodaConvertJDKStringConverter, LOCALE) = e = objc_constructInstance([OrgJodaConvertJDKStringConverter_$20 class], (void *)ptr), ptr += objSize_LOCALE);
    OrgJodaConvertJDKStringConverter_$20_initWithIOSClass_withNSString_withInt_(e, JavaUtilLocale_class_(), @"LOCALE", 19);
    (JreEnum(OrgJodaConvertJDKStringConverter, CLASS) = e = objc_constructInstance([OrgJodaConvertJDKStringConverter_$21 class], (void *)ptr), ptr += objSize_CLASS);
    OrgJodaConvertJDKStringConverter_$21_initWithIOSClass_withNSString_withInt_(e, IOSClass_class_(), @"CLASS", 20);
    (JreEnum(OrgJodaConvertJDKStringConverter, PACKAGE) = e = objc_constructInstance([OrgJodaConvertJDKStringConverter_$22 class], (void *)ptr), ptr += objSize_PACKAGE);
    OrgJodaConvertJDKStringConverter_$22_initWithIOSClass_withNSString_withInt_(e, JavaLangPackage_class_(), @"PACKAGE", 21);
    (JreEnum(OrgJodaConvertJDKStringConverter, CURRENCY) = e = objc_constructInstance([OrgJodaConvertJDKStringConverter_$23 class], (void *)ptr), ptr += objSize_CURRENCY);
    OrgJodaConvertJDKStringConverter_$23_initWithIOSClass_withNSString_withInt_(e, JavaUtilCurrency_class_(), @"CURRENCY", 22);
    (JreEnum(OrgJodaConvertJDKStringConverter, TIME_ZONE) = e = objc_constructInstance([OrgJodaConvertJDKStringConverter_$24 class], (void *)ptr), ptr += objSize_TIME_ZONE);
    OrgJodaConvertJDKStringConverter_$24_initWithIOSClass_withNSString_withInt_(e, JavaUtilTimeZone_class_(), @"TIME_ZONE", 23);
    (JreEnum(OrgJodaConvertJDKStringConverter, UUID) = e = objc_constructInstance([OrgJodaConvertJDKStringConverter_$25 class], (void *)ptr), ptr += objSize_UUID);
    OrgJodaConvertJDKStringConverter_$25_initWithIOSClass_withNSString_withInt_(e, JavaUtilUUID_class_(), @"UUID", 24);
    (JreEnum(OrgJodaConvertJDKStringConverter, URL) = e = objc_constructInstance([OrgJodaConvertJDKStringConverter_$26 class], (void *)ptr), ptr += objSize_URL);
    OrgJodaConvertJDKStringConverter_$26_initWithIOSClass_withNSString_withInt_(e, JavaNetURL_class_(), @"URL", 25);
    (JreEnum(OrgJodaConvertJDKStringConverter, URI) = e = objc_constructInstance([OrgJodaConvertJDKStringConverter_$27 class], (void *)ptr), ptr += objSize_URI);
    OrgJodaConvertJDKStringConverter_$27_initWithIOSClass_withNSString_withInt_(e, JavaNetURI_class_(), @"URI", 26);
    (JreEnum(OrgJodaConvertJDKStringConverter, INET_ADDRESS) = e = objc_constructInstance([OrgJodaConvertJDKStringConverter_$28 class], (void *)ptr), ptr += objSize_INET_ADDRESS);
    OrgJodaConvertJDKStringConverter_$28_initWithIOSClass_withNSString_withInt_(e, JavaNetInetAddress_class_(), @"INET_ADDRESS", 27);
    (JreEnum(OrgJodaConvertJDKStringConverter, FILE) = e = objc_constructInstance([OrgJodaConvertJDKStringConverter_$29 class], (void *)ptr), ptr += objSize_FILE);
    OrgJodaConvertJDKStringConverter_$29_initWithIOSClass_withNSString_withInt_(e, JavaIoFile_class_(), @"FILE", 28);
    (JreEnum(OrgJodaConvertJDKStringConverter, DATE) = e = objc_constructInstance([OrgJodaConvertJDKStringConverter_$30 class], (void *)ptr), ptr += objSize_DATE);
    OrgJodaConvertJDKStringConverter_$30_initWithIOSClass_withNSString_withInt_(e, JavaUtilDate_class_(), @"DATE", 29);
    (JreEnum(OrgJodaConvertJDKStringConverter, CALENDAR) = e = objc_constructInstance([OrgJodaConvertJDKStringConverter_$31 class], (void *)ptr), ptr += objSize_CALENDAR);
    OrgJodaConvertJDKStringConverter_$31_initWithIOSClass_withNSString_withInt_(e, JavaUtilCalendar_class_(), @"CALENDAR", 30);
    J2OBJC_SET_INITIALIZED(OrgJodaConvertJDKStringConverter)
  }
}

@end

void OrgJodaConvertJDKStringConverter_initWithIOSClass_withNSString_withInt_(OrgJodaConvertJDKStringConverter *self, IOSClass *type, NSString *__name, jint __ordinal) {
  JavaLangEnum_initWithNSString_withInt_(self, __name, __ordinal);
  JreStrongAssign(&self->type_, type);
}

IOSObjectArray *OrgJodaConvertJDKStringConverter_values() {
  OrgJodaConvertJDKStringConverter_initialize();
  return [IOSObjectArray arrayWithObjects:OrgJodaConvertJDKStringConverter_values_ count:31 type:OrgJodaConvertJDKStringConverter_class_()];
}

OrgJodaConvertJDKStringConverter *OrgJodaConvertJDKStringConverter_valueOfWithNSString_(NSString *name) {
  OrgJodaConvertJDKStringConverter_initialize();
  for (int i = 0; i < 31; i++) {
    OrgJodaConvertJDKStringConverter *e = OrgJodaConvertJDKStringConverter_values_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw create_JavaLangIllegalArgumentException_initWithNSString_(name);
  return nil;
}

OrgJodaConvertJDKStringConverter *OrgJodaConvertJDKStringConverter_fromOrdinal(NSUInteger ordinal) {
  OrgJodaConvertJDKStringConverter_initialize();
  if (ordinal >= 31) {
    return nil;
  }
  return OrgJodaConvertJDKStringConverter_values_[ordinal];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJodaConvertJDKStringConverter)

@implementation OrgJodaConvertJDKStringConverter_$1

- (id)convertFromStringWithIOSClass:(IOSClass *)cls
                       withNSString:(NSString *)str {
  return str;
}

- (void)dealloc {
  JreCheckFinalize(self, [OrgJodaConvertJDKStringConverter_$1 class]);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSObject;", 0x1, 0, 1, -1, 2, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(convertFromStringWithIOSClass:withNSString:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "convertFromString", "LIOSClass;LNSString;", "(Ljava/lang/Class<*>;Ljava/lang/String;)Ljava/lang/Object;", "LOrgJodaConvertJDKStringConverter;" };
  static const J2ObjcClassInfo _OrgJodaConvertJDKStringConverter_$1 = { "", "org.joda.convert", ptrTable, methods, NULL, 7, 0xc018, 1, 0, 3, -1, -1, -1, -1 };
  return &_OrgJodaConvertJDKStringConverter_$1;
}

@end

void OrgJodaConvertJDKStringConverter_$1_initWithIOSClass_withNSString_withInt_(OrgJodaConvertJDKStringConverter_$1 *self, IOSClass *arg$0, NSString *__name, jint __ordinal) {
  OrgJodaConvertJDKStringConverter_initWithIOSClass_withNSString_withInt_(self, arg$0, __name, __ordinal);
}

@implementation OrgJodaConvertJDKStringConverter_$2

- (id)convertFromStringWithIOSClass:(IOSClass *)cls
                       withNSString:(NSString *)str {
  return str;
}

- (void)dealloc {
  JreCheckFinalize(self, [OrgJodaConvertJDKStringConverter_$2 class]);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSObject;", 0x1, 0, 1, -1, 2, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(convertFromStringWithIOSClass:withNSString:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "convertFromString", "LIOSClass;LNSString;", "(Ljava/lang/Class<*>;Ljava/lang/String;)Ljava/lang/Object;", "LOrgJodaConvertJDKStringConverter;" };
  static const J2ObjcClassInfo _OrgJodaConvertJDKStringConverter_$2 = { "", "org.joda.convert", ptrTable, methods, NULL, 7, 0xc018, 1, 0, 3, -1, -1, -1, -1 };
  return &_OrgJodaConvertJDKStringConverter_$2;
}

@end

void OrgJodaConvertJDKStringConverter_$2_initWithIOSClass_withNSString_withInt_(OrgJodaConvertJDKStringConverter_$2 *self, IOSClass *arg$0, NSString *__name, jint __ordinal) {
  OrgJodaConvertJDKStringConverter_initWithIOSClass_withNSString_withInt_(self, arg$0, __name, __ordinal);
}

@implementation OrgJodaConvertJDKStringConverter_$3

- (id)convertFromStringWithIOSClass:(IOSClass *)cls
                       withNSString:(NSString *)str {
  return create_JavaLangStringBuffer_initWithNSString_(str);
}

- (void)dealloc {
  JreCheckFinalize(self, [OrgJodaConvertJDKStringConverter_$3 class]);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSObject;", 0x1, 0, 1, -1, 2, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(convertFromStringWithIOSClass:withNSString:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "convertFromString", "LIOSClass;LNSString;", "(Ljava/lang/Class<*>;Ljava/lang/String;)Ljava/lang/Object;", "LOrgJodaConvertJDKStringConverter;" };
  static const J2ObjcClassInfo _OrgJodaConvertJDKStringConverter_$3 = { "", "org.joda.convert", ptrTable, methods, NULL, 7, 0xc018, 1, 0, 3, -1, -1, -1, -1 };
  return &_OrgJodaConvertJDKStringConverter_$3;
}

@end

void OrgJodaConvertJDKStringConverter_$3_initWithIOSClass_withNSString_withInt_(OrgJodaConvertJDKStringConverter_$3 *self, IOSClass *arg$0, NSString *__name, jint __ordinal) {
  OrgJodaConvertJDKStringConverter_initWithIOSClass_withNSString_withInt_(self, arg$0, __name, __ordinal);
}

@implementation OrgJodaConvertJDKStringConverter_$4

- (id)convertFromStringWithIOSClass:(IOSClass *)cls
                       withNSString:(NSString *)str {
  return create_JavaLangStringBuilder_initWithNSString_(str);
}

- (void)dealloc {
  JreCheckFinalize(self, [OrgJodaConvertJDKStringConverter_$4 class]);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSObject;", 0x1, 0, 1, -1, 2, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(convertFromStringWithIOSClass:withNSString:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "convertFromString", "LIOSClass;LNSString;", "(Ljava/lang/Class<*>;Ljava/lang/String;)Ljava/lang/Object;", "LOrgJodaConvertJDKStringConverter;" };
  static const J2ObjcClassInfo _OrgJodaConvertJDKStringConverter_$4 = { "", "org.joda.convert", ptrTable, methods, NULL, 7, 0xc018, 1, 0, 3, -1, -1, -1, -1 };
  return &_OrgJodaConvertJDKStringConverter_$4;
}

@end

void OrgJodaConvertJDKStringConverter_$4_initWithIOSClass_withNSString_withInt_(OrgJodaConvertJDKStringConverter_$4 *self, IOSClass *arg$0, NSString *__name, jint __ordinal) {
  OrgJodaConvertJDKStringConverter_initWithIOSClass_withNSString_withInt_(self, arg$0, __name, __ordinal);
}

@implementation OrgJodaConvertJDKStringConverter_$5

- (id)convertFromStringWithIOSClass:(IOSClass *)cls
                       withNSString:(NSString *)str {
  return create_JavaLangLong_initWithNSString_(str);
}

- (void)dealloc {
  JreCheckFinalize(self, [OrgJodaConvertJDKStringConverter_$5 class]);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSObject;", 0x1, 0, 1, -1, 2, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(convertFromStringWithIOSClass:withNSString:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "convertFromString", "LIOSClass;LNSString;", "(Ljava/lang/Class<*>;Ljava/lang/String;)Ljava/lang/Object;", "LOrgJodaConvertJDKStringConverter;" };
  static const J2ObjcClassInfo _OrgJodaConvertJDKStringConverter_$5 = { "", "org.joda.convert", ptrTable, methods, NULL, 7, 0xc018, 1, 0, 3, -1, -1, -1, -1 };
  return &_OrgJodaConvertJDKStringConverter_$5;
}

@end

void OrgJodaConvertJDKStringConverter_$5_initWithIOSClass_withNSString_withInt_(OrgJodaConvertJDKStringConverter_$5 *self, IOSClass *arg$0, NSString *__name, jint __ordinal) {
  OrgJodaConvertJDKStringConverter_initWithIOSClass_withNSString_withInt_(self, arg$0, __name, __ordinal);
}

@implementation OrgJodaConvertJDKStringConverter_$6

- (id)convertFromStringWithIOSClass:(IOSClass *)cls
                       withNSString:(NSString *)str {
  return create_JavaLangInteger_initWithNSString_(str);
}

- (void)dealloc {
  JreCheckFinalize(self, [OrgJodaConvertJDKStringConverter_$6 class]);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSObject;", 0x1, 0, 1, -1, 2, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(convertFromStringWithIOSClass:withNSString:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "convertFromString", "LIOSClass;LNSString;", "(Ljava/lang/Class<*>;Ljava/lang/String;)Ljava/lang/Object;", "LOrgJodaConvertJDKStringConverter;" };
  static const J2ObjcClassInfo _OrgJodaConvertJDKStringConverter_$6 = { "", "org.joda.convert", ptrTable, methods, NULL, 7, 0xc018, 1, 0, 3, -1, -1, -1, -1 };
  return &_OrgJodaConvertJDKStringConverter_$6;
}

@end

void OrgJodaConvertJDKStringConverter_$6_initWithIOSClass_withNSString_withInt_(OrgJodaConvertJDKStringConverter_$6 *self, IOSClass *arg$0, NSString *__name, jint __ordinal) {
  OrgJodaConvertJDKStringConverter_initWithIOSClass_withNSString_withInt_(self, arg$0, __name, __ordinal);
}

@implementation OrgJodaConvertJDKStringConverter_$7

- (id)convertFromStringWithIOSClass:(IOSClass *)cls
                       withNSString:(NSString *)str {
  return create_JavaLangShort_initWithNSString_(str);
}

- (void)dealloc {
  JreCheckFinalize(self, [OrgJodaConvertJDKStringConverter_$7 class]);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSObject;", 0x1, 0, 1, -1, 2, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(convertFromStringWithIOSClass:withNSString:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "convertFromString", "LIOSClass;LNSString;", "(Ljava/lang/Class<*>;Ljava/lang/String;)Ljava/lang/Object;", "LOrgJodaConvertJDKStringConverter;" };
  static const J2ObjcClassInfo _OrgJodaConvertJDKStringConverter_$7 = { "", "org.joda.convert", ptrTable, methods, NULL, 7, 0xc018, 1, 0, 3, -1, -1, -1, -1 };
  return &_OrgJodaConvertJDKStringConverter_$7;
}

@end

void OrgJodaConvertJDKStringConverter_$7_initWithIOSClass_withNSString_withInt_(OrgJodaConvertJDKStringConverter_$7 *self, IOSClass *arg$0, NSString *__name, jint __ordinal) {
  OrgJodaConvertJDKStringConverter_initWithIOSClass_withNSString_withInt_(self, arg$0, __name, __ordinal);
}

@implementation OrgJodaConvertJDKStringConverter_$8

- (id)convertFromStringWithIOSClass:(IOSClass *)cls
                       withNSString:(NSString *)str {
  return create_JavaLangByte_initWithNSString_(str);
}

- (void)dealloc {
  JreCheckFinalize(self, [OrgJodaConvertJDKStringConverter_$8 class]);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSObject;", 0x1, 0, 1, -1, 2, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(convertFromStringWithIOSClass:withNSString:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "convertFromString", "LIOSClass;LNSString;", "(Ljava/lang/Class<*>;Ljava/lang/String;)Ljava/lang/Object;", "LOrgJodaConvertJDKStringConverter;" };
  static const J2ObjcClassInfo _OrgJodaConvertJDKStringConverter_$8 = { "", "org.joda.convert", ptrTable, methods, NULL, 7, 0xc018, 1, 0, 3, -1, -1, -1, -1 };
  return &_OrgJodaConvertJDKStringConverter_$8;
}

@end

void OrgJodaConvertJDKStringConverter_$8_initWithIOSClass_withNSString_withInt_(OrgJodaConvertJDKStringConverter_$8 *self, IOSClass *arg$0, NSString *__name, jint __ordinal) {
  OrgJodaConvertJDKStringConverter_initWithIOSClass_withNSString_withInt_(self, arg$0, __name, __ordinal);
}

@implementation OrgJodaConvertJDKStringConverter_$9

- (NSString *)convertToStringWithId:(id)object {
  return [((ComGoogleCommonIoBaseEncoding *) nil_chk(ComGoogleCommonIoBaseEncoding_base64())) encodeWithByteArray:(IOSByteArray *) cast_chk(object, [IOSByteArray class])];
}

- (id)convertFromStringWithIOSClass:(IOSClass *)cls
                       withNSString:(NSString *)str {
  return [((ComGoogleCommonIoBaseEncoding *) nil_chk(ComGoogleCommonIoBaseEncoding_base64())) decodeWithJavaLangCharSequence:str];
}

- (void)dealloc {
  JreCheckFinalize(self, [OrgJodaConvertJDKStringConverter_$9 class]);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSString;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 2, 3, -1, 4, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(convertToStringWithId:);
  methods[1].selector = @selector(convertFromStringWithIOSClass:withNSString:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "convertToString", "LNSObject;", "convertFromString", "LIOSClass;LNSString;", "(Ljava/lang/Class<*>;Ljava/lang/String;)Ljava/lang/Object;", "LOrgJodaConvertJDKStringConverter;" };
  static const J2ObjcClassInfo _OrgJodaConvertJDKStringConverter_$9 = { "", "org.joda.convert", ptrTable, methods, NULL, 7, 0xc018, 2, 0, 5, -1, -1, -1, -1 };
  return &_OrgJodaConvertJDKStringConverter_$9;
}

@end

void OrgJodaConvertJDKStringConverter_$9_initWithIOSClass_withNSString_withInt_(OrgJodaConvertJDKStringConverter_$9 *self, IOSClass *arg$0, NSString *__name, jint __ordinal) {
  OrgJodaConvertJDKStringConverter_initWithIOSClass_withNSString_withInt_(self, arg$0, __name, __ordinal);
}

@implementation OrgJodaConvertJDKStringConverter_$10

- (id)convertFromStringWithIOSClass:(IOSClass *)cls
                       withNSString:(NSString *)str {
  if (((jint) [((NSString *) nil_chk(str)) length]) != 1) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"Character value must be a string length 1");
  }
  return create_JavaLangCharacter_initWithChar_([str charAtWithInt:0]);
}

- (void)dealloc {
  JreCheckFinalize(self, [OrgJodaConvertJDKStringConverter_$10 class]);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSObject;", 0x1, 0, 1, -1, 2, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(convertFromStringWithIOSClass:withNSString:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "convertFromString", "LIOSClass;LNSString;", "(Ljava/lang/Class<*>;Ljava/lang/String;)Ljava/lang/Object;", "LOrgJodaConvertJDKStringConverter;" };
  static const J2ObjcClassInfo _OrgJodaConvertJDKStringConverter_$10 = { "", "org.joda.convert", ptrTable, methods, NULL, 7, 0xc018, 1, 0, 3, -1, -1, -1, -1 };
  return &_OrgJodaConvertJDKStringConverter_$10;
}

@end

void OrgJodaConvertJDKStringConverter_$10_initWithIOSClass_withNSString_withInt_(OrgJodaConvertJDKStringConverter_$10 *self, IOSClass *arg$0, NSString *__name, jint __ordinal) {
  OrgJodaConvertJDKStringConverter_initWithIOSClass_withNSString_withInt_(self, arg$0, __name, __ordinal);
}

@implementation OrgJodaConvertJDKStringConverter_$11

- (NSString *)convertToStringWithId:(id)object {
  return [NSString stringWithCharacters:(IOSCharArray *) cast_chk(object, [IOSCharArray class])];
}

- (id)convertFromStringWithIOSClass:(IOSClass *)cls
                       withNSString:(NSString *)str {
  return [((NSString *) nil_chk(str)) toCharArray];
}

- (void)dealloc {
  JreCheckFinalize(self, [OrgJodaConvertJDKStringConverter_$11 class]);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSString;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 2, 3, -1, 4, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(convertToStringWithId:);
  methods[1].selector = @selector(convertFromStringWithIOSClass:withNSString:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "convertToString", "LNSObject;", "convertFromString", "LIOSClass;LNSString;", "(Ljava/lang/Class<*>;Ljava/lang/String;)Ljava/lang/Object;", "LOrgJodaConvertJDKStringConverter;" };
  static const J2ObjcClassInfo _OrgJodaConvertJDKStringConverter_$11 = { "", "org.joda.convert", ptrTable, methods, NULL, 7, 0xc018, 2, 0, 5, -1, -1, -1, -1 };
  return &_OrgJodaConvertJDKStringConverter_$11;
}

@end

void OrgJodaConvertJDKStringConverter_$11_initWithIOSClass_withNSString_withInt_(OrgJodaConvertJDKStringConverter_$11 *self, IOSClass *arg$0, NSString *__name, jint __ordinal) {
  OrgJodaConvertJDKStringConverter_initWithIOSClass_withNSString_withInt_(self, arg$0, __name, __ordinal);
}

@implementation OrgJodaConvertJDKStringConverter_$12

- (id)convertFromStringWithIOSClass:(IOSClass *)cls
                       withNSString:(NSString *)str {
  if ([@"true" equalsIgnoreCase:str]) {
    return JreLoadStatic(JavaLangBoolean, TRUE);
  }
  if ([@"false" equalsIgnoreCase:str]) {
    return JreLoadStatic(JavaLangBoolean, FALSE);
  }
  @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"Boolean value must be 'true' or 'false', case insensitive");
}

- (void)dealloc {
  JreCheckFinalize(self, [OrgJodaConvertJDKStringConverter_$12 class]);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSObject;", 0x1, 0, 1, -1, 2, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(convertFromStringWithIOSClass:withNSString:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "convertFromString", "LIOSClass;LNSString;", "(Ljava/lang/Class<*>;Ljava/lang/String;)Ljava/lang/Object;", "LOrgJodaConvertJDKStringConverter;" };
  static const J2ObjcClassInfo _OrgJodaConvertJDKStringConverter_$12 = { "", "org.joda.convert", ptrTable, methods, NULL, 7, 0xc018, 1, 0, 3, -1, -1, -1, -1 };
  return &_OrgJodaConvertJDKStringConverter_$12;
}

@end

void OrgJodaConvertJDKStringConverter_$12_initWithIOSClass_withNSString_withInt_(OrgJodaConvertJDKStringConverter_$12 *self, IOSClass *arg$0, NSString *__name, jint __ordinal) {
  OrgJodaConvertJDKStringConverter_initWithIOSClass_withNSString_withInt_(self, arg$0, __name, __ordinal);
}

@implementation OrgJodaConvertJDKStringConverter_$13

- (id)convertFromStringWithIOSClass:(IOSClass *)cls
                       withNSString:(NSString *)str {
  return create_JavaLangDouble_initWithNSString_(str);
}

- (void)dealloc {
  JreCheckFinalize(self, [OrgJodaConvertJDKStringConverter_$13 class]);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSObject;", 0x1, 0, 1, -1, 2, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(convertFromStringWithIOSClass:withNSString:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "convertFromString", "LIOSClass;LNSString;", "(Ljava/lang/Class<*>;Ljava/lang/String;)Ljava/lang/Object;", "LOrgJodaConvertJDKStringConverter;" };
  static const J2ObjcClassInfo _OrgJodaConvertJDKStringConverter_$13 = { "", "org.joda.convert", ptrTable, methods, NULL, 7, 0xc018, 1, 0, 3, -1, -1, -1, -1 };
  return &_OrgJodaConvertJDKStringConverter_$13;
}

@end

void OrgJodaConvertJDKStringConverter_$13_initWithIOSClass_withNSString_withInt_(OrgJodaConvertJDKStringConverter_$13 *self, IOSClass *arg$0, NSString *__name, jint __ordinal) {
  OrgJodaConvertJDKStringConverter_initWithIOSClass_withNSString_withInt_(self, arg$0, __name, __ordinal);
}

@implementation OrgJodaConvertJDKStringConverter_$14

- (id)convertFromStringWithIOSClass:(IOSClass *)cls
                       withNSString:(NSString *)str {
  return create_JavaLangFloat_initWithNSString_(str);
}

- (void)dealloc {
  JreCheckFinalize(self, [OrgJodaConvertJDKStringConverter_$14 class]);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSObject;", 0x1, 0, 1, -1, 2, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(convertFromStringWithIOSClass:withNSString:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "convertFromString", "LIOSClass;LNSString;", "(Ljava/lang/Class<*>;Ljava/lang/String;)Ljava/lang/Object;", "LOrgJodaConvertJDKStringConverter;" };
  static const J2ObjcClassInfo _OrgJodaConvertJDKStringConverter_$14 = { "", "org.joda.convert", ptrTable, methods, NULL, 7, 0xc018, 1, 0, 3, -1, -1, -1, -1 };
  return &_OrgJodaConvertJDKStringConverter_$14;
}

@end

void OrgJodaConvertJDKStringConverter_$14_initWithIOSClass_withNSString_withInt_(OrgJodaConvertJDKStringConverter_$14 *self, IOSClass *arg$0, NSString *__name, jint __ordinal) {
  OrgJodaConvertJDKStringConverter_initWithIOSClass_withNSString_withInt_(self, arg$0, __name, __ordinal);
}

@implementation OrgJodaConvertJDKStringConverter_$15

- (id)convertFromStringWithIOSClass:(IOSClass *)cls
                       withNSString:(NSString *)str {
  return create_JavaMathBigInteger_initWithNSString_(str);
}

- (void)dealloc {
  JreCheckFinalize(self, [OrgJodaConvertJDKStringConverter_$15 class]);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSObject;", 0x1, 0, 1, -1, 2, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(convertFromStringWithIOSClass:withNSString:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "convertFromString", "LIOSClass;LNSString;", "(Ljava/lang/Class<*>;Ljava/lang/String;)Ljava/lang/Object;", "LOrgJodaConvertJDKStringConverter;" };
  static const J2ObjcClassInfo _OrgJodaConvertJDKStringConverter_$15 = { "", "org.joda.convert", ptrTable, methods, NULL, 7, 0xc018, 1, 0, 3, -1, -1, -1, -1 };
  return &_OrgJodaConvertJDKStringConverter_$15;
}

@end

void OrgJodaConvertJDKStringConverter_$15_initWithIOSClass_withNSString_withInt_(OrgJodaConvertJDKStringConverter_$15 *self, IOSClass *arg$0, NSString *__name, jint __ordinal) {
  OrgJodaConvertJDKStringConverter_initWithIOSClass_withNSString_withInt_(self, arg$0, __name, __ordinal);
}

@implementation OrgJodaConvertJDKStringConverter_$16

- (id)convertFromStringWithIOSClass:(IOSClass *)cls
                       withNSString:(NSString *)str {
  return create_JavaMathBigDecimal_initWithNSString_(str);
}

- (void)dealloc {
  JreCheckFinalize(self, [OrgJodaConvertJDKStringConverter_$16 class]);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSObject;", 0x1, 0, 1, -1, 2, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(convertFromStringWithIOSClass:withNSString:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "convertFromString", "LIOSClass;LNSString;", "(Ljava/lang/Class<*>;Ljava/lang/String;)Ljava/lang/Object;", "LOrgJodaConvertJDKStringConverter;" };
  static const J2ObjcClassInfo _OrgJodaConvertJDKStringConverter_$16 = { "", "org.joda.convert", ptrTable, methods, NULL, 7, 0xc018, 1, 0, 3, -1, -1, -1, -1 };
  return &_OrgJodaConvertJDKStringConverter_$16;
}

@end

void OrgJodaConvertJDKStringConverter_$16_initWithIOSClass_withNSString_withInt_(OrgJodaConvertJDKStringConverter_$16 *self, IOSClass *arg$0, NSString *__name, jint __ordinal) {
  OrgJodaConvertJDKStringConverter_initWithIOSClass_withNSString_withInt_(self, arg$0, __name, __ordinal);
}

@implementation OrgJodaConvertJDKStringConverter_$17

- (id)convertFromStringWithIOSClass:(IOSClass *)cls
                       withNSString:(NSString *)str {
  jlong val = JavaLangLong_parseLongWithNSString_(str);
  return create_JavaUtilConcurrentAtomicAtomicLong_initWithLong_(val);
}

- (void)dealloc {
  JreCheckFinalize(self, [OrgJodaConvertJDKStringConverter_$17 class]);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSObject;", 0x1, 0, 1, -1, 2, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(convertFromStringWithIOSClass:withNSString:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "convertFromString", "LIOSClass;LNSString;", "(Ljava/lang/Class<*>;Ljava/lang/String;)Ljava/lang/Object;", "LOrgJodaConvertJDKStringConverter;" };
  static const J2ObjcClassInfo _OrgJodaConvertJDKStringConverter_$17 = { "", "org.joda.convert", ptrTable, methods, NULL, 7, 0xc018, 1, 0, 3, -1, -1, -1, -1 };
  return &_OrgJodaConvertJDKStringConverter_$17;
}

@end

void OrgJodaConvertJDKStringConverter_$17_initWithIOSClass_withNSString_withInt_(OrgJodaConvertJDKStringConverter_$17 *self, IOSClass *arg$0, NSString *__name, jint __ordinal) {
  OrgJodaConvertJDKStringConverter_initWithIOSClass_withNSString_withInt_(self, arg$0, __name, __ordinal);
}

@implementation OrgJodaConvertJDKStringConverter_$18

- (id)convertFromStringWithIOSClass:(IOSClass *)cls
                       withNSString:(NSString *)str {
  jint val = JavaLangInteger_parseIntWithNSString_(str);
  return create_JavaUtilConcurrentAtomicAtomicInteger_initWithInt_(val);
}

- (void)dealloc {
  JreCheckFinalize(self, [OrgJodaConvertJDKStringConverter_$18 class]);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSObject;", 0x1, 0, 1, -1, 2, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(convertFromStringWithIOSClass:withNSString:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "convertFromString", "LIOSClass;LNSString;", "(Ljava/lang/Class<*>;Ljava/lang/String;)Ljava/lang/Object;", "LOrgJodaConvertJDKStringConverter;" };
  static const J2ObjcClassInfo _OrgJodaConvertJDKStringConverter_$18 = { "", "org.joda.convert", ptrTable, methods, NULL, 7, 0xc018, 1, 0, 3, -1, -1, -1, -1 };
  return &_OrgJodaConvertJDKStringConverter_$18;
}

@end

void OrgJodaConvertJDKStringConverter_$18_initWithIOSClass_withNSString_withInt_(OrgJodaConvertJDKStringConverter_$18 *self, IOSClass *arg$0, NSString *__name, jint __ordinal) {
  OrgJodaConvertJDKStringConverter_initWithIOSClass_withNSString_withInt_(self, arg$0, __name, __ordinal);
}

@implementation OrgJodaConvertJDKStringConverter_$19

- (id)convertFromStringWithIOSClass:(IOSClass *)cls
                       withNSString:(NSString *)str {
  if ([@"true" equalsIgnoreCase:str]) {
    return create_JavaUtilConcurrentAtomicAtomicBoolean_initWithBoolean_(true);
  }
  if ([@"false" equalsIgnoreCase:str]) {
    return create_JavaUtilConcurrentAtomicAtomicBoolean_initWithBoolean_(false);
  }
  @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"Boolean value must be 'true' or 'false', case insensitive");
}

- (void)dealloc {
  JreCheckFinalize(self, [OrgJodaConvertJDKStringConverter_$19 class]);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSObject;", 0x1, 0, 1, -1, 2, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(convertFromStringWithIOSClass:withNSString:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "convertFromString", "LIOSClass;LNSString;", "(Ljava/lang/Class<*>;Ljava/lang/String;)Ljava/lang/Object;", "LOrgJodaConvertJDKStringConverter;" };
  static const J2ObjcClassInfo _OrgJodaConvertJDKStringConverter_$19 = { "", "org.joda.convert", ptrTable, methods, NULL, 7, 0xc018, 1, 0, 3, -1, -1, -1, -1 };
  return &_OrgJodaConvertJDKStringConverter_$19;
}

@end

void OrgJodaConvertJDKStringConverter_$19_initWithIOSClass_withNSString_withInt_(OrgJodaConvertJDKStringConverter_$19 *self, IOSClass *arg$0, NSString *__name, jint __ordinal) {
  OrgJodaConvertJDKStringConverter_initWithIOSClass_withNSString_withInt_(self, arg$0, __name, __ordinal);
}

@implementation OrgJodaConvertJDKStringConverter_$20

- (id)convertFromStringWithIOSClass:(IOSClass *)cls
                       withNSString:(NSString *)str {
  IOSObjectArray *split = [((NSString *) nil_chk(str)) split:@"_" limit:3];
  switch (((IOSObjectArray *) nil_chk(split))->size_) {
    case 1:
    return create_JavaUtilLocale_initWithNSString_(IOSObjectArray_Get(split, 0));
    case 2:
    return create_JavaUtilLocale_initWithNSString_withNSString_(IOSObjectArray_Get(split, 0), IOSObjectArray_Get(split, 1));
    case 3:
    return create_JavaUtilLocale_initWithNSString_withNSString_withNSString_(IOSObjectArray_Get(split, 0), IOSObjectArray_Get(split, 1), IOSObjectArray_Get(split, 2));
  }
  @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$", @"Unable to parse Locale: ", str));
}

- (void)dealloc {
  JreCheckFinalize(self, [OrgJodaConvertJDKStringConverter_$20 class]);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSObject;", 0x1, 0, 1, -1, 2, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(convertFromStringWithIOSClass:withNSString:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "convertFromString", "LIOSClass;LNSString;", "(Ljava/lang/Class<*>;Ljava/lang/String;)Ljava/lang/Object;", "LOrgJodaConvertJDKStringConverter;" };
  static const J2ObjcClassInfo _OrgJodaConvertJDKStringConverter_$20 = { "", "org.joda.convert", ptrTable, methods, NULL, 7, 0xc018, 1, 0, 3, -1, -1, -1, -1 };
  return &_OrgJodaConvertJDKStringConverter_$20;
}

@end

void OrgJodaConvertJDKStringConverter_$20_initWithIOSClass_withNSString_withInt_(OrgJodaConvertJDKStringConverter_$20 *self, IOSClass *arg$0, NSString *__name, jint __ordinal) {
  OrgJodaConvertJDKStringConverter_initWithIOSClass_withNSString_withInt_(self, arg$0, __name, __ordinal);
}

@implementation OrgJodaConvertJDKStringConverter_$21

- (NSString *)convertToStringWithId:(id)object {
  return [((IOSClass *) nil_chk(((IOSClass *) cast_chk(object, [IOSClass class])))) getName];
}

- (id)convertFromStringWithIOSClass:(IOSClass *)cls
                       withNSString:(NSString *)str {
  @try {
    return [((OrgJodaConvertRenameHandler *) nil_chk(JreLoadStatic(OrgJodaConvertRenameHandler, INSTANCE))) lookupTypeWithNSString:str];
  }
  @catch (JavaLangClassNotFoundException *ex) {
    @throw create_JavaLangRuntimeException_initWithNSString_withNSException_(JreStrcat("$$", @"Unable to create type: ", str), ex);
  }
}

- (void)dealloc {
  JreCheckFinalize(self, [OrgJodaConvertJDKStringConverter_$21 class]);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSString;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 2, 3, -1, 4, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(convertToStringWithId:);
  methods[1].selector = @selector(convertFromStringWithIOSClass:withNSString:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "convertToString", "LNSObject;", "convertFromString", "LIOSClass;LNSString;", "(Ljava/lang/Class<*>;Ljava/lang/String;)Ljava/lang/Object;", "LOrgJodaConvertJDKStringConverter;" };
  static const J2ObjcClassInfo _OrgJodaConvertJDKStringConverter_$21 = { "", "org.joda.convert", ptrTable, methods, NULL, 7, 0xc018, 2, 0, 5, -1, -1, -1, -1 };
  return &_OrgJodaConvertJDKStringConverter_$21;
}

@end

void OrgJodaConvertJDKStringConverter_$21_initWithIOSClass_withNSString_withInt_(OrgJodaConvertJDKStringConverter_$21 *self, IOSClass *arg$0, NSString *__name, jint __ordinal) {
  OrgJodaConvertJDKStringConverter_initWithIOSClass_withNSString_withInt_(self, arg$0, __name, __ordinal);
}

@implementation OrgJodaConvertJDKStringConverter_$22

- (NSString *)convertToStringWithId:(id)object {
  return [((JavaLangPackage *) nil_chk(((JavaLangPackage *) cast_chk(object, [JavaLangPackage class])))) getName];
}

- (id)convertFromStringWithIOSClass:(IOSClass *)cls
                       withNSString:(NSString *)str {
  return JavaLangPackage_getPackageWithNSString_(str);
}

- (void)dealloc {
  JreCheckFinalize(self, [OrgJodaConvertJDKStringConverter_$22 class]);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSString;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 2, 3, -1, 4, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(convertToStringWithId:);
  methods[1].selector = @selector(convertFromStringWithIOSClass:withNSString:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "convertToString", "LNSObject;", "convertFromString", "LIOSClass;LNSString;", "(Ljava/lang/Class<*>;Ljava/lang/String;)Ljava/lang/Object;", "LOrgJodaConvertJDKStringConverter;" };
  static const J2ObjcClassInfo _OrgJodaConvertJDKStringConverter_$22 = { "", "org.joda.convert", ptrTable, methods, NULL, 7, 0xc018, 2, 0, 5, -1, -1, -1, -1 };
  return &_OrgJodaConvertJDKStringConverter_$22;
}

@end

void OrgJodaConvertJDKStringConverter_$22_initWithIOSClass_withNSString_withInt_(OrgJodaConvertJDKStringConverter_$22 *self, IOSClass *arg$0, NSString *__name, jint __ordinal) {
  OrgJodaConvertJDKStringConverter_initWithIOSClass_withNSString_withInt_(self, arg$0, __name, __ordinal);
}

@implementation OrgJodaConvertJDKStringConverter_$23

- (id)convertFromStringWithIOSClass:(IOSClass *)cls
                       withNSString:(NSString *)str {
  return JavaUtilCurrency_getInstanceWithNSString_(str);
}

- (void)dealloc {
  JreCheckFinalize(self, [OrgJodaConvertJDKStringConverter_$23 class]);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSObject;", 0x1, 0, 1, -1, 2, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(convertFromStringWithIOSClass:withNSString:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "convertFromString", "LIOSClass;LNSString;", "(Ljava/lang/Class<*>;Ljava/lang/String;)Ljava/lang/Object;", "LOrgJodaConvertJDKStringConverter;" };
  static const J2ObjcClassInfo _OrgJodaConvertJDKStringConverter_$23 = { "", "org.joda.convert", ptrTable, methods, NULL, 7, 0xc018, 1, 0, 3, -1, -1, -1, -1 };
  return &_OrgJodaConvertJDKStringConverter_$23;
}

@end

void OrgJodaConvertJDKStringConverter_$23_initWithIOSClass_withNSString_withInt_(OrgJodaConvertJDKStringConverter_$23 *self, IOSClass *arg$0, NSString *__name, jint __ordinal) {
  OrgJodaConvertJDKStringConverter_initWithIOSClass_withNSString_withInt_(self, arg$0, __name, __ordinal);
}

@implementation OrgJodaConvertJDKStringConverter_$24

- (NSString *)convertToStringWithId:(id)object {
  return [((JavaUtilTimeZone *) nil_chk(((JavaUtilTimeZone *) cast_chk(object, [JavaUtilTimeZone class])))) getID];
}

- (id)convertFromStringWithIOSClass:(IOSClass *)cls
                       withNSString:(NSString *)str {
  return JavaUtilTimeZone_getTimeZoneWithNSString_(str);
}

- (void)dealloc {
  JreCheckFinalize(self, [OrgJodaConvertJDKStringConverter_$24 class]);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSString;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 2, 3, -1, 4, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(convertToStringWithId:);
  methods[1].selector = @selector(convertFromStringWithIOSClass:withNSString:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "convertToString", "LNSObject;", "convertFromString", "LIOSClass;LNSString;", "(Ljava/lang/Class<*>;Ljava/lang/String;)Ljava/lang/Object;", "LOrgJodaConvertJDKStringConverter;" };
  static const J2ObjcClassInfo _OrgJodaConvertJDKStringConverter_$24 = { "", "org.joda.convert", ptrTable, methods, NULL, 7, 0xc018, 2, 0, 5, -1, -1, -1, -1 };
  return &_OrgJodaConvertJDKStringConverter_$24;
}

@end

void OrgJodaConvertJDKStringConverter_$24_initWithIOSClass_withNSString_withInt_(OrgJodaConvertJDKStringConverter_$24 *self, IOSClass *arg$0, NSString *__name, jint __ordinal) {
  OrgJodaConvertJDKStringConverter_initWithIOSClass_withNSString_withInt_(self, arg$0, __name, __ordinal);
}

@implementation OrgJodaConvertJDKStringConverter_$25

- (id)convertFromStringWithIOSClass:(IOSClass *)cls
                       withNSString:(NSString *)str {
  return JavaUtilUUID_fromStringWithNSString_(str);
}

- (void)dealloc {
  JreCheckFinalize(self, [OrgJodaConvertJDKStringConverter_$25 class]);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSObject;", 0x1, 0, 1, -1, 2, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(convertFromStringWithIOSClass:withNSString:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "convertFromString", "LIOSClass;LNSString;", "(Ljava/lang/Class<*>;Ljava/lang/String;)Ljava/lang/Object;", "LOrgJodaConvertJDKStringConverter;" };
  static const J2ObjcClassInfo _OrgJodaConvertJDKStringConverter_$25 = { "", "org.joda.convert", ptrTable, methods, NULL, 7, 0xc018, 1, 0, 3, -1, -1, -1, -1 };
  return &_OrgJodaConvertJDKStringConverter_$25;
}

@end

void OrgJodaConvertJDKStringConverter_$25_initWithIOSClass_withNSString_withInt_(OrgJodaConvertJDKStringConverter_$25 *self, IOSClass *arg$0, NSString *__name, jint __ordinal) {
  OrgJodaConvertJDKStringConverter_initWithIOSClass_withNSString_withInt_(self, arg$0, __name, __ordinal);
}

@implementation OrgJodaConvertJDKStringConverter_$26

- (id)convertFromStringWithIOSClass:(IOSClass *)cls
                       withNSString:(NSString *)str {
  @try {
    return create_JavaNetURL_initWithNSString_(str);
  }
  @catch (JavaNetMalformedURLException *ex) {
    @throw create_JavaLangRuntimeException_initWithNSString_withNSException_([((JavaNetMalformedURLException *) nil_chk(ex)) getMessage], ex);
  }
}

- (void)dealloc {
  JreCheckFinalize(self, [OrgJodaConvertJDKStringConverter_$26 class]);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSObject;", 0x1, 0, 1, -1, 2, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(convertFromStringWithIOSClass:withNSString:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "convertFromString", "LIOSClass;LNSString;", "(Ljava/lang/Class<*>;Ljava/lang/String;)Ljava/lang/Object;", "LOrgJodaConvertJDKStringConverter;" };
  static const J2ObjcClassInfo _OrgJodaConvertJDKStringConverter_$26 = { "", "org.joda.convert", ptrTable, methods, NULL, 7, 0xc018, 1, 0, 3, -1, -1, -1, -1 };
  return &_OrgJodaConvertJDKStringConverter_$26;
}

@end

void OrgJodaConvertJDKStringConverter_$26_initWithIOSClass_withNSString_withInt_(OrgJodaConvertJDKStringConverter_$26 *self, IOSClass *arg$0, NSString *__name, jint __ordinal) {
  OrgJodaConvertJDKStringConverter_initWithIOSClass_withNSString_withInt_(self, arg$0, __name, __ordinal);
}

@implementation OrgJodaConvertJDKStringConverter_$27

- (id)convertFromStringWithIOSClass:(IOSClass *)cls
                       withNSString:(NSString *)str {
  return JavaNetURI_createWithNSString_(str);
}

- (void)dealloc {
  JreCheckFinalize(self, [OrgJodaConvertJDKStringConverter_$27 class]);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSObject;", 0x1, 0, 1, -1, 2, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(convertFromStringWithIOSClass:withNSString:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "convertFromString", "LIOSClass;LNSString;", "(Ljava/lang/Class<*>;Ljava/lang/String;)Ljava/lang/Object;", "LOrgJodaConvertJDKStringConverter;" };
  static const J2ObjcClassInfo _OrgJodaConvertJDKStringConverter_$27 = { "", "org.joda.convert", ptrTable, methods, NULL, 7, 0xc018, 1, 0, 3, -1, -1, -1, -1 };
  return &_OrgJodaConvertJDKStringConverter_$27;
}

@end

void OrgJodaConvertJDKStringConverter_$27_initWithIOSClass_withNSString_withInt_(OrgJodaConvertJDKStringConverter_$27 *self, IOSClass *arg$0, NSString *__name, jint __ordinal) {
  OrgJodaConvertJDKStringConverter_initWithIOSClass_withNSString_withInt_(self, arg$0, __name, __ordinal);
}

@implementation OrgJodaConvertJDKStringConverter_$28

- (NSString *)convertToStringWithId:(id)object {
  return [((JavaNetInetAddress *) nil_chk(((JavaNetInetAddress *) cast_chk(object, [JavaNetInetAddress class])))) getHostAddress];
}

- (id)convertFromStringWithIOSClass:(IOSClass *)cls
                       withNSString:(NSString *)str {
  @try {
    return JavaNetInetAddress_getByNameWithNSString_(str);
  }
  @catch (JavaNetUnknownHostException *ex) {
    @throw create_JavaLangRuntimeException_initWithNSException_(ex);
  }
}

- (void)dealloc {
  JreCheckFinalize(self, [OrgJodaConvertJDKStringConverter_$28 class]);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSString;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 2, 3, -1, 4, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(convertToStringWithId:);
  methods[1].selector = @selector(convertFromStringWithIOSClass:withNSString:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "convertToString", "LNSObject;", "convertFromString", "LIOSClass;LNSString;", "(Ljava/lang/Class<*>;Ljava/lang/String;)Ljava/lang/Object;", "LOrgJodaConvertJDKStringConverter;" };
  static const J2ObjcClassInfo _OrgJodaConvertJDKStringConverter_$28 = { "", "org.joda.convert", ptrTable, methods, NULL, 7, 0xc018, 2, 0, 5, -1, -1, -1, -1 };
  return &_OrgJodaConvertJDKStringConverter_$28;
}

@end

void OrgJodaConvertJDKStringConverter_$28_initWithIOSClass_withNSString_withInt_(OrgJodaConvertJDKStringConverter_$28 *self, IOSClass *arg$0, NSString *__name, jint __ordinal) {
  OrgJodaConvertJDKStringConverter_initWithIOSClass_withNSString_withInt_(self, arg$0, __name, __ordinal);
}

@implementation OrgJodaConvertJDKStringConverter_$29

- (id)convertFromStringWithIOSClass:(IOSClass *)cls
                       withNSString:(NSString *)str {
  return create_JavaIoFile_initWithNSString_(str);
}

- (void)dealloc {
  JreCheckFinalize(self, [OrgJodaConvertJDKStringConverter_$29 class]);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSObject;", 0x1, 0, 1, -1, 2, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(convertFromStringWithIOSClass:withNSString:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "convertFromString", "LIOSClass;LNSString;", "(Ljava/lang/Class<*>;Ljava/lang/String;)Ljava/lang/Object;", "LOrgJodaConvertJDKStringConverter;" };
  static const J2ObjcClassInfo _OrgJodaConvertJDKStringConverter_$29 = { "", "org.joda.convert", ptrTable, methods, NULL, 7, 0xc018, 1, 0, 3, -1, -1, -1, -1 };
  return &_OrgJodaConvertJDKStringConverter_$29;
}

@end

void OrgJodaConvertJDKStringConverter_$29_initWithIOSClass_withNSString_withInt_(OrgJodaConvertJDKStringConverter_$29 *self, IOSClass *arg$0, NSString *__name, jint __ordinal) {
  OrgJodaConvertJDKStringConverter_initWithIOSClass_withNSString_withInt_(self, arg$0, __name, __ordinal);
}

@implementation OrgJodaConvertJDKStringConverter_$30

- (NSString *)convertToStringWithId:(id)object {
  JavaTextSimpleDateFormat *f = create_JavaTextSimpleDateFormat_initWithNSString_(@"yyyy-MM-dd'T'HH:mm:ss.SSSZ");
  NSString *str = [f formatWithId:object];
  return JreStrcat("$C$", [((NSString *) nil_chk(str)) substring:0 endIndex:26], ':', [str substring:26]);
}

- (id)convertFromStringWithIOSClass:(IOSClass *)cls
                       withNSString:(NSString *)str {
  if (((jint) [((NSString *) nil_chk(str)) length]) != 29) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$", @"Unable to parse date: ", str));
  }
  str = JreStrcat("$$", [str substring:0 endIndex:26], [str substring:27]);
  JavaTextSimpleDateFormat *f = create_JavaTextSimpleDateFormat_initWithNSString_(@"yyyy-MM-dd'T'HH:mm:ss.SSSZ");
  @try {
    return [f parseObjectWithNSString:str];
  }
  @catch (JavaTextParseException *ex) {
    @throw create_JavaLangRuntimeException_initWithNSException_(ex);
  }
}

- (void)dealloc {
  JreCheckFinalize(self, [OrgJodaConvertJDKStringConverter_$30 class]);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSString;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 2, 3, -1, 4, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(convertToStringWithId:);
  methods[1].selector = @selector(convertFromStringWithIOSClass:withNSString:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "convertToString", "LNSObject;", "convertFromString", "LIOSClass;LNSString;", "(Ljava/lang/Class<*>;Ljava/lang/String;)Ljava/lang/Object;", "LOrgJodaConvertJDKStringConverter;" };
  static const J2ObjcClassInfo _OrgJodaConvertJDKStringConverter_$30 = { "", "org.joda.convert", ptrTable, methods, NULL, 7, 0xc018, 2, 0, 5, -1, -1, -1, -1 };
  return &_OrgJodaConvertJDKStringConverter_$30;
}

@end

void OrgJodaConvertJDKStringConverter_$30_initWithIOSClass_withNSString_withInt_(OrgJodaConvertJDKStringConverter_$30 *self, IOSClass *arg$0, NSString *__name, jint __ordinal) {
  OrgJodaConvertJDKStringConverter_initWithIOSClass_withNSString_withInt_(self, arg$0, __name, __ordinal);
}

@implementation OrgJodaConvertJDKStringConverter_$31

- (NSString *)convertToStringWithId:(id)object {
  if ([object isKindOfClass:[JavaUtilGregorianCalendar class]] == false) {
    @throw create_JavaLangRuntimeException_initWithNSString_(@"Unable to convert calendar as it is not a GregorianCalendar");
  }
  JavaUtilGregorianCalendar *cal = (JavaUtilGregorianCalendar *) cast_chk(object, [JavaUtilGregorianCalendar class]);
  JavaTextSimpleDateFormat *f = create_JavaTextSimpleDateFormat_initWithNSString_(@"yyyy-MM-dd'T'HH:mm:ss.SSSZ");
  [f setCalendarWithJavaUtilCalendar:cal];
  NSString *str = [f formatWithJavaUtilDate:[((JavaUtilGregorianCalendar *) nil_chk(cal)) getTime]];
  return JreStrcat("$C$C$C", [((NSString *) nil_chk(str)) substring:0 endIndex:26], ':', [str substring:26], '[', [((JavaUtilTimeZone *) nil_chk([cal getTimeZone])) getID], ']');
}

- (id)convertFromStringWithIOSClass:(IOSClass *)cls
                       withNSString:(NSString *)str {
  if (((jint) [((NSString *) nil_chk(str)) length]) < 31 || [str charAtWithInt:26] != ':' || [str charAtWithInt:29] != '[' || [str charAtWithInt:((jint) [str length]) - 1] != ']') {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$", @"Unable to parse date: ", str));
  }
  JavaUtilTimeZone *zone = JavaUtilTimeZone_getTimeZoneWithNSString_([str substring:30 endIndex:((jint) [str length]) - 1]);
  str = JreStrcat("$$", [str substring:0 endIndex:26], [str substring:27 endIndex:29]);
  JavaTextSimpleDateFormat *f = create_JavaTextSimpleDateFormat_initWithNSString_(@"yyyy-MM-dd'T'HH:mm:ss.SSSZ");
  JavaUtilGregorianCalendar *cal = create_JavaUtilGregorianCalendar_initWithJavaUtilTimeZone_(zone);
  [cal setTimeInMillisWithLong:0];
  [f setCalendarWithJavaUtilCalendar:cal];
  @try {
    [f parseObjectWithNSString:str];
    return [f getCalendar];
  }
  @catch (JavaTextParseException *ex) {
    @throw create_JavaLangRuntimeException_initWithNSException_(ex);
  }
}

- (void)dealloc {
  JreCheckFinalize(self, [OrgJodaConvertJDKStringConverter_$31 class]);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSString;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 2, 3, -1, 4, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(convertToStringWithId:);
  methods[1].selector = @selector(convertFromStringWithIOSClass:withNSString:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "convertToString", "LNSObject;", "convertFromString", "LIOSClass;LNSString;", "(Ljava/lang/Class<*>;Ljava/lang/String;)Ljava/lang/Object;", "LOrgJodaConvertJDKStringConverter;" };
  static const J2ObjcClassInfo _OrgJodaConvertJDKStringConverter_$31 = { "", "org.joda.convert", ptrTable, methods, NULL, 7, 0xc018, 2, 0, 5, -1, -1, -1, -1 };
  return &_OrgJodaConvertJDKStringConverter_$31;
}

@end

void OrgJodaConvertJDKStringConverter_$31_initWithIOSClass_withNSString_withInt_(OrgJodaConvertJDKStringConverter_$31 *self, IOSClass *arg$0, NSString *__name, jint __ordinal) {
  OrgJodaConvertJDKStringConverter_initWithIOSClass_withNSString_withInt_(self, arg$0, __name, __ordinal);
}
