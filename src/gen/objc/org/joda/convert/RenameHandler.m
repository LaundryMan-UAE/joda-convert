//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/marcussmith/HambroPerks/hambroperks_org/joda-convert/src/main/java/org/joda/convert/RenameHandler.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "java/lang/ClassLoader.h"
#include "java/lang/ClassNotFoundException.h"
#include "java/lang/Enum.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Thread.h"
#include "java/util/HashMap.h"
#include "java/util/HashSet.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "java/util/concurrent/ConcurrentHashMap.h"
#include "org/joda/convert/RenameHandler.h"

@interface OrgJodaConvertRenameHandler () {
 @public
  /**
   @brief The type renames.
   */
  JavaUtilConcurrentConcurrentHashMap *typeRenames_;
  /**
   @brief The enum renames.
   */
  JavaUtilConcurrentConcurrentHashMap *enumRenames_;
}

/**
 @brief Restricted constructor.
 */
- (instancetype)init;

- (IOSClass *)loadTypeWithNSString:(NSString *)fullName;

@end

J2OBJC_FIELD_SETTER(OrgJodaConvertRenameHandler, typeRenames_, JavaUtilConcurrentConcurrentHashMap *)
J2OBJC_FIELD_SETTER(OrgJodaConvertRenameHandler, enumRenames_, JavaUtilConcurrentConcurrentHashMap *)

__attribute__((unused)) static void OrgJodaConvertRenameHandler_init(OrgJodaConvertRenameHandler *self);

__attribute__((unused)) static OrgJodaConvertRenameHandler *new_OrgJodaConvertRenameHandler_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static IOSClass *OrgJodaConvertRenameHandler_loadTypeWithNSString_(OrgJodaConvertRenameHandler *self, NSString *fullName);

J2OBJC_INITIALIZED_DEFN(OrgJodaConvertRenameHandler)

OrgJodaConvertRenameHandler *OrgJodaConvertRenameHandler_INSTANCE_;

@implementation OrgJodaConvertRenameHandler

+ (OrgJodaConvertRenameHandler *)create {
  return OrgJodaConvertRenameHandler_create();
}

- (instancetype)init {
  OrgJodaConvertRenameHandler_init(self);
  return self;
}

- (void)renamedTypeWithNSString:(NSString *)oldName
                   withIOSClass:(IOSClass *)currentValue {
  if (oldName == nil) {
    @throw [new_JavaLangIllegalArgumentException_initWithNSString_(@"oldName must not be null") autorelease];
  }
  if (currentValue == nil) {
    @throw [new_JavaLangIllegalArgumentException_initWithNSString_(@"currentValue must not be null") autorelease];
  }
  [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(typeRenames_)) putWithId:oldName withId:currentValue];
}

- (id<JavaUtilMap>)getTypeRenames {
  return [new_JavaUtilHashMap_initWithJavaUtilMap_(typeRenames_) autorelease];
}

- (IOSClass *)lookupTypeWithNSString:(NSString *)name {
  if (name == nil) {
    @throw [new_JavaLangIllegalArgumentException_initWithNSString_(@"name must not be null") autorelease];
  }
  IOSClass *type = [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(typeRenames_)) getWithId:name];
  if (type == nil) {
    type = OrgJodaConvertRenameHandler_loadTypeWithNSString_(self, name);
  }
  return type;
}

- (IOSClass *)loadTypeWithNSString:(NSString *)fullName {
  return OrgJodaConvertRenameHandler_loadTypeWithNSString_(self, fullName);
}

- (void)renamedEnumWithNSString:(NSString *)oldName
               withJavaLangEnum:(JavaLangEnum *)currentValue {
  if (oldName == nil) {
    @throw [new_JavaLangIllegalArgumentException_initWithNSString_(@"oldName must not be null") autorelease];
  }
  if (currentValue == nil) {
    @throw [new_JavaLangIllegalArgumentException_initWithNSString_(@"currentValue must not be null") autorelease];
  }
  IOSClass *enumType = [((JavaLangEnum *) nil_chk(currentValue)) getDeclaringClass];
  id<JavaUtilMap> perClass = [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(enumRenames_)) getWithId:enumType];
  if (perClass == nil) {
    [enumRenames_ putIfAbsentWithId:enumType withId:[new_JavaUtilConcurrentConcurrentHashMap_initWithInt_withFloat_withInt_(16, 0.75f, 2) autorelease]];
    perClass = [enumRenames_ getWithId:enumType];
  }
  [((id<JavaUtilMap>) nil_chk(perClass)) putWithId:oldName withId:currentValue];
}

- (id<JavaUtilSet>)getEnumTypesWithRenames {
  return [new_JavaUtilHashSet_initWithJavaUtilCollection_([((JavaUtilConcurrentConcurrentHashMap *) nil_chk(enumRenames_)) keySet]) autorelease];
}

- (id<JavaUtilMap>)getEnumRenamesWithIOSClass:(IOSClass *)type {
  if (type == nil) {
    @throw [new_JavaLangIllegalArgumentException_initWithNSString_(@"type must not be null") autorelease];
  }
  id<JavaUtilMap> map = [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(enumRenames_)) getWithId:type];
  if (map == nil) {
    return [new_JavaUtilHashMap_init() autorelease];
  }
  return [new_JavaUtilHashMap_initWithJavaUtilMap_(map) autorelease];
}

- (id)lookupEnumWithIOSClass:(IOSClass *)type
                withNSString:(NSString *)name {
  if (type == nil) {
    @throw [new_JavaLangIllegalArgumentException_initWithNSString_(@"type must not be null") autorelease];
  }
  if (name == nil) {
    @throw [new_JavaLangIllegalArgumentException_initWithNSString_(@"name must not be null") autorelease];
  }
  id<JavaUtilMap> map = [self getEnumRenamesWithIOSClass:type];
  JavaLangEnum *value = [((id<JavaUtilMap>) nil_chk(map)) getWithId:name];
  if (value != nil) {
    return [((IOSClass *) nil_chk(type)) cast:value];
  }
  return ((JavaLangEnum *) JavaLangEnum_valueOfWithIOSClass_withNSString_(type, name));
}

- (NSString *)description {
  return JreStrcat("$@$@", @"RenamedTypes", typeRenames_, @",RenamedEnumConstants", enumRenames_);
}

- (void)dealloc {
  RELEASE_(typeRenames_);
  RELEASE_(enumRenames_);
  [super dealloc];
}

+ (void)initialize {
  if (self == [OrgJodaConvertRenameHandler class]) {
    JreStrongAssignAndConsume(&OrgJodaConvertRenameHandler_INSTANCE_, nil, new_OrgJodaConvertRenameHandler_init());
    J2OBJC_SET_INITIALIZED(OrgJodaConvertRenameHandler)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "create", NULL, "Lorg.joda.convert.RenameHandler;", 0x9, NULL, NULL },
    { "init", "RenameHandler", NULL, 0x2, NULL, NULL },
    { "renamedTypeWithNSString:withIOSClass:", "renamedType", "V", 0x1, NULL, NULL },
    { "getTypeRenames", NULL, "Ljava.util.Map;", 0x1, NULL, NULL },
    { "lookupTypeWithNSString:", "lookupType", "Ljava.lang.Class;", 0x1, "Ljava.lang.ClassNotFoundException;", NULL },
    { "loadTypeWithNSString:", "loadType", "Ljava.lang.Class;", 0x2, "Ljava.lang.ClassNotFoundException;", NULL },
    { "renamedEnumWithNSString:withJavaLangEnum:", "renamedEnum", "V", 0x1, NULL, NULL },
    { "getEnumTypesWithRenames", NULL, "Ljava.util.Set;", 0x1, NULL, NULL },
    { "getEnumRenamesWithIOSClass:", "getEnumRenames", "Ljava.util.Map;", 0x1, NULL, NULL },
    { "lookupEnumWithIOSClass:withNSString:", "lookupEnum", "TT;", 0x1, NULL, "<T:Ljava/lang/Enum<TT;>;>(Ljava/lang/Class<TT;>;Ljava/lang/String;)TT;" },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "INSTANCE_", NULL, 0x19, "Lorg.joda.convert.RenameHandler;", &OrgJodaConvertRenameHandler_INSTANCE_, NULL,  },
    { "typeRenames_", NULL, 0x12, "Ljava.util.concurrent.ConcurrentHashMap;", NULL, "Ljava/util/concurrent/ConcurrentHashMap<Ljava/lang/String;Ljava/lang/Class<*>;>;",  },
    { "enumRenames_", NULL, 0x12, "Ljava.util.concurrent.ConcurrentHashMap;", NULL, "Ljava/util/concurrent/ConcurrentHashMap<Ljava/lang/Class<*>;Ljava/util/Map<Ljava/lang/String;Ljava/lang/Enum<*>;>;>;",  },
  };
  static const J2ObjcClassInfo _OrgJodaConvertRenameHandler = { 2, "RenameHandler", "org.joda.convert", NULL, 0x11, 11, methods, 3, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgJodaConvertRenameHandler;
}

@end

OrgJodaConvertRenameHandler *OrgJodaConvertRenameHandler_create() {
  OrgJodaConvertRenameHandler_initialize();
  return [new_OrgJodaConvertRenameHandler_init() autorelease];
}

void OrgJodaConvertRenameHandler_init(OrgJodaConvertRenameHandler *self) {
  NSObject_init(self);
  OrgJodaConvertRenameHandler_setAndConsume_typeRenames_(self, new_JavaUtilConcurrentConcurrentHashMap_initWithInt_withFloat_withInt_(16, 0.75f, 2));
  OrgJodaConvertRenameHandler_setAndConsume_enumRenames_(self, new_JavaUtilConcurrentConcurrentHashMap_initWithInt_withFloat_withInt_(16, 0.75f, 2));
}

OrgJodaConvertRenameHandler *new_OrgJodaConvertRenameHandler_init() {
  OrgJodaConvertRenameHandler *self = [OrgJodaConvertRenameHandler alloc];
  OrgJodaConvertRenameHandler_init(self);
  return self;
}

IOSClass *OrgJodaConvertRenameHandler_loadTypeWithNSString_(OrgJodaConvertRenameHandler *self, NSString *fullName) {
  JavaLangClassLoader *loader = [((JavaLangThread *) nil_chk(JavaLangThread_currentThread())) getContextClassLoader];
  return loader != nil ? [loader loadClassWithNSString:fullName] : IOSClass_forName_(fullName);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJodaConvertRenameHandler)
