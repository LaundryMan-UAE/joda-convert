//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/marcussmith/Laundryman/Libraries/joda-convert/src/main/java/org/joda/convert/RenameHandler.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "java/lang/ClassLoader.h"
#include "java/lang/ClassNotFoundException.h"
#include "java/lang/Enum.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Thread.h"
#include "java/util/HashMap.h"
#include "java/util/HashSet.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "java/util/concurrent/ConcurrentHashMap.h"
#include "org/joda/convert/RenameHandler.h"

@interface OrgJodaConvertRenameHandler () {
 @public
  volatile_jboolean locked_;
  JavaUtilConcurrentConcurrentHashMap *typeRenames_;
  JavaUtilConcurrentConcurrentHashMap *enumRenames_;
}

- (instancetype)init;

- (IOSClass *)loadPrimitiveTypeWithNSString:(NSString *)fullName
         withJavaLangClassNotFoundException:(JavaLangClassNotFoundException *)ex;

- (void)checkNotLocked;

@end

J2OBJC_FIELD_SETTER(OrgJodaConvertRenameHandler, typeRenames_, JavaUtilConcurrentConcurrentHashMap *)
J2OBJC_FIELD_SETTER(OrgJodaConvertRenameHandler, enumRenames_, JavaUtilConcurrentConcurrentHashMap *)

__attribute__((unused)) static void OrgJodaConvertRenameHandler_init(OrgJodaConvertRenameHandler *self);

__attribute__((unused)) static OrgJodaConvertRenameHandler *new_OrgJodaConvertRenameHandler_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgJodaConvertRenameHandler *create_OrgJodaConvertRenameHandler_init(void);

__attribute__((unused)) static IOSClass *OrgJodaConvertRenameHandler_loadPrimitiveTypeWithNSString_withJavaLangClassNotFoundException_(OrgJodaConvertRenameHandler *self, NSString *fullName, JavaLangClassNotFoundException *ex);

__attribute__((unused)) static void OrgJodaConvertRenameHandler_checkNotLocked(OrgJodaConvertRenameHandler *self);

J2OBJC_INITIALIZED_DEFN(OrgJodaConvertRenameHandler)

OrgJodaConvertRenameHandler *OrgJodaConvertRenameHandler_INSTANCE;

@implementation OrgJodaConvertRenameHandler

+ (OrgJodaConvertRenameHandler *)create {
  return OrgJodaConvertRenameHandler_create();
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgJodaConvertRenameHandler_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)renamedTypeWithNSString:(NSString *)oldName
                   withIOSClass:(IOSClass *)currentValue {
  if (oldName == nil) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"oldName must not be null");
  }
  if (currentValue == nil) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"currentValue must not be null");
  }
  if ([oldName java_hasPrefix:@"java."] || [oldName java_hasPrefix:@"javax."] || [oldName java_hasPrefix:@"org.joda."]) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"oldName must not be a java.*, javax.* or org.joda.* type");
  }
  OrgJodaConvertRenameHandler_checkNotLocked(self);
  [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(typeRenames_)) putWithId:oldName withId:currentValue];
}

- (id<JavaUtilMap>)getTypeRenames {
  return create_JavaUtilHashMap_initWithJavaUtilMap_(typeRenames_);
}

- (IOSClass *)lookupTypeWithNSString:(NSString *)name {
  if (name == nil) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"name must not be null");
  }
  IOSClass *type = [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(typeRenames_)) getWithId:name];
  if (type == nil) {
    type = [self loadTypeWithNSString:name];
  }
  return type;
}

- (IOSClass *)loadTypeWithNSString:(NSString *)fullName {
  @try {
    JavaLangClassLoader *loader = [((JavaLangThread *) nil_chk(JavaLangThread_currentThread())) getContextClassLoader];
    return loader != nil ? [loader loadClassWithNSString:fullName] : IOSClass_forName_(fullName);
  }
  @catch (JavaLangClassNotFoundException *ex) {
    return OrgJodaConvertRenameHandler_loadPrimitiveTypeWithNSString_withJavaLangClassNotFoundException_(self, fullName, ex);
  }
}

- (IOSClass *)loadPrimitiveTypeWithNSString:(NSString *)fullName
         withJavaLangClassNotFoundException:(JavaLangClassNotFoundException *)ex {
  return OrgJodaConvertRenameHandler_loadPrimitiveTypeWithNSString_withJavaLangClassNotFoundException_(self, fullName, ex);
}

- (void)renamedEnumWithNSString:(NSString *)oldName
               withJavaLangEnum:(JavaLangEnum *)currentValue {
  if (oldName == nil) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"oldName must not be null");
  }
  if (currentValue == nil) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"currentValue must not be null");
  }
  OrgJodaConvertRenameHandler_checkNotLocked(self);
  IOSClass *enumType = [currentValue getDeclaringClass];
  id<JavaUtilMap> perClass = [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(enumRenames_)) getWithId:enumType];
  if (perClass == nil) {
    [enumRenames_ putIfAbsentWithId:enumType withId:create_JavaUtilConcurrentConcurrentHashMap_initWithInt_withFloat_withInt_(16, 0.75f, 2)];
    perClass = [enumRenames_ getWithId:enumType];
  }
  [((id<JavaUtilMap>) nil_chk(perClass)) putWithId:oldName withId:currentValue];
}

- (id<JavaUtilSet>)getEnumTypesWithRenames {
  return create_JavaUtilHashSet_initWithJavaUtilCollection_([((JavaUtilConcurrentConcurrentHashMap *) nil_chk(enumRenames_)) keySet]);
}

- (id<JavaUtilMap>)getEnumRenamesWithIOSClass:(IOSClass *)type {
  if (type == nil) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"type must not be null");
  }
  id<JavaUtilMap> map = [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(enumRenames_)) getWithId:type];
  if (map == nil) {
    return create_JavaUtilHashMap_init();
  }
  return create_JavaUtilHashMap_initWithJavaUtilMap_(map);
}

- (JavaLangEnum *)lookupEnumWithIOSClass:(IOSClass *)type
                            withNSString:(NSString *)name {
  if (type == nil) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"type must not be null");
  }
  if (name == nil) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"name must not be null");
  }
  id<JavaUtilMap> map = [self getEnumRenamesWithIOSClass:type];
  JavaLangEnum *value = [((id<JavaUtilMap>) nil_chk(map)) getWithId:name];
  if (value != nil) {
    return [type cast:value];
  }
  return JavaLangEnum_valueOfWithIOSClass_withNSString_(type, name);
}

- (void)lock {
  OrgJodaConvertRenameHandler_checkNotLocked(self);
  JreAssignVolatileBoolean(&locked_, true);
}

- (void)checkNotLocked {
  OrgJodaConvertRenameHandler_checkNotLocked(self);
}

- (NSString *)description {
  return JreStrcat("$@$@", @"RenamedTypes", typeRenames_, @",RenamedEnumConstants", enumRenames_);
}

- (void)dealloc {
  RELEASE_(typeRenames_);
  RELEASE_(enumRenames_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LOrgJodaConvertRenameHandler;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, -1, -1, -1, 3, -1, -1 },
    { NULL, "LIOSClass;", 0x1, 4, 5, 6, 7, -1, -1 },
    { NULL, "LIOSClass;", 0x0, 8, 5, 6, 7, -1, -1 },
    { NULL, "LIOSClass;", 0x2, 9, 10, 6, 11, -1, -1 },
    { NULL, "V", 0x1, 12, 13, -1, 14, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x1, -1, -1, -1, 15, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, 16, 17, -1, 18, -1, -1 },
    { NULL, "LJavaLangEnum;", 0x1, 19, 20, -1, 21, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 22, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(create);
  methods[1].selector = @selector(init);
  methods[2].selector = @selector(renamedTypeWithNSString:withIOSClass:);
  methods[3].selector = @selector(getTypeRenames);
  methods[4].selector = @selector(lookupTypeWithNSString:);
  methods[5].selector = @selector(loadTypeWithNSString:);
  methods[6].selector = @selector(loadPrimitiveTypeWithNSString:withJavaLangClassNotFoundException:);
  methods[7].selector = @selector(renamedEnumWithNSString:withJavaLangEnum:);
  methods[8].selector = @selector(getEnumTypesWithRenames);
  methods[9].selector = @selector(getEnumRenamesWithIOSClass:);
  methods[10].selector = @selector(lookupEnumWithIOSClass:withNSString:);
  methods[11].selector = @selector(lock);
  methods[12].selector = @selector(checkNotLocked);
  methods[13].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "INSTANCE", "LOrgJodaConvertRenameHandler;", .constantValue.asLong = 0, 0x19, -1, 23, -1, -1 },
    { "locked_", "Z", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
    { "typeRenames_", "LJavaUtilConcurrentConcurrentHashMap;", .constantValue.asLong = 0, 0x12, -1, -1, 24, -1 },
    { "enumRenames_", "LJavaUtilConcurrentConcurrentHashMap;", .constantValue.asLong = 0, 0x12, -1, -1, 25, -1 },
  };
  static const void *ptrTable[] = { "renamedType", "LNSString;LIOSClass;", "(Ljava/lang/String;Ljava/lang/Class<*>;)V", "()Ljava/util/Map<Ljava/lang/String;Ljava/lang/Class<*>;>;", "lookupType", "LNSString;", "LJavaLangClassNotFoundException;", "(Ljava/lang/String;)Ljava/lang/Class<*>;", "loadType", "loadPrimitiveType", "LNSString;LJavaLangClassNotFoundException;", "(Ljava/lang/String;Ljava/lang/ClassNotFoundException;)Ljava/lang/Class<*>;", "renamedEnum", "LNSString;LJavaLangEnum;", "(Ljava/lang/String;Ljava/lang/Enum<*>;)V", "()Ljava/util/Set<Ljava/lang/Class<*>;>;", "getEnumRenames", "LIOSClass;", "(Ljava/lang/Class<*>;)Ljava/util/Map<Ljava/lang/String;Ljava/lang/Enum<*>;>;", "lookupEnum", "LIOSClass;LNSString;", "<T:Ljava/lang/Enum<TT;>;>(Ljava/lang/Class<TT;>;Ljava/lang/String;)TT;", "toString", &OrgJodaConvertRenameHandler_INSTANCE, "Ljava/util/concurrent/ConcurrentHashMap<Ljava/lang/String;Ljava/lang/Class<*>;>;", "Ljava/util/concurrent/ConcurrentHashMap<Ljava/lang/Class<*>;Ljava/util/Map<Ljava/lang/String;Ljava/lang/Enum<*>;>;>;" };
  static const J2ObjcClassInfo _OrgJodaConvertRenameHandler = { "RenameHandler", "org.joda.convert", ptrTable, methods, fields, 7, 0x11, 14, 4, -1, -1, -1, -1, -1 };
  return &_OrgJodaConvertRenameHandler;
}

+ (void)initialize {
  if (self == [OrgJodaConvertRenameHandler class]) {
    JreStrongAssignAndConsume(&OrgJodaConvertRenameHandler_INSTANCE, new_OrgJodaConvertRenameHandler_init());
    J2OBJC_SET_INITIALIZED(OrgJodaConvertRenameHandler)
  }
}

@end

OrgJodaConvertRenameHandler *OrgJodaConvertRenameHandler_create() {
  OrgJodaConvertRenameHandler_initialize();
  return create_OrgJodaConvertRenameHandler_init();
}

void OrgJodaConvertRenameHandler_init(OrgJodaConvertRenameHandler *self) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->typeRenames_, new_JavaUtilConcurrentConcurrentHashMap_initWithInt_withFloat_withInt_(16, 0.75f, 2));
  JreStrongAssignAndConsume(&self->enumRenames_, new_JavaUtilConcurrentConcurrentHashMap_initWithInt_withFloat_withInt_(16, 0.75f, 2));
}

OrgJodaConvertRenameHandler *new_OrgJodaConvertRenameHandler_init() {
  J2OBJC_NEW_IMPL(OrgJodaConvertRenameHandler, init)
}

OrgJodaConvertRenameHandler *create_OrgJodaConvertRenameHandler_init() {
  J2OBJC_CREATE_IMPL(OrgJodaConvertRenameHandler, init)
}

IOSClass *OrgJodaConvertRenameHandler_loadPrimitiveTypeWithNSString_withJavaLangClassNotFoundException_(OrgJodaConvertRenameHandler *self, NSString *fullName, JavaLangClassNotFoundException *ex) {
  if ([((NSString *) nil_chk(fullName)) isEqual:@"int"]) {
    return [IOSClass intClass];
  }
  else if ([fullName isEqual:@"long"]) {
    return [IOSClass longClass];
  }
  else if ([fullName isEqual:@"double"]) {
    return [IOSClass doubleClass];
  }
  else if ([fullName isEqual:@"boolean"]) {
    return [IOSClass booleanClass];
  }
  else if ([fullName isEqual:@"short"]) {
    return [IOSClass shortClass];
  }
  else if ([fullName isEqual:@"byte"]) {
    return [IOSClass byteClass];
  }
  else if ([fullName isEqual:@"char"]) {
    return [IOSClass charClass];
  }
  else if ([fullName isEqual:@"float"]) {
    return [IOSClass floatClass];
  }
  else if ([fullName isEqual:@"void"]) {
    return [IOSClass voidClass];
  }
  @throw nil_chk(ex);
}

void OrgJodaConvertRenameHandler_checkNotLocked(OrgJodaConvertRenameHandler *self) {
  if (JreLoadVolatileBoolean(&self->locked_)) {
    @throw create_JavaLangIllegalStateException_initWithNSString_(@"RenameHandler has been locked and it cannot now be changed");
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJodaConvertRenameHandler)
