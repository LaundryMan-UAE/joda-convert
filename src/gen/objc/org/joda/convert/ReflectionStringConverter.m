//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/nbransby/Documents/joda-convert/src/main/java/org/joda/convert/ReflectionStringConverter.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalAccessException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/Throwable.h"
#include "java/lang/reflect/InvocationTargetException.h"
#include "java/lang/reflect/Method.h"
#include "org/joda/convert/ReflectionStringConverter.h"

#pragma clang diagnostic ignored "-Wprotocol"

@interface OrgJodaConvertReflectionStringConverter () {
 @public
  /**
   @brief The converted class.
   */
  IOSClass *cls_;
  /**
   @brief Conversion to a string.
   */
  JavaLangReflectMethod *toString__;
}
@end

J2OBJC_FIELD_SETTER(OrgJodaConvertReflectionStringConverter, cls_, IOSClass *)
J2OBJC_FIELD_SETTER(OrgJodaConvertReflectionStringConverter, toString__, JavaLangReflectMethod *)

@implementation OrgJodaConvertReflectionStringConverter

- (instancetype)initWithIOSClass:(IOSClass *)cls
       withJavaLangReflectMethod:(JavaLangReflectMethod *)toString {
  if (self = [super init]) {
    if (((IOSObjectArray *) nil_chk([((JavaLangReflectMethod *) nil_chk(toString)) getParameterTypes]))->size_ != 0) {
      @throw [[[JavaLangIllegalStateException alloc] initWithNSString:JreStrcat("$@", @"ToString method must have no parameters: ", toString)] autorelease];
    }
    if ([toString getReturnType] != NSString_class_()) {
      @throw [[[JavaLangIllegalStateException alloc] initWithNSString:JreStrcat("$@", @"ToString method must return a String: ", toString)] autorelease];
    }
    OrgJodaConvertReflectionStringConverter_set_cls_(self, cls);
    OrgJodaConvertReflectionStringConverter_set_toString__(self, toString);
  }
  return self;
}

- (NSString *)convertToStringWithId:(id)object {
  @try {
    return (NSString *) check_class_cast([((JavaLangReflectMethod *) nil_chk(toString__)) invokeWithId:object withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:NSObject_class_()]], [NSString class]);
  }
  @catch (JavaLangIllegalAccessException *ex) {
    @throw [[[JavaLangIllegalStateException alloc] initWithNSString:JreStrcat("$@", @"Method is not accessible: ", toString__)] autorelease];
  }
  @catch (JavaLangReflectInvocationTargetException *ex) {
    if ([[((JavaLangReflectInvocationTargetException *) nil_chk(ex)) getCause] isKindOfClass:[JavaLangRuntimeException class]]) {
      @throw (JavaLangRuntimeException *) check_class_cast([ex getCause], [JavaLangRuntimeException class]);
    }
    @throw [[[JavaLangRuntimeException alloc] initWithNSString:[ex getMessage] withJavaLangThrowable:[ex getCause]] autorelease];
  }
}

- (NSString *)description {
  return JreStrcat("$$C", @"RefectionStringConverter[", [((IOSClass *) nil_chk(cls_)) getSimpleName], ']');
}

- (void)dealloc {
  RELEASE_(cls_);
  RELEASE_(toString__);
  [super dealloc];
}

- (void)copyAllFieldsTo:(OrgJodaConvertReflectionStringConverter *)other {
  [super copyAllFieldsTo:other];
  OrgJodaConvertReflectionStringConverter_set_cls_(other, cls_);
  OrgJodaConvertReflectionStringConverter_set_toString__(other, toString__);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithIOSClass:withJavaLangReflectMethod:", "ReflectionStringConverter", NULL, 0x0, NULL },
    { "convertToStringWithId:", "convertToString", "Ljava.lang.String;", 0x1, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "cls_", NULL, 0x12, "Ljava.lang.Class;", NULL,  },
    { "toString__", "toString", 0x12, "Ljava.lang.reflect.Method;", NULL,  },
  };
  static const J2ObjcClassInfo _OrgJodaConvertReflectionStringConverter = { 1, "ReflectionStringConverter", "org.joda.convert", NULL, 0x400, 3, methods, 2, fields, 0, NULL};
  return &_OrgJodaConvertReflectionStringConverter;
}

@end

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJodaConvertReflectionStringConverter)
