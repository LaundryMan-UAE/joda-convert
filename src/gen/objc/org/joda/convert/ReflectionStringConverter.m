//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/andrefonseca/Documents/PodsFolders/joda-convert/src/main/java/org/joda/convert/ReflectionStringConverter.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalAccessException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/reflect/InvocationTargetException.h"
#include "java/lang/reflect/Method.h"
#include "org/joda/convert/ReflectionStringConverter.h"

#pragma clang diagnostic ignored "-Wprotocol"

@interface OrgJodaConvertReflectionStringConverter () {
 @public
  /*!
   @brief The converted class.
   */
  IOSClass *cls_;
  /*!
   @brief Conversion to a string.
   */
  JavaLangReflectMethod *toString_;
}

@end

J2OBJC_FIELD_SETTER(OrgJodaConvertReflectionStringConverter, cls_, IOSClass *)
J2OBJC_FIELD_SETTER(OrgJodaConvertReflectionStringConverter, toString_, JavaLangReflectMethod *)

@implementation OrgJodaConvertReflectionStringConverter

- (instancetype)initWithIOSClass:(IOSClass *)cls
       withJavaLangReflectMethod:(JavaLangReflectMethod *)toString {
  OrgJodaConvertReflectionStringConverter_initWithIOSClass_withJavaLangReflectMethod_(self, cls, toString);
  return self;
}

- (NSString *)convertToStringWithId:(id)object {
  @try {
    return (NSString *) cast_chk([((JavaLangReflectMethod *) nil_chk(toString_)) invokeWithId:object withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:NSObject_class_()]], [NSString class]);
  }
  @catch (JavaLangIllegalAccessException *ex) {
    @throw [new_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$@", @"Method is not accessible: ", toString_)) autorelease];
  }
  @catch (JavaLangReflectInvocationTargetException *ex) {
    if ([[((JavaLangReflectInvocationTargetException *) nil_chk(ex)) getCause] isKindOfClass:[JavaLangRuntimeException class]]) {
      @throw (JavaLangRuntimeException *) cast_chk([ex getCause], [JavaLangRuntimeException class]);
    }
    @throw [new_JavaLangRuntimeException_initWithNSString_withNSException_([ex getMessage], [ex getCause]) autorelease];
  }
}

- (NSString *)description {
  return JreStrcat("$$C", @"RefectionStringConverter[", [((IOSClass *) nil_chk(cls_)) getSimpleName], ']');
}

- (void)dealloc {
  RELEASE_(cls_);
  RELEASE_(toString_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithIOSClass:withJavaLangReflectMethod:", "ReflectionStringConverter", NULL, 0x0, NULL, "(Ljava/lang/Class<TT;>;Ljava/lang/reflect/Method;)V" },
    { "convertToStringWithId:", "convertToString", "Ljava.lang.String;", 0x1, NULL, "(TT;)Ljava/lang/String;" },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "cls_", NULL, 0x12, "Ljava.lang.Class;", NULL, "Ljava/lang/Class<TT;>;", .constantValue.asLong = 0 },
    { "toString_", NULL, 0x12, "Ljava.lang.reflect.Method;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OrgJodaConvertReflectionStringConverter = { 2, "ReflectionStringConverter", "org.joda.convert", NULL, 0x400, 3, methods, 2, fields, 0, NULL, 0, NULL, NULL, "<T:Ljava/lang/Object;>Ljava/lang/Object;Lorg/joda/convert/TypedStringConverter<TT;>;" };
  return &_OrgJodaConvertReflectionStringConverter;
}

@end

void OrgJodaConvertReflectionStringConverter_initWithIOSClass_withJavaLangReflectMethod_(OrgJodaConvertReflectionStringConverter *self, IOSClass *cls, JavaLangReflectMethod *toString) {
  NSObject_init(self);
  if (((IOSObjectArray *) nil_chk([((JavaLangReflectMethod *) nil_chk(toString)) getParameterTypes]))->size_ != 0) {
    @throw [new_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$@", @"ToString method must have no parameters: ", toString)) autorelease];
  }
  if ([toString getReturnType] != NSString_class_()) {
    @throw [new_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$@", @"ToString method must return a String: ", toString)) autorelease];
  }
  JreStrongAssign(&self->cls_, cls);
  JreStrongAssign(&self->toString_, toString);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJodaConvertReflectionStringConverter)
