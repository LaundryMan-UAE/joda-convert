//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/marcussmith/Laundryman/Libraries/joda-convert/src/main/java/org/joda/convert/ReflectionStringConverter.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgJodaConvertReflectionStringConverter")
#ifdef RESTRICT_OrgJodaConvertReflectionStringConverter
#define INCLUDE_ALL_OrgJodaConvertReflectionStringConverter 0
#else
#define INCLUDE_ALL_OrgJodaConvertReflectionStringConverter 1
#endif
#undef RESTRICT_OrgJodaConvertReflectionStringConverter

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (OrgJodaConvertReflectionStringConverter_) && (INCLUDE_ALL_OrgJodaConvertReflectionStringConverter || defined(INCLUDE_OrgJodaConvertReflectionStringConverter))
#define OrgJodaConvertReflectionStringConverter_

#define RESTRICT_OrgJodaConvertTypedStringConverter 1
#define INCLUDE_OrgJodaConvertTypedStringConverter 1
#include "org/joda/convert/TypedStringConverter.h"

@class IOSClass;
@class JavaLangReflectMethod;

@interface OrgJodaConvertReflectionStringConverter : NSObject < OrgJodaConvertTypedStringConverter >

#pragma mark Public

- (NSString *)convertToStringWithId:(id)object;

- (NSString *)description;

#pragma mark Package-Private

- (instancetype __nonnull)initPackagePrivateWithIOSClass:(IOSClass *)cls
                               withJavaLangReflectMethod:(JavaLangReflectMethod *)toString;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgJodaConvertReflectionStringConverter)

FOUNDATION_EXPORT void OrgJodaConvertReflectionStringConverter_initPackagePrivateWithIOSClass_withJavaLangReflectMethod_(OrgJodaConvertReflectionStringConverter *self, IOSClass *cls, JavaLangReflectMethod *toString);

J2OBJC_TYPE_LITERAL_HEADER(OrgJodaConvertReflectionStringConverter)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_OrgJodaConvertReflectionStringConverter")
