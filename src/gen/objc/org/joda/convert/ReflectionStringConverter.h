//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/marcussmith/HambroPerks/hambroperks_org/joda-convert/src/main/java/org/joda/convert/ReflectionStringConverter.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgJodaConvertReflectionStringConverter")
#ifdef RESTRICT_OrgJodaConvertReflectionStringConverter
#define INCLUDE_ALL_OrgJodaConvertReflectionStringConverter 0
#else
#define INCLUDE_ALL_OrgJodaConvertReflectionStringConverter 1
#endif
#undef RESTRICT_OrgJodaConvertReflectionStringConverter

#if !defined (OrgJodaConvertReflectionStringConverter_) && (INCLUDE_ALL_OrgJodaConvertReflectionStringConverter || defined(INCLUDE_OrgJodaConvertReflectionStringConverter))
#define OrgJodaConvertReflectionStringConverter_

#define RESTRICT_OrgJodaConvertTypedStringConverter 1
#define INCLUDE_OrgJodaConvertTypedStringConverter 1
#include "org/joda/convert/TypedStringConverter.h"

@class IOSClass;
@class JavaLangReflectMethod;

/*!
 @brief Conversion to and from a string using reflection.
 <p>
  The toString method must meet the following signature:<br>
  <code>String anyName()</code> on Class T. 
 <p>
  ReflectionStringConverter is abstract, but all known implementations are thread-safe and immutable.
 */
@interface OrgJodaConvertReflectionStringConverter : NSObject < OrgJodaConvertTypedStringConverter >

#pragma mark Public

/*!
 @brief Converts the object to a <code>String</code>.
 @param object the object to convert, not null
 @return the converted string, may be null but generally not
 */
- (NSString *)convertToStringWithId:(id)object;

- (NSString *)description;

#pragma mark Package-Private

/*!
 @brief Creates an instance using two methods.
 @param cls the class this converts for, not null
 @param toString the toString method, not null
 @throw RuntimeException(or subclass) if the method signatures are invalid
 */
- (instancetype)initWithIOSClass:(IOSClass *)cls
       withJavaLangReflectMethod:(JavaLangReflectMethod *)toString;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgJodaConvertReflectionStringConverter)

FOUNDATION_EXPORT void OrgJodaConvertReflectionStringConverter_initWithIOSClass_withJavaLangReflectMethod_(OrgJodaConvertReflectionStringConverter *self, IOSClass *cls, JavaLangReflectMethod *toString);

J2OBJC_TYPE_LITERAL_HEADER(OrgJodaConvertReflectionStringConverter)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgJodaConvertReflectionStringConverter")
