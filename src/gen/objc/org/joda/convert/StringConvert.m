//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/andrefonseca/Documents/PodsFolders/joda-convert/src/main/java/org/joda/convert/StringConvert.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Boolean.h"
#include "java/lang/Byte.h"
#include "java/lang/CharSequence.h"
#include "java/lang/Character.h"
#include "java/lang/ClassLoader.h"
#include "java/lang/Double.h"
#include "java/lang/Exception.h"
#include "java/lang/Float.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Integer.h"
#include "java/lang/Long.h"
#include "java/lang/NoSuchMethodException.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/Short.h"
#include "java/lang/reflect/Constructor.h"
#include "java/lang/reflect/Method.h"
#include "java/lang/reflect/Modifier.h"
#include "java/util/Arrays.h"
#include "java/util/List.h"
#include "java/util/concurrent/ConcurrentHashMap.h"
#include "java/util/concurrent/ConcurrentMap.h"
#include "java/util/concurrent/CopyOnWriteArrayList.h"
#include "org/joda/convert/AnnotationStringConverterFactory.h"
#include "org/joda/convert/EnumStringConverterFactory.h"
#include "org/joda/convert/FromStringConverter.h"
#include "org/joda/convert/JDKStringConverter.h"
#include "org/joda/convert/MethodConstructorStringConverter.h"
#include "org/joda/convert/MethodsStringConverter.h"
#include "org/joda/convert/StringConvert.h"
#include "org/joda/convert/StringConverter.h"
#include "org/joda/convert/StringConverterFactory.h"
#include "org/joda/convert/ToStringConverter.h"
#include "org/joda/convert/TypedAdapter.h"
#include "org/joda/convert/TypedStringConverter.h"
#include "org/joda/convert/factory/BooleanArrayStringConverterFactory.h"
#include "org/joda/convert/factory/BooleanObjectArrayStringConverterFactory.h"
#include "org/joda/convert/factory/ByteObjectArrayStringConverterFactory.h"
#include "org/joda/convert/factory/CharObjectArrayStringConverterFactory.h"
#include "org/joda/convert/factory/NumericArrayStringConverterFactory.h"
#include "org/joda/convert/factory/NumericObjectArrayStringConverterFactory.h"

@interface OrgJodaConvertStringConvert () {
 @public
  /*!
   @brief The list of factories.
   */
  JavaUtilConcurrentCopyOnWriteArrayList *factories_;
  /*!
   @brief The cache of converters.
   */
  id<JavaUtilConcurrentConcurrentMap> registered_;
}

/*!
 @brief Tries to register a class using the standard toString/parse pattern.
 @param className_  the class name, not null
 */
- (void)tryRegisterWithNSString:(NSString *)className_
                   withNSString:(NSString *)fromStringMethodName;

/*!
 @brief Finds a converter searching registered and annotated.
 @param cls  the class to find a method for, not null
 @return the converter, null if no converter
 @throws RuntimeException if invalid
 */
- (id<OrgJodaConvertTypedStringConverter>)findConverterQuietWithIOSClass:(IOSClass *)cls;

/*!
 @brief Finds a converter searching registered and annotated.
 @param cls  the class to find a method for, not null
 @return the converter, not null
 @throws RuntimeException if invalid
 */
- (id<OrgJodaConvertTypedStringConverter>)findAnyConverterWithIOSClass:(IOSClass *)cls;

/*!
 @brief Finds the conversion method.
 @param cls  the class to find a method for, not null
 @param methodName  the name of the method to find, not null
 @return the method to call, null means use <code>toString</code>
 */
- (JavaLangReflectMethod *)findToStringMethodWithIOSClass:(IOSClass *)cls
                                             withNSString:(NSString *)methodName;

/*!
 @brief Finds the conversion method.
 @param cls  the class to find a method for, not null
 @param methodName  the name of the method to find, not null
 @return the method to call, null means use <code>toString</code>
 */
- (JavaLangReflectMethod *)findFromStringMethodWithIOSClass:(IOSClass *)cls
                                               withNSString:(NSString *)methodName;

/*!
 @brief Finds the conversion method.
 @param cls  the class to find a method for, not null
 @return the method to call, null means use <code>toString</code>
 */
- (JavaLangReflectConstructor *)findFromStringConstructorByTypeWithIOSClass:(IOSClass *)cls;

@end

J2OBJC_FIELD_SETTER(OrgJodaConvertStringConvert, factories_, JavaUtilConcurrentCopyOnWriteArrayList *)
J2OBJC_FIELD_SETTER(OrgJodaConvertStringConvert, registered_, id<JavaUtilConcurrentConcurrentMap>)

/*!
 @brief The cached null object.
 */
inline id<OrgJodaConvertTypedStringConverter> OrgJodaConvertStringConvert_get_CACHED_NULL();
static id<OrgJodaConvertTypedStringConverter> OrgJodaConvertStringConvert_CACHED_NULL;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgJodaConvertStringConvert, CACHED_NULL, id<OrgJodaConvertTypedStringConverter>)

__attribute__((unused)) static void OrgJodaConvertStringConvert_tryRegisterWithNSString_withNSString_(OrgJodaConvertStringConvert *self, NSString *className_, NSString *fromStringMethodName);

__attribute__((unused)) static id<OrgJodaConvertTypedStringConverter> OrgJodaConvertStringConvert_findConverterQuietWithIOSClass_(OrgJodaConvertStringConvert *self, IOSClass *cls);

__attribute__((unused)) static id<OrgJodaConvertTypedStringConverter> OrgJodaConvertStringConvert_findAnyConverterWithIOSClass_(OrgJodaConvertStringConvert *self, IOSClass *cls);

__attribute__((unused)) static JavaLangReflectMethod *OrgJodaConvertStringConvert_findToStringMethodWithIOSClass_withNSString_(OrgJodaConvertStringConvert *self, IOSClass *cls, NSString *methodName);

__attribute__((unused)) static JavaLangReflectMethod *OrgJodaConvertStringConvert_findFromStringMethodWithIOSClass_withNSString_(OrgJodaConvertStringConvert *self, IOSClass *cls, NSString *methodName);

__attribute__((unused)) static JavaLangReflectConstructor *OrgJodaConvertStringConvert_findFromStringConstructorByTypeWithIOSClass_(OrgJodaConvertStringConvert *self, IOSClass *cls);

@interface OrgJodaConvertStringConvert_$1 : NSObject < OrgJodaConvertTypedStringConverter >

- (NSString *)convertToStringWithId:(id)object;

- (id)convertFromStringWithIOSClass:(IOSClass *)cls
                       withNSString:(NSString *)str;

- (IOSClass *)getEffectiveType;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgJodaConvertStringConvert_$1)

__attribute__((unused)) static void OrgJodaConvertStringConvert_$1_init(OrgJodaConvertStringConvert_$1 *self);

__attribute__((unused)) static OrgJodaConvertStringConvert_$1 *new_OrgJodaConvertStringConvert_$1_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgJodaConvertStringConvert_$1 *create_OrgJodaConvertStringConvert_$1_init();

J2OBJC_TYPE_LITERAL_HEADER(OrgJodaConvertStringConvert_$1)

@interface OrgJodaConvertStringConvert_$2 : NSObject < OrgJodaConvertTypedStringConverter > {
 @public
  id<OrgJodaConvertToStringConverter> val$toString_;
  id<OrgJodaConvertFromStringConverter> val$fromString_;
  IOSClass *val$cls_;
}

- (NSString *)convertToStringWithId:(id)object;

- (id)convertFromStringWithIOSClass:(IOSClass *)cls
                       withNSString:(NSString *)str;

- (IOSClass *)getEffectiveType;

- (instancetype)initWithOrgJodaConvertToStringConverter:(id<OrgJodaConvertToStringConverter>)capture$0
                  withOrgJodaConvertFromStringConverter:(id<OrgJodaConvertFromStringConverter>)capture$1
                                           withIOSClass:(IOSClass *)capture$2;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgJodaConvertStringConvert_$2)

J2OBJC_FIELD_SETTER(OrgJodaConvertStringConvert_$2, val$toString_, id<OrgJodaConvertToStringConverter>)
J2OBJC_FIELD_SETTER(OrgJodaConvertStringConvert_$2, val$fromString_, id<OrgJodaConvertFromStringConverter>)
J2OBJC_FIELD_SETTER(OrgJodaConvertStringConvert_$2, val$cls_, IOSClass *)

__attribute__((unused)) static void OrgJodaConvertStringConvert_$2_initWithOrgJodaConvertToStringConverter_withOrgJodaConvertFromStringConverter_withIOSClass_(OrgJodaConvertStringConvert_$2 *self, id<OrgJodaConvertToStringConverter> capture$0, id<OrgJodaConvertFromStringConverter> capture$1, IOSClass *capture$2);

__attribute__((unused)) static OrgJodaConvertStringConvert_$2 *new_OrgJodaConvertStringConvert_$2_initWithOrgJodaConvertToStringConverter_withOrgJodaConvertFromStringConverter_withIOSClass_(id<OrgJodaConvertToStringConverter> capture$0, id<OrgJodaConvertFromStringConverter> capture$1, IOSClass *capture$2) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgJodaConvertStringConvert_$2 *create_OrgJodaConvertStringConvert_$2_initWithOrgJodaConvertToStringConverter_withOrgJodaConvertFromStringConverter_withIOSClass_(id<OrgJodaConvertToStringConverter> capture$0, id<OrgJodaConvertFromStringConverter> capture$1, IOSClass *capture$2);

J2OBJC_TYPE_LITERAL_HEADER(OrgJodaConvertStringConvert_$2)

J2OBJC_INITIALIZED_DEFN(OrgJodaConvertStringConvert)

OrgJodaConvertStringConvert *OrgJodaConvertStringConvert_INSTANCE;

@implementation OrgJodaConvertStringConvert

+ (OrgJodaConvertStringConvert *)create {
  return OrgJodaConvertStringConvert_create();
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgJodaConvertStringConvert_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithBoolean:(jboolean)includeJdkConverters
withOrgJodaConvertStringConverterFactoryArray:(IOSObjectArray *)factories {
  OrgJodaConvertStringConvert_initWithBoolean_withOrgJodaConvertStringConverterFactoryArray_(self, includeJdkConverters, factories);
  return self;
}

- (void)tryRegisterWithNSString:(NSString *)className_
                   withNSString:(NSString *)fromStringMethodName {
  OrgJodaConvertStringConvert_tryRegisterWithNSString_withNSString_(self, className_, fromStringMethodName);
}

- (NSString *)convertToStringWithId:(id)object {
  if (object == nil) {
    return nil;
  }
  IOSClass *cls = [nil_chk(object) getClass];
  id<OrgJodaConvertStringConverter> conv = [self findConverterNoGenericsWithIOSClass:cls];
  return [((id<OrgJodaConvertStringConverter>) nil_chk(conv)) convertToStringWithId:object];
}

- (NSString *)convertToStringWithIOSClass:(IOSClass *)cls
                                   withId:(id)object {
  if (object == nil) {
    return nil;
  }
  id<OrgJodaConvertStringConverter> conv = [self findConverterNoGenericsWithIOSClass:cls];
  return [((id<OrgJodaConvertStringConverter>) nil_chk(conv)) convertToStringWithId:object];
}

- (id)convertFromStringWithIOSClass:(IOSClass *)cls
                       withNSString:(NSString *)str {
  if (str == nil) {
    return nil;
  }
  id<OrgJodaConvertStringConverter> conv = [self findConverterWithIOSClass:cls];
  return [((id<OrgJodaConvertStringConverter>) nil_chk(conv)) convertFromStringWithIOSClass:cls withNSString:str];
}

- (jboolean)isConvertibleWithIOSClass:(IOSClass *)cls {
  @try {
    return cls != nil && OrgJodaConvertStringConvert_findConverterQuietWithIOSClass_(self, cls) != nil;
  }
  @catch (JavaLangRuntimeException *ex) {
    return false;
  }
}

- (id<OrgJodaConvertStringConverter>)findConverterWithIOSClass:(IOSClass *)cls {
  return [self findTypedConverterWithIOSClass:cls];
}

- (id<OrgJodaConvertStringConverter>)findConverterNoGenericsWithIOSClass:(IOSClass *)cls {
  return [self findTypedConverterNoGenericsWithIOSClass:cls];
}

- (id<OrgJodaConvertTypedStringConverter>)findTypedConverterWithIOSClass:(IOSClass *)cls {
  id<OrgJodaConvertTypedStringConverter> conv = OrgJodaConvertStringConvert_findConverterQuietWithIOSClass_(self, cls);
  if (conv == nil) {
    @throw [new_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$@", @"No registered converter found: ", cls)) autorelease];
  }
  return conv;
}

- (id<OrgJodaConvertTypedStringConverter>)findTypedConverterNoGenericsWithIOSClass:(IOSClass *)cls {
  id<OrgJodaConvertTypedStringConverter> conv = OrgJodaConvertStringConvert_findConverterQuietWithIOSClass_(self, cls);
  if (conv == nil) {
    @throw [new_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$@", @"No registered converter found: ", cls)) autorelease];
  }
  return conv;
}

- (id<OrgJodaConvertTypedStringConverter>)findConverterQuietWithIOSClass:(IOSClass *)cls {
  return OrgJodaConvertStringConvert_findConverterQuietWithIOSClass_(self, cls);
}

- (id<OrgJodaConvertTypedStringConverter>)findAnyConverterWithIOSClass:(IOSClass *)cls {
  return OrgJodaConvertStringConvert_findAnyConverterWithIOSClass_(self, cls);
}

- (void)registerFactoryWithOrgJodaConvertStringConverterFactory:(id<OrgJodaConvertStringConverterFactory>)factory {
  if (factory == nil) {
    @throw [new_JavaLangIllegalArgumentException_initWithNSString_(@"Factory must not be null") autorelease];
  }
  if (self == OrgJodaConvertStringConvert_INSTANCE) {
    @throw [new_JavaLangIllegalStateException_initWithNSString_(@"Global singleton cannot be extended") autorelease];
  }
  [((JavaUtilConcurrentCopyOnWriteArrayList *) nil_chk(factories_)) addWithInt:0 withId:factory];
}

- (void)register__WithIOSClass:(IOSClass *)cls
withOrgJodaConvertStringConverter:(id<OrgJodaConvertStringConverter>)converter {
  if (cls == nil) {
    @throw [new_JavaLangIllegalArgumentException_initWithNSString_(@"Class must not be null") autorelease];
  }
  if (converter == nil) {
    @throw [new_JavaLangIllegalArgumentException_initWithNSString_(@"StringConverter must not be null") autorelease];
  }
  if (self == OrgJodaConvertStringConvert_INSTANCE) {
    @throw [new_JavaLangIllegalStateException_initWithNSString_(@"Global singleton cannot be extended") autorelease];
  }
  [((id<JavaUtilConcurrentConcurrentMap>) nil_chk(registered_)) putWithId:cls withId:OrgJodaConvertTypedAdapter_adaptWithIOSClass_withOrgJodaConvertStringConverter_(cls, converter)];
}

- (void)register__WithIOSClass:(IOSClass *)cls
withOrgJodaConvertToStringConverter:(id<OrgJodaConvertToStringConverter>)toString
withOrgJodaConvertFromStringConverter:(id<OrgJodaConvertFromStringConverter>)fromString {
  if (fromString == nil || toString == nil) {
    @throw [new_JavaLangIllegalArgumentException_initWithNSString_(@"Converters must not be null") autorelease];
  }
  [self register__WithIOSClass:cls withOrgJodaConvertStringConverter:[new_OrgJodaConvertStringConvert_$2_initWithOrgJodaConvertToStringConverter_withOrgJodaConvertFromStringConverter_withIOSClass_(toString, fromString, cls) autorelease]];
}

- (void)registerMethodsWithIOSClass:(IOSClass *)cls
                       withNSString:(NSString *)toStringMethodName
                       withNSString:(NSString *)fromStringMethodName {
  if (cls == nil) {
    @throw [new_JavaLangIllegalArgumentException_initWithNSString_(@"Class must not be null") autorelease];
  }
  if (toStringMethodName == nil || fromStringMethodName == nil) {
    @throw [new_JavaLangIllegalArgumentException_initWithNSString_(@"Method names must not be null") autorelease];
  }
  if (self == OrgJodaConvertStringConvert_INSTANCE) {
    @throw [new_JavaLangIllegalStateException_initWithNSString_(@"Global singleton cannot be extended") autorelease];
  }
  JavaLangReflectMethod *toString = OrgJodaConvertStringConvert_findToStringMethodWithIOSClass_withNSString_(self, cls, toStringMethodName);
  JavaLangReflectMethod *fromString = OrgJodaConvertStringConvert_findFromStringMethodWithIOSClass_withNSString_(self, cls, fromStringMethodName);
  OrgJodaConvertMethodsStringConverter *converter = [new_OrgJodaConvertMethodsStringConverter_initWithIOSClass_withJavaLangReflectMethod_withJavaLangReflectMethod_withIOSClass_(cls, toString, fromString, cls) autorelease];
  [((id<JavaUtilConcurrentConcurrentMap>) nil_chk(registered_)) putIfAbsentWithId:cls withId:converter];
}

- (void)registerMethodConstructorWithIOSClass:(IOSClass *)cls
                                 withNSString:(NSString *)toStringMethodName {
  if (cls == nil) {
    @throw [new_JavaLangIllegalArgumentException_initWithNSString_(@"Class must not be null") autorelease];
  }
  if (toStringMethodName == nil) {
    @throw [new_JavaLangIllegalArgumentException_initWithNSString_(@"Method name must not be null") autorelease];
  }
  if (self == OrgJodaConvertStringConvert_INSTANCE) {
    @throw [new_JavaLangIllegalStateException_initWithNSString_(@"Global singleton cannot be extended") autorelease];
  }
  JavaLangReflectMethod *toString = OrgJodaConvertStringConvert_findToStringMethodWithIOSClass_withNSString_(self, cls, toStringMethodName);
  JavaLangReflectConstructor *fromString = OrgJodaConvertStringConvert_findFromStringConstructorByTypeWithIOSClass_(self, cls);
  OrgJodaConvertMethodConstructorStringConverter *converter = [new_OrgJodaConvertMethodConstructorStringConverter_initWithIOSClass_withJavaLangReflectMethod_withJavaLangReflectConstructor_(cls, toString, fromString) autorelease];
  [((id<JavaUtilConcurrentConcurrentMap>) nil_chk(registered_)) putIfAbsentWithId:cls withId:converter];
}

- (JavaLangReflectMethod *)findToStringMethodWithIOSClass:(IOSClass *)cls
                                             withNSString:(NSString *)methodName {
  return OrgJodaConvertStringConvert_findToStringMethodWithIOSClass_withNSString_(self, cls, methodName);
}

- (JavaLangReflectMethod *)findFromStringMethodWithIOSClass:(IOSClass *)cls
                                               withNSString:(NSString *)methodName {
  return OrgJodaConvertStringConvert_findFromStringMethodWithIOSClass_withNSString_(self, cls, methodName);
}

- (JavaLangReflectConstructor *)findFromStringConstructorByTypeWithIOSClass:(IOSClass *)cls {
  return OrgJodaConvertStringConvert_findFromStringConstructorByTypeWithIOSClass_(self, cls);
}

- (NSString *)description {
  return [[self getClass] getSimpleName];
}

- (void)dealloc {
  RELEASE_(factories_);
  RELEASE_(registered_);
  [super dealloc];
}

+ (void)initialize {
  if (self == [OrgJodaConvertStringConvert class]) {
    JreStrongAssignAndConsume(&OrgJodaConvertStringConvert_INSTANCE, new_OrgJodaConvertStringConvert_init());
    JreStrongAssignAndConsume(&OrgJodaConvertStringConvert_CACHED_NULL, new_OrgJodaConvertStringConvert_$1_init());
    J2OBJC_SET_INITIALIZED(OrgJodaConvertStringConvert)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "create", NULL, "Lorg.joda.convert.StringConvert;", 0x9, NULL, NULL },
    { "init", "StringConvert", NULL, 0x1, NULL, NULL },
    { "initWithBoolean:withOrgJodaConvertStringConverterFactoryArray:", "StringConvert", NULL, 0x81, NULL, NULL },
    { "tryRegisterWithNSString:withNSString:", "tryRegister", "V", 0x2, NULL, NULL },
    { "convertToStringWithId:", "convertToString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "convertToStringWithIOSClass:withId:", "convertToString", "Ljava.lang.String;", 0x1, NULL, "(Ljava/lang/Class<*>;Ljava/lang/Object;)Ljava/lang/String;" },
    { "convertFromStringWithIOSClass:withNSString:", "convertFromString", "TT;", 0x1, NULL, "<T:Ljava/lang/Object;>(Ljava/lang/Class<TT;>;Ljava/lang/String;)TT;" },
    { "isConvertibleWithIOSClass:", "isConvertible", "Z", 0x1, NULL, "(Ljava/lang/Class<*>;)Z" },
    { "findConverterWithIOSClass:", "findConverter", "Lorg.joda.convert.StringConverter;", 0x1, NULL, "<T:Ljava/lang/Object;>(Ljava/lang/Class<TT;>;)Lorg/joda/convert/StringConverter<TT;>;" },
    { "findConverterNoGenericsWithIOSClass:", "findConverterNoGenerics", "Lorg.joda.convert.StringConverter;", 0x1, NULL, "(Ljava/lang/Class<*>;)Lorg/joda/convert/StringConverter<Ljava/lang/Object;>;" },
    { "findTypedConverterWithIOSClass:", "findTypedConverter", "Lorg.joda.convert.TypedStringConverter;", 0x1, NULL, "<T:Ljava/lang/Object;>(Ljava/lang/Class<TT;>;)Lorg/joda/convert/TypedStringConverter<TT;>;" },
    { "findTypedConverterNoGenericsWithIOSClass:", "findTypedConverterNoGenerics", "Lorg.joda.convert.TypedStringConverter;", 0x1, NULL, "(Ljava/lang/Class<*>;)Lorg/joda/convert/TypedStringConverter<Ljava/lang/Object;>;" },
    { "findConverterQuietWithIOSClass:", "findConverterQuiet", "Lorg.joda.convert.TypedStringConverter;", 0x2, NULL, "<T:Ljava/lang/Object;>(Ljava/lang/Class<TT;>;)Lorg/joda/convert/TypedStringConverter<TT;>;" },
    { "findAnyConverterWithIOSClass:", "findAnyConverter", "Lorg.joda.convert.TypedStringConverter;", 0x2, NULL, "<T:Ljava/lang/Object;>(Ljava/lang/Class<TT;>;)Lorg/joda/convert/TypedStringConverter<TT;>;" },
    { "registerFactoryWithOrgJodaConvertStringConverterFactory:", "registerFactory", "V", 0x1, NULL, NULL },
    { "register__WithIOSClass:withOrgJodaConvertStringConverter:", "register", "V", 0x1, NULL, "<T:Ljava/lang/Object;>(Ljava/lang/Class<TT;>;Lorg/joda/convert/StringConverter<TT;>;)V" },
    { "register__WithIOSClass:withOrgJodaConvertToStringConverter:withOrgJodaConvertFromStringConverter:", "register", "V", 0x1, NULL, "<T:Ljava/lang/Object;>(Ljava/lang/Class<TT;>;Lorg/joda/convert/ToStringConverter<TT;>;Lorg/joda/convert/FromStringConverter<TT;>;)V" },
    { "registerMethodsWithIOSClass:withNSString:withNSString:", "registerMethods", "V", 0x1, NULL, "<T:Ljava/lang/Object;>(Ljava/lang/Class<TT;>;Ljava/lang/String;Ljava/lang/String;)V" },
    { "registerMethodConstructorWithIOSClass:withNSString:", "registerMethodConstructor", "V", 0x1, NULL, "<T:Ljava/lang/Object;>(Ljava/lang/Class<TT;>;Ljava/lang/String;)V" },
    { "findToStringMethodWithIOSClass:withNSString:", "findToStringMethod", "Ljava.lang.reflect.Method;", 0x2, NULL, "(Ljava/lang/Class<*>;Ljava/lang/String;)Ljava/lang/reflect/Method;" },
    { "findFromStringMethodWithIOSClass:withNSString:", "findFromStringMethod", "Ljava.lang.reflect.Method;", 0x2, NULL, "(Ljava/lang/Class<*>;Ljava/lang/String;)Ljava/lang/reflect/Method;" },
    { "findFromStringConstructorByTypeWithIOSClass:", "findFromStringConstructorByType", "Ljava.lang.reflect.Constructor;", 0x2, NULL, "<T:Ljava/lang/Object;>(Ljava/lang/Class<TT;>;)Ljava/lang/reflect/Constructor<TT;>;" },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "INSTANCE", "INSTANCE", 0x19, "Lorg.joda.convert.StringConvert;", &OrgJodaConvertStringConvert_INSTANCE, NULL, .constantValue.asLong = 0 },
    { "CACHED_NULL", "CACHED_NULL", 0x1a, "Lorg.joda.convert.TypedStringConverter;", &OrgJodaConvertStringConvert_CACHED_NULL, "Lorg/joda/convert/TypedStringConverter<*>;", .constantValue.asLong = 0 },
    { "factories_", NULL, 0x12, "Ljava.util.concurrent.CopyOnWriteArrayList;", NULL, "Ljava/util/concurrent/CopyOnWriteArrayList<Lorg/joda/convert/StringConverterFactory;>;", .constantValue.asLong = 0 },
    { "registered_", NULL, 0x12, "Ljava.util.concurrent.ConcurrentMap;", NULL, "Ljava/util/concurrent/ConcurrentMap<Ljava/lang/Class<*>;Lorg/joda/convert/TypedStringConverter<*>;>;", .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OrgJodaConvertStringConvert = { 2, "StringConvert", "org.joda.convert", NULL, 0x11, 23, methods, 4, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgJodaConvertStringConvert;
}

@end

OrgJodaConvertStringConvert *OrgJodaConvertStringConvert_create() {
  OrgJodaConvertStringConvert_initialize();
  return [new_OrgJodaConvertStringConvert_initWithBoolean_withOrgJodaConvertStringConverterFactoryArray_(true, [IOSObjectArray arrayWithObjects:(id[]){ JreLoadStatic(OrgJodaConvertFactoryNumericArrayStringConverterFactory, INSTANCE), JreLoadStatic(OrgJodaConvertFactoryNumericObjectArrayStringConverterFactory, INSTANCE), JreLoadStatic(OrgJodaConvertFactoryCharObjectArrayStringConverterFactory, INSTANCE), JreLoadStatic(OrgJodaConvertFactoryByteObjectArrayStringConverterFactory, INSTANCE), JreLoadStatic(OrgJodaConvertFactoryBooleanArrayStringConverterFactory, INSTANCE), JreLoadStatic(OrgJodaConvertFactoryBooleanObjectArrayStringConverterFactory, INSTANCE) } count:6 type:OrgJodaConvertStringConverterFactory_class_()]) autorelease];
}

void OrgJodaConvertStringConvert_init(OrgJodaConvertStringConvert *self) {
  OrgJodaConvertStringConvert_initWithBoolean_withOrgJodaConvertStringConverterFactoryArray_(self, true, [IOSObjectArray arrayWithLength:0 type:OrgJodaConvertStringConverterFactory_class_()]);
}

OrgJodaConvertStringConvert *new_OrgJodaConvertStringConvert_init() {
  OrgJodaConvertStringConvert *self = [OrgJodaConvertStringConvert alloc];
  OrgJodaConvertStringConvert_init(self);
  return self;
}

OrgJodaConvertStringConvert *create_OrgJodaConvertStringConvert_init() {
  OrgJodaConvertStringConvert *self = [[OrgJodaConvertStringConvert alloc] autorelease];
  OrgJodaConvertStringConvert_init(self);
  return self;
}

void OrgJodaConvertStringConvert_initWithBoolean_withOrgJodaConvertStringConverterFactoryArray_(OrgJodaConvertStringConvert *self, jboolean includeJdkConverters, IOSObjectArray *factories) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->factories_, new_JavaUtilConcurrentCopyOnWriteArrayList_init());
  JreStrongAssignAndConsume(&self->registered_, new_JavaUtilConcurrentConcurrentHashMap_init());
  if (factories == nil) {
    @throw [new_JavaLangIllegalArgumentException_initWithNSString_(@"StringConverterFactory array must not be null") autorelease];
  }
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(factories))->size_; i++) {
    if (IOSObjectArray_Get(factories, i) == nil) {
      @throw [new_JavaLangIllegalArgumentException_initWithNSString_(@"StringConverterFactory array must not contain a null element") autorelease];
    }
  }
  if (includeJdkConverters) {
    {
      IOSObjectArray *a__ = OrgJodaConvertJDKStringConverter_values();
      OrgJodaConvertJDKStringConverter * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
      OrgJodaConvertJDKStringConverter * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        OrgJodaConvertJDKStringConverter *conv = *b__++;
        [self->registered_ putWithId:[((OrgJodaConvertJDKStringConverter *) nil_chk(conv)) getType] withId:conv];
      }
    }
    [self->registered_ putWithId:JreLoadStatic(JavaLangBoolean, TYPE) withId:JreLoadEnum(OrgJodaConvertJDKStringConverter, BOOLEAN)];
    [self->registered_ putWithId:JreLoadStatic(JavaLangByte, TYPE) withId:JreLoadEnum(OrgJodaConvertJDKStringConverter, BYTE)];
    [self->registered_ putWithId:JreLoadStatic(JavaLangShort, TYPE) withId:JreLoadEnum(OrgJodaConvertJDKStringConverter, SHORT)];
    [self->registered_ putWithId:JreLoadStatic(JavaLangInteger, TYPE) withId:JreLoadEnum(OrgJodaConvertJDKStringConverter, INTEGER)];
    [self->registered_ putWithId:JreLoadStatic(JavaLangLong, TYPE) withId:JreLoadEnum(OrgJodaConvertJDKStringConverter, LONG)];
    [self->registered_ putWithId:JreLoadStatic(JavaLangFloat, TYPE) withId:JreLoadEnum(OrgJodaConvertJDKStringConverter, FLOAT)];
    [self->registered_ putWithId:JreLoadStatic(JavaLangDouble, TYPE) withId:JreLoadEnum(OrgJodaConvertJDKStringConverter, DOUBLE)];
    [self->registered_ putWithId:JreLoadStatic(JavaLangCharacter, TYPE) withId:JreLoadEnum(OrgJodaConvertJDKStringConverter, CHARACTER)];
    OrgJodaConvertStringConvert_tryRegisterWithNSString_withNSString_(self, @"java.time.Instant", @"parse");
    OrgJodaConvertStringConvert_tryRegisterWithNSString_withNSString_(self, @"java.time.Duration", @"parse");
    OrgJodaConvertStringConvert_tryRegisterWithNSString_withNSString_(self, @"java.time.LocalDate", @"parse");
    OrgJodaConvertStringConvert_tryRegisterWithNSString_withNSString_(self, @"java.time.LocalTime", @"parse");
    OrgJodaConvertStringConvert_tryRegisterWithNSString_withNSString_(self, @"java.time.LocalDateTime", @"parse");
    OrgJodaConvertStringConvert_tryRegisterWithNSString_withNSString_(self, @"java.time.OffsetTime", @"parse");
    OrgJodaConvertStringConvert_tryRegisterWithNSString_withNSString_(self, @"java.time.OffsetDateTime", @"parse");
    OrgJodaConvertStringConvert_tryRegisterWithNSString_withNSString_(self, @"java.time.ZonedDateTime", @"parse");
    OrgJodaConvertStringConvert_tryRegisterWithNSString_withNSString_(self, @"java.time.Year", @"parse");
    OrgJodaConvertStringConvert_tryRegisterWithNSString_withNSString_(self, @"java.time.YearMonth", @"parse");
    OrgJodaConvertStringConvert_tryRegisterWithNSString_withNSString_(self, @"java.time.MonthDay", @"parse");
    OrgJodaConvertStringConvert_tryRegisterWithNSString_withNSString_(self, @"java.time.Period", @"parse");
    OrgJodaConvertStringConvert_tryRegisterWithNSString_withNSString_(self, @"java.time.ZoneOffset", @"of");
    OrgJodaConvertStringConvert_tryRegisterWithNSString_withNSString_(self, @"java.time.ZoneId", @"of");
    OrgJodaConvertStringConvert_tryRegisterWithNSString_withNSString_(self, @"org.threeten.bp.Instant", @"parse");
    OrgJodaConvertStringConvert_tryRegisterWithNSString_withNSString_(self, @"org.threeten.bp.Duration", @"parse");
    OrgJodaConvertStringConvert_tryRegisterWithNSString_withNSString_(self, @"org.threeten.bp.LocalDate", @"parse");
    OrgJodaConvertStringConvert_tryRegisterWithNSString_withNSString_(self, @"org.threeten.bp.LocalTime", @"parse");
    OrgJodaConvertStringConvert_tryRegisterWithNSString_withNSString_(self, @"org.threeten.bp.LocalDateTime", @"parse");
    OrgJodaConvertStringConvert_tryRegisterWithNSString_withNSString_(self, @"org.threeten.bp.OffsetTime", @"parse");
    OrgJodaConvertStringConvert_tryRegisterWithNSString_withNSString_(self, @"org.threeten.bp.OffsetDateTime", @"parse");
    OrgJodaConvertStringConvert_tryRegisterWithNSString_withNSString_(self, @"org.threeten.bp.ZonedDateTime", @"parse");
    OrgJodaConvertStringConvert_tryRegisterWithNSString_withNSString_(self, @"org.threeten.bp.Year", @"parse");
    OrgJodaConvertStringConvert_tryRegisterWithNSString_withNSString_(self, @"org.threeten.bp.YearMonth", @"parse");
    OrgJodaConvertStringConvert_tryRegisterWithNSString_withNSString_(self, @"org.threeten.bp.MonthDay", @"parse");
    OrgJodaConvertStringConvert_tryRegisterWithNSString_withNSString_(self, @"org.threeten.bp.Period", @"parse");
    OrgJodaConvertStringConvert_tryRegisterWithNSString_withNSString_(self, @"org.threeten.bp.ZoneOffset", @"of");
    OrgJodaConvertStringConvert_tryRegisterWithNSString_withNSString_(self, @"org.threeten.bp.ZoneId", @"of");
    OrgJodaConvertStringConvert_tryRegisterWithNSString_withNSString_(self, @"javax.time.Instant", @"parse");
    OrgJodaConvertStringConvert_tryRegisterWithNSString_withNSString_(self, @"javax.time.Duration", @"parse");
    OrgJodaConvertStringConvert_tryRegisterWithNSString_withNSString_(self, @"javax.time.calendar.LocalDate", @"parse");
    OrgJodaConvertStringConvert_tryRegisterWithNSString_withNSString_(self, @"javax.time.calendar.LocalTime", @"parse");
    OrgJodaConvertStringConvert_tryRegisterWithNSString_withNSString_(self, @"javax.time.calendar.LocalDateTime", @"parse");
    OrgJodaConvertStringConvert_tryRegisterWithNSString_withNSString_(self, @"javax.time.calendar.OffsetDate", @"parse");
    OrgJodaConvertStringConvert_tryRegisterWithNSString_withNSString_(self, @"javax.time.calendar.OffsetTime", @"parse");
    OrgJodaConvertStringConvert_tryRegisterWithNSString_withNSString_(self, @"javax.time.calendar.OffsetDateTime", @"parse");
    OrgJodaConvertStringConvert_tryRegisterWithNSString_withNSString_(self, @"javax.time.calendar.ZonedDateTime", @"parse");
    OrgJodaConvertStringConvert_tryRegisterWithNSString_withNSString_(self, @"javax.time.calendar.Year", @"parse");
    OrgJodaConvertStringConvert_tryRegisterWithNSString_withNSString_(self, @"javax.time.calendar.YearMonth", @"parse");
    OrgJodaConvertStringConvert_tryRegisterWithNSString_withNSString_(self, @"javax.time.calendar.MonthDay", @"parse");
    OrgJodaConvertStringConvert_tryRegisterWithNSString_withNSString_(self, @"javax.time.calendar.Period", @"parse");
    OrgJodaConvertStringConvert_tryRegisterWithNSString_withNSString_(self, @"javax.time.calendar.ZoneOffset", @"of");
    OrgJodaConvertStringConvert_tryRegisterWithNSString_withNSString_(self, @"javax.time.calendar.ZoneId", @"of");
    OrgJodaConvertStringConvert_tryRegisterWithNSString_withNSString_(self, @"javax.time.calendar.TimeZone", @"of");
  }
  if (factories->size_ > 0) {
    [self->factories_ addAllWithJavaUtilCollection:JavaUtilArrays_asListWithNSObjectArray_(factories)];
  }
  [self->factories_ addWithId:JreLoadStatic(OrgJodaConvertAnnotationStringConverterFactory, INSTANCE)];
  if (includeJdkConverters) {
    [self->factories_ addWithId:JreLoadStatic(OrgJodaConvertEnumStringConverterFactory, INSTANCE)];
  }
}

OrgJodaConvertStringConvert *new_OrgJodaConvertStringConvert_initWithBoolean_withOrgJodaConvertStringConverterFactoryArray_(jboolean includeJdkConverters, IOSObjectArray *factories) {
  OrgJodaConvertStringConvert *self = [OrgJodaConvertStringConvert alloc];
  OrgJodaConvertStringConvert_initWithBoolean_withOrgJodaConvertStringConverterFactoryArray_(self, includeJdkConverters, factories);
  return self;
}

OrgJodaConvertStringConvert *create_OrgJodaConvertStringConvert_initWithBoolean_withOrgJodaConvertStringConverterFactoryArray_(jboolean includeJdkConverters, IOSObjectArray *factories) {
  OrgJodaConvertStringConvert *self = [[OrgJodaConvertStringConvert alloc] autorelease];
  OrgJodaConvertStringConvert_initWithBoolean_withOrgJodaConvertStringConverterFactoryArray_(self, includeJdkConverters, factories);
  return self;
}

void OrgJodaConvertStringConvert_tryRegisterWithNSString_withNSString_(OrgJodaConvertStringConvert *self, NSString *className_, NSString *fromStringMethodName) {
  @try {
    IOSClass *cls = [((JavaLangClassLoader *) nil_chk([[self getClass] getClassLoader])) loadClassWithNSString:className_];
    [self registerMethodsWithIOSClass:cls withNSString:@"toString" withNSString:fromStringMethodName];
  }
  @catch (JavaLangException *ex) {
  }
}

id<OrgJodaConvertTypedStringConverter> OrgJodaConvertStringConvert_findConverterQuietWithIOSClass_(OrgJodaConvertStringConvert *self, IOSClass *cls) {
  if (cls == nil) {
    @throw [new_JavaLangIllegalArgumentException_initWithNSString_(@"Class must not be null") autorelease];
  }
  id<OrgJodaConvertTypedStringConverter> conv = [((id<JavaUtilConcurrentConcurrentMap>) nil_chk(self->registered_)) getWithId:cls];
  if (conv == OrgJodaConvertStringConvert_CACHED_NULL) {
    return nil;
  }
  if (conv == nil) {
    @try {
      conv = OrgJodaConvertStringConvert_findAnyConverterWithIOSClass_(self, cls);
    }
    @catch (JavaLangRuntimeException *ex) {
      [self->registered_ putIfAbsentWithId:cls withId:OrgJodaConvertStringConvert_CACHED_NULL];
      @throw ex;
    }
    if (conv == nil) {
      [self->registered_ putIfAbsentWithId:cls withId:OrgJodaConvertStringConvert_CACHED_NULL];
      return nil;
    }
    [self->registered_ putIfAbsentWithId:cls withId:conv];
  }
  return conv;
}

id<OrgJodaConvertTypedStringConverter> OrgJodaConvertStringConvert_findAnyConverterWithIOSClass_(OrgJodaConvertStringConvert *self, IOSClass *cls) {
  id<OrgJodaConvertTypedStringConverter> conv = nil;
  IOSClass *loopCls = [((IOSClass *) nil_chk(cls)) getSuperclass];
  while (loopCls != nil && conv == nil) {
    conv = [((id<JavaUtilConcurrentConcurrentMap>) nil_chk(self->registered_)) getWithId:loopCls];
    if (conv != nil && conv != OrgJodaConvertStringConvert_CACHED_NULL) {
      return conv;
    }
    loopCls = [((IOSClass *) nil_chk(loopCls)) getSuperclass];
  }
  {
    IOSObjectArray *a__ = [cls getInterfaces];
    IOSClass * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    IOSClass * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      IOSClass *loopIfc = *b__++;
      conv = [((id<JavaUtilConcurrentConcurrentMap>) nil_chk(self->registered_)) getWithId:loopIfc];
      if (conv != nil && conv != OrgJodaConvertStringConvert_CACHED_NULL) {
        return conv;
      }
    }
  }
  for (id<OrgJodaConvertStringConverterFactory> __strong factory in nil_chk(self->factories_)) {
    id<OrgJodaConvertStringConverter> factoryConv = [((id<OrgJodaConvertStringConverterFactory>) nil_chk(factory)) findConverterWithIOSClass:cls];
    if (factoryConv != nil) {
      return OrgJodaConvertTypedAdapter_adaptWithIOSClass_withOrgJodaConvertStringConverter_(cls, factoryConv);
    }
  }
  return nil;
}

JavaLangReflectMethod *OrgJodaConvertStringConvert_findToStringMethodWithIOSClass_withNSString_(OrgJodaConvertStringConvert *self, IOSClass *cls, NSString *methodName) {
  JavaLangReflectMethod *m;
  @try {
    m = [((IOSClass *) nil_chk(cls)) getMethod:methodName parameterTypes:[IOSObjectArray arrayWithLength:0 type:IOSClass_class_()]];
  }
  @catch (JavaLangNoSuchMethodException *ex) {
    @throw [new_JavaLangIllegalArgumentException_initWithNSException_(ex) autorelease];
  }
  if (JavaLangReflectModifier_isStaticWithInt_([((JavaLangReflectMethod *) nil_chk(m)) getModifiers])) {
    @throw [new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$", @"Method must not be static: ", methodName)) autorelease];
  }
  return m;
}

JavaLangReflectMethod *OrgJodaConvertStringConvert_findFromStringMethodWithIOSClass_withNSString_(OrgJodaConvertStringConvert *self, IOSClass *cls, NSString *methodName) {
  JavaLangReflectMethod *m;
  @try {
    m = [((IOSClass *) nil_chk(cls)) getMethod:methodName parameterTypes:[IOSObjectArray arrayWithObjects:(id[]){ NSString_class_() } count:1 type:IOSClass_class_()]];
  }
  @catch (JavaLangNoSuchMethodException *ex) {
    @try {
      m = [((IOSClass *) nil_chk(cls)) getMethod:methodName parameterTypes:[IOSObjectArray arrayWithObjects:(id[]){ JavaLangCharSequence_class_() } count:1 type:IOSClass_class_()]];
    }
    @catch (JavaLangNoSuchMethodException *ex2) {
      @throw [new_JavaLangIllegalArgumentException_initWithNSString_withNSException_(@"Method not found", ex2) autorelease];
    }
  }
  if (JavaLangReflectModifier_isStaticWithInt_([((JavaLangReflectMethod *) nil_chk(m)) getModifiers]) == false) {
    @throw [new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$", @"Method must be static: ", methodName)) autorelease];
  }
  return m;
}

JavaLangReflectConstructor *OrgJodaConvertStringConvert_findFromStringConstructorByTypeWithIOSClass_(OrgJodaConvertStringConvert *self, IOSClass *cls) {
  @try {
    return [((IOSClass *) nil_chk(cls)) getDeclaredConstructor:[IOSObjectArray arrayWithObjects:(id[]){ NSString_class_() } count:1 type:IOSClass_class_()]];
  }
  @catch (JavaLangNoSuchMethodException *ex) {
    @try {
      return [((IOSClass *) nil_chk(cls)) getDeclaredConstructor:[IOSObjectArray arrayWithObjects:(id[]){ JavaLangCharSequence_class_() } count:1 type:IOSClass_class_()]];
    }
    @catch (JavaLangNoSuchMethodException *ex2) {
      @throw [new_JavaLangIllegalArgumentException_initWithNSString_withNSException_(@"Constructor not found", ex2) autorelease];
    }
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJodaConvertStringConvert)

@implementation OrgJodaConvertStringConvert_$1

- (NSString *)convertToStringWithId:(id)object {
  return nil;
}

- (id)convertFromStringWithIOSClass:(IOSClass *)cls
                       withNSString:(NSString *)str {
  return nil;
}

- (IOSClass *)getEffectiveType {
  return nil;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgJodaConvertStringConvert_$1_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "convertToStringWithId:", "convertToString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "convertFromStringWithIOSClass:withNSString:", "convertFromString", "Ljava.lang.Object;", 0x1, NULL, "(Ljava/lang/Class<+Ljava/lang/Object;>;Ljava/lang/String;)Ljava/lang/Object;" },
    { "getEffectiveType", NULL, "Ljava.lang.Class;", 0x1, NULL, "()Ljava/lang/Class<*>;" },
    { "init", "", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcClassInfo _OrgJodaConvertStringConvert_$1 = { 2, "", "org.joda.convert", "StringConvert", 0x8008, 4, methods, 0, NULL, 0, NULL, 0, NULL, NULL, "Ljava/lang/Object;Lorg/joda/convert/TypedStringConverter<Ljava/lang/Object;>;" };
  return &_OrgJodaConvertStringConvert_$1;
}

@end

void OrgJodaConvertStringConvert_$1_init(OrgJodaConvertStringConvert_$1 *self) {
  NSObject_init(self);
}

OrgJodaConvertStringConvert_$1 *new_OrgJodaConvertStringConvert_$1_init() {
  OrgJodaConvertStringConvert_$1 *self = [OrgJodaConvertStringConvert_$1 alloc];
  OrgJodaConvertStringConvert_$1_init(self);
  return self;
}

OrgJodaConvertStringConvert_$1 *create_OrgJodaConvertStringConvert_$1_init() {
  OrgJodaConvertStringConvert_$1 *self = [[OrgJodaConvertStringConvert_$1 alloc] autorelease];
  OrgJodaConvertStringConvert_$1_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJodaConvertStringConvert_$1)

@implementation OrgJodaConvertStringConvert_$2

- (NSString *)convertToStringWithId:(id)object {
  return [((id<OrgJodaConvertToStringConverter>) nil_chk(val$toString_)) convertToStringWithId:object];
}

- (id)convertFromStringWithIOSClass:(IOSClass *)cls
                       withNSString:(NSString *)str {
  return [((id<OrgJodaConvertFromStringConverter>) nil_chk(val$fromString_)) convertFromStringWithIOSClass:cls withNSString:str];
}

- (IOSClass *)getEffectiveType {
  return val$cls_;
}

- (instancetype)initWithOrgJodaConvertToStringConverter:(id<OrgJodaConvertToStringConverter>)capture$0
                  withOrgJodaConvertFromStringConverter:(id<OrgJodaConvertFromStringConverter>)capture$1
                                           withIOSClass:(IOSClass *)capture$2 {
  OrgJodaConvertStringConvert_$2_initWithOrgJodaConvertToStringConverter_withOrgJodaConvertFromStringConverter_withIOSClass_(self, capture$0, capture$1, capture$2);
  return self;
}

- (void)dealloc {
  RELEASE_(val$toString_);
  RELEASE_(val$fromString_);
  RELEASE_(val$cls_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "convertToStringWithId:", "convertToString", "Ljava.lang.String;", 0x1, NULL, "(TT;)Ljava/lang/String;" },
    { "convertFromStringWithIOSClass:withNSString:", "convertFromString", "TT;", 0x1, NULL, "(Ljava/lang/Class<+TT;>;Ljava/lang/String;)TT;" },
    { "getEffectiveType", NULL, "Ljava.lang.Class;", 0x1, NULL, "()Ljava/lang/Class<*>;" },
    { "initWithOrgJodaConvertToStringConverter:withOrgJodaConvertFromStringConverter:withIOSClass:", "", NULL, 0x0, NULL, "(Lorg/joda/convert/ToStringConverter<TT;>;Lorg/joda/convert/FromStringConverter<TT;>;Ljava/lang/Class<TT;>;)V" },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "val$toString_", NULL, 0x1012, "Lorg.joda.convert.ToStringConverter;", NULL, "Lorg/joda/convert/ToStringConverter<TT;>;", .constantValue.asLong = 0 },
    { "val$fromString_", NULL, 0x1012, "Lorg.joda.convert.FromStringConverter;", NULL, "Lorg/joda/convert/FromStringConverter<TT;>;", .constantValue.asLong = 0 },
    { "val$cls_", NULL, 0x1012, "Ljava.lang.Class;", NULL, "Ljava/lang/Class<TT;>;", .constantValue.asLong = 0 },
  };
  static const J2ObjCEnclosingMethodInfo enclosing_method = { "OrgJodaConvertStringConvert", "register__WithIOSClass:withOrgJodaConvertToStringConverter:withOrgJodaConvertFromStringConverter:" };
  static const J2ObjcClassInfo _OrgJodaConvertStringConvert_$2 = { 2, "", "org.joda.convert", "StringConvert", 0x8008, 4, methods, 3, fields, 0, NULL, 0, NULL, &enclosing_method, "Ljava/lang/Object;Lorg/joda/convert/TypedStringConverter<TT;>;" };
  return &_OrgJodaConvertStringConvert_$2;
}

@end

void OrgJodaConvertStringConvert_$2_initWithOrgJodaConvertToStringConverter_withOrgJodaConvertFromStringConverter_withIOSClass_(OrgJodaConvertStringConvert_$2 *self, id<OrgJodaConvertToStringConverter> capture$0, id<OrgJodaConvertFromStringConverter> capture$1, IOSClass *capture$2) {
  JreStrongAssign(&self->val$toString_, capture$0);
  JreStrongAssign(&self->val$fromString_, capture$1);
  JreStrongAssign(&self->val$cls_, capture$2);
  NSObject_init(self);
}

OrgJodaConvertStringConvert_$2 *new_OrgJodaConvertStringConvert_$2_initWithOrgJodaConvertToStringConverter_withOrgJodaConvertFromStringConverter_withIOSClass_(id<OrgJodaConvertToStringConverter> capture$0, id<OrgJodaConvertFromStringConverter> capture$1, IOSClass *capture$2) {
  OrgJodaConvertStringConvert_$2 *self = [OrgJodaConvertStringConvert_$2 alloc];
  OrgJodaConvertStringConvert_$2_initWithOrgJodaConvertToStringConverter_withOrgJodaConvertFromStringConverter_withIOSClass_(self, capture$0, capture$1, capture$2);
  return self;
}

OrgJodaConvertStringConvert_$2 *create_OrgJodaConvertStringConvert_$2_initWithOrgJodaConvertToStringConverter_withOrgJodaConvertFromStringConverter_withIOSClass_(id<OrgJodaConvertToStringConverter> capture$0, id<OrgJodaConvertFromStringConverter> capture$1, IOSClass *capture$2) {
  OrgJodaConvertStringConvert_$2 *self = [[OrgJodaConvertStringConvert_$2 alloc] autorelease];
  OrgJodaConvertStringConvert_$2_initWithOrgJodaConvertToStringConverter_withOrgJodaConvertFromStringConverter_withIOSClass_(self, capture$0, capture$1, capture$2);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJodaConvertStringConvert_$2)
