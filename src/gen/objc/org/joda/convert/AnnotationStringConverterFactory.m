//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/andrefonseca/Documents/PodsFolders/joda-convert/src/main/java/org/joda/convert/AnnotationStringConverterFactory.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/CharSequence.h"
#include "java/lang/Enum.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/NoSuchMethodException.h"
#include "java/lang/reflect/Constructor.h"
#include "java/lang/reflect/Method.h"
#include "org/joda/convert/AnnotationStringConverterFactory.h"
#include "org/joda/convert/FromString.h"
#include "org/joda/convert/FromStringFactory.h"
#include "org/joda/convert/MethodConstructorStringConverter.h"
#include "org/joda/convert/MethodsStringConverter.h"
#include "org/joda/convert/StringConverter.h"
#include "org/joda/convert/StringConverterFactory.h"
#include "org/joda/convert/ToString.h"

@interface OrgJodaConvertAnnotationStringConverterFactory ()

/*!
 @brief Restricted constructor.
 */
- (instancetype)init;

/*!
 @brief Finds a converter searching annotated.
 @param cls  the class to find a method for, not null
 @return the converter, not null
 @throws RuntimeException if none found
 */
- (id<OrgJodaConvertStringConverter>)findAnnotatedConverterWithIOSClass:(IOSClass *)cls;

/*!
 @brief Finds the conversion method.
 @param cls  the class to find a method for, not null
 @return the method to call, null means use <code>toString</code>
 @throws RuntimeException if invalid
 */
- (JavaLangReflectMethod *)findToStringMethodWithIOSClass:(IOSClass *)cls;

/*!
 @brief Finds the conversion method.
 @param cls  the class to find a method for, not null
 @param toString  the toString method, not null
 @return the method to call, null means none found
 @throws RuntimeException if invalid
 */
- (OrgJodaConvertMethodConstructorStringConverter *)findFromStringConstructorWithIOSClass:(IOSClass *)cls
                                                                withJavaLangReflectMethod:(JavaLangReflectMethod *)toString;

/*!
 @brief Finds the conversion method.
 @param cls  the class to find a method for, not null
 @param toString  the toString method, not null
 @param searchSuperclasses  whether to search superclasses
 @return the method to call, null means not found
 @throws RuntimeException if invalid
 */
- (OrgJodaConvertMethodsStringConverter *)findFromStringMethodWithIOSClass:(IOSClass *)cls
                                                 withJavaLangReflectMethod:(JavaLangReflectMethod *)toString
                                                               withBoolean:(jboolean)searchSuperclasses;

/*!
 @brief Finds the conversion method.
 @param cls  the class to find a method for, not null
 @param matched  the matched method, may be null
 @return the method to call, null means not found
 @throws RuntimeException if invalid
 */
- (JavaLangReflectMethod *)findFromStringWithIOSClass:(IOSClass *)cls;

- (IOSClass *)eliminateEnumSubclassWithIOSClass:(IOSClass *)cls;

@end

__attribute__((unused)) static void OrgJodaConvertAnnotationStringConverterFactory_init(OrgJodaConvertAnnotationStringConverterFactory *self);

__attribute__((unused)) static OrgJodaConvertAnnotationStringConverterFactory *new_OrgJodaConvertAnnotationStringConverterFactory_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgJodaConvertAnnotationStringConverterFactory *create_OrgJodaConvertAnnotationStringConverterFactory_init();

__attribute__((unused)) static id<OrgJodaConvertStringConverter> OrgJodaConvertAnnotationStringConverterFactory_findAnnotatedConverterWithIOSClass_(OrgJodaConvertAnnotationStringConverterFactory *self, IOSClass *cls);

__attribute__((unused)) static JavaLangReflectMethod *OrgJodaConvertAnnotationStringConverterFactory_findToStringMethodWithIOSClass_(OrgJodaConvertAnnotationStringConverterFactory *self, IOSClass *cls);

__attribute__((unused)) static OrgJodaConvertMethodConstructorStringConverter *OrgJodaConvertAnnotationStringConverterFactory_findFromStringConstructorWithIOSClass_withJavaLangReflectMethod_(OrgJodaConvertAnnotationStringConverterFactory *self, IOSClass *cls, JavaLangReflectMethod *toString);

__attribute__((unused)) static OrgJodaConvertMethodsStringConverter *OrgJodaConvertAnnotationStringConverterFactory_findFromStringMethodWithIOSClass_withJavaLangReflectMethod_withBoolean_(OrgJodaConvertAnnotationStringConverterFactory *self, IOSClass *cls, JavaLangReflectMethod *toString, jboolean searchSuperclasses);

__attribute__((unused)) static JavaLangReflectMethod *OrgJodaConvertAnnotationStringConverterFactory_findFromStringWithIOSClass_(OrgJodaConvertAnnotationStringConverterFactory *self, IOSClass *cls);

__attribute__((unused)) static IOSClass *OrgJodaConvertAnnotationStringConverterFactory_eliminateEnumSubclassWithIOSClass_(OrgJodaConvertAnnotationStringConverterFactory *self, IOSClass *cls);

J2OBJC_INITIALIZED_DEFN(OrgJodaConvertAnnotationStringConverterFactory)

id<OrgJodaConvertStringConverterFactory> OrgJodaConvertAnnotationStringConverterFactory_INSTANCE;

@implementation OrgJodaConvertAnnotationStringConverterFactory

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgJodaConvertAnnotationStringConverterFactory_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id<OrgJodaConvertStringConverter>)findConverterWithIOSClass:(IOSClass *)cls {
  return OrgJodaConvertAnnotationStringConverterFactory_findAnnotatedConverterWithIOSClass_(self, cls);
}

- (id<OrgJodaConvertStringConverter>)findAnnotatedConverterWithIOSClass:(IOSClass *)cls {
  return OrgJodaConvertAnnotationStringConverterFactory_findAnnotatedConverterWithIOSClass_(self, cls);
}

- (JavaLangReflectMethod *)findToStringMethodWithIOSClass:(IOSClass *)cls {
  return OrgJodaConvertAnnotationStringConverterFactory_findToStringMethodWithIOSClass_(self, cls);
}

- (OrgJodaConvertMethodConstructorStringConverter *)findFromStringConstructorWithIOSClass:(IOSClass *)cls
                                                                withJavaLangReflectMethod:(JavaLangReflectMethod *)toString {
  return OrgJodaConvertAnnotationStringConverterFactory_findFromStringConstructorWithIOSClass_withJavaLangReflectMethod_(self, cls, toString);
}

- (OrgJodaConvertMethodsStringConverter *)findFromStringMethodWithIOSClass:(IOSClass *)cls
                                                 withJavaLangReflectMethod:(JavaLangReflectMethod *)toString
                                                               withBoolean:(jboolean)searchSuperclasses {
  return OrgJodaConvertAnnotationStringConverterFactory_findFromStringMethodWithIOSClass_withJavaLangReflectMethod_withBoolean_(self, cls, toString, searchSuperclasses);
}

- (JavaLangReflectMethod *)findFromStringWithIOSClass:(IOSClass *)cls {
  return OrgJodaConvertAnnotationStringConverterFactory_findFromStringWithIOSClass_(self, cls);
}

- (IOSClass *)eliminateEnumSubclassWithIOSClass:(IOSClass *)cls {
  return OrgJodaConvertAnnotationStringConverterFactory_eliminateEnumSubclassWithIOSClass_(self, cls);
}

- (NSString *)description {
  return [[self getClass] getSimpleName];
}

+ (void)initialize {
  if (self == [OrgJodaConvertAnnotationStringConverterFactory class]) {
    JreStrongAssignAndConsume(&OrgJodaConvertAnnotationStringConverterFactory_INSTANCE, new_OrgJodaConvertAnnotationStringConverterFactory_init());
    J2OBJC_SET_INITIALIZED(OrgJodaConvertAnnotationStringConverterFactory)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "AnnotationStringConverterFactory", NULL, 0x2, NULL, NULL },
    { "findConverterWithIOSClass:", "findConverter", "Lorg.joda.convert.StringConverter;", 0x1, NULL, "(Ljava/lang/Class<*>;)Lorg/joda/convert/StringConverter<*>;" },
    { "findAnnotatedConverterWithIOSClass:", "findAnnotatedConverter", "Lorg.joda.convert.StringConverter;", 0x2, NULL, "<T:Ljava/lang/Object;>(Ljava/lang/Class<TT;>;)Lorg/joda/convert/StringConverter<TT;>;" },
    { "findToStringMethodWithIOSClass:", "findToStringMethod", "Ljava.lang.reflect.Method;", 0x2, NULL, "(Ljava/lang/Class<*>;)Ljava/lang/reflect/Method;" },
    { "findFromStringConstructorWithIOSClass:withJavaLangReflectMethod:", "findFromStringConstructor", "Lorg.joda.convert.MethodConstructorStringConverter;", 0x2, NULL, "<T:Ljava/lang/Object;>(Ljava/lang/Class<TT;>;Ljava/lang/reflect/Method;)Lorg/joda/convert/MethodConstructorStringConverter<TT;>;" },
    { "findFromStringMethodWithIOSClass:withJavaLangReflectMethod:withBoolean:", "findFromStringMethod", "Lorg.joda.convert.MethodsStringConverter;", 0x2, NULL, "<T:Ljava/lang/Object;>(Ljava/lang/Class<TT;>;Ljava/lang/reflect/Method;Z)Lorg/joda/convert/MethodsStringConverter<TT;>;" },
    { "findFromStringWithIOSClass:", "findFromString", "Ljava.lang.reflect.Method;", 0x2, NULL, "(Ljava/lang/Class<*>;)Ljava/lang/reflect/Method;" },
    { "eliminateEnumSubclassWithIOSClass:", "eliminateEnumSubclass", "Ljava.lang.Class;", 0x2, NULL, "(Ljava/lang/Class<*>;)Ljava/lang/Class<*>;" },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "INSTANCE", "INSTANCE", 0x18, "Lorg.joda.convert.StringConverterFactory;", &OrgJodaConvertAnnotationStringConverterFactory_INSTANCE, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OrgJodaConvertAnnotationStringConverterFactory = { 2, "AnnotationStringConverterFactory", "org.joda.convert", NULL, 0x10, 9, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgJodaConvertAnnotationStringConverterFactory;
}

@end

void OrgJodaConvertAnnotationStringConverterFactory_init(OrgJodaConvertAnnotationStringConverterFactory *self) {
  NSObject_init(self);
}

OrgJodaConvertAnnotationStringConverterFactory *new_OrgJodaConvertAnnotationStringConverterFactory_init() {
  OrgJodaConvertAnnotationStringConverterFactory *self = [OrgJodaConvertAnnotationStringConverterFactory alloc];
  OrgJodaConvertAnnotationStringConverterFactory_init(self);
  return self;
}

OrgJodaConvertAnnotationStringConverterFactory *create_OrgJodaConvertAnnotationStringConverterFactory_init() {
  OrgJodaConvertAnnotationStringConverterFactory *self = [[OrgJodaConvertAnnotationStringConverterFactory alloc] autorelease];
  OrgJodaConvertAnnotationStringConverterFactory_init(self);
  return self;
}

id<OrgJodaConvertStringConverter> OrgJodaConvertAnnotationStringConverterFactory_findAnnotatedConverterWithIOSClass_(OrgJodaConvertAnnotationStringConverterFactory *self, IOSClass *cls) {
  JavaLangReflectMethod *toString = OrgJodaConvertAnnotationStringConverterFactory_findToStringMethodWithIOSClass_(self, cls);
  if (toString == nil) {
    return nil;
  }
  OrgJodaConvertMethodConstructorStringConverter *con = OrgJodaConvertAnnotationStringConverterFactory_findFromStringConstructorWithIOSClass_withJavaLangReflectMethod_(self, cls, toString);
  OrgJodaConvertMethodsStringConverter *mth = OrgJodaConvertAnnotationStringConverterFactory_findFromStringMethodWithIOSClass_withJavaLangReflectMethod_withBoolean_(self, cls, toString, con == nil);
  if (con == nil && mth == nil) {
    @throw [new_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$$", @"Class annotated with @ToString but not with @FromString: ", [((IOSClass *) nil_chk(cls)) getName])) autorelease];
  }
  if (con != nil && mth != nil) {
    @throw [new_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$$", @"Both method and constructor are annotated with @FromString: ", [((IOSClass *) nil_chk(cls)) getName])) autorelease];
  }
  return (con != nil ? con : mth);
}

JavaLangReflectMethod *OrgJodaConvertAnnotationStringConverterFactory_findToStringMethodWithIOSClass_(OrgJodaConvertAnnotationStringConverterFactory *self, IOSClass *cls) {
  JavaLangReflectMethod *matched = nil;
  IOSClass *loopCls = cls;
  while (loopCls != nil && matched == nil) {
    IOSObjectArray *methods = [((IOSClass *) nil_chk(loopCls)) getDeclaredMethods];
    {
      IOSObjectArray *a__ = methods;
      JavaLangReflectMethod * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
      JavaLangReflectMethod * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        JavaLangReflectMethod *method = *b__++;
        id<OrgJodaConvertToString> toString = [((JavaLangReflectMethod *) nil_chk(method)) getAnnotationWithIOSClass:OrgJodaConvertToString_class_()];
        if (toString != nil) {
          if (matched != nil) {
            @throw [new_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$$", @"Two methods are annotated with @ToString: ", [((IOSClass *) nil_chk(cls)) getName])) autorelease];
          }
          matched = method;
        }
      }
    }
    loopCls = [loopCls getSuperclass];
  }
  if (matched == nil) {
    {
      IOSObjectArray *a__ = [((IOSClass *) nil_chk(OrgJodaConvertAnnotationStringConverterFactory_eliminateEnumSubclassWithIOSClass_(self, cls))) getInterfaces];
      IOSClass * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
      IOSClass * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        IOSClass *loopIfc = *b__++;
        IOSObjectArray *methods = [((IOSClass *) nil_chk(loopIfc)) getDeclaredMethods];
        {
          IOSObjectArray *a__ = methods;
          JavaLangReflectMethod * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
          JavaLangReflectMethod * const *e__ = b__ + a__->size_;
          while (b__ < e__) {
            JavaLangReflectMethod *method = *b__++;
            id<OrgJodaConvertToString> toString = [((JavaLangReflectMethod *) nil_chk(method)) getAnnotationWithIOSClass:OrgJodaConvertToString_class_()];
            if (toString != nil) {
              if (matched != nil) {
                @throw [new_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$$", @"Two methods are annotated with @ToString on interfaces: ", [((IOSClass *) nil_chk(cls)) getName])) autorelease];
              }
              matched = method;
            }
          }
        }
      }
    }
  }
  return matched;
}

OrgJodaConvertMethodConstructorStringConverter *OrgJodaConvertAnnotationStringConverterFactory_findFromStringConstructorWithIOSClass_withJavaLangReflectMethod_(OrgJodaConvertAnnotationStringConverterFactory *self, IOSClass *cls, JavaLangReflectMethod *toString) {
  JavaLangReflectConstructor *con;
  @try {
    con = [((IOSClass *) nil_chk(cls)) getDeclaredConstructor:[IOSObjectArray arrayWithObjects:(id[]){ NSString_class_() } count:1 type:IOSClass_class_()]];
  }
  @catch (JavaLangNoSuchMethodException *ex) {
    @try {
      con = [((IOSClass *) nil_chk(cls)) getDeclaredConstructor:[IOSObjectArray arrayWithObjects:(id[]){ JavaLangCharSequence_class_() } count:1 type:IOSClass_class_()]];
    }
    @catch (JavaLangNoSuchMethodException *ex2) {
      return nil;
    }
  }
  id<OrgJodaConvertFromString> fromString = [((JavaLangReflectConstructor *) nil_chk(con)) getAnnotationWithIOSClass:OrgJodaConvertFromString_class_()];
  if (fromString == nil) {
    return nil;
  }
  return [new_OrgJodaConvertMethodConstructorStringConverter_initWithIOSClass_withJavaLangReflectMethod_withJavaLangReflectConstructor_(cls, toString, con) autorelease];
}

OrgJodaConvertMethodsStringConverter *OrgJodaConvertAnnotationStringConverterFactory_findFromStringMethodWithIOSClass_withJavaLangReflectMethod_withBoolean_(OrgJodaConvertAnnotationStringConverterFactory *self, IOSClass *cls, JavaLangReflectMethod *toString, jboolean searchSuperclasses) {
  IOSClass *loopCls = cls;
  while (loopCls != nil) {
    JavaLangReflectMethod *fromString = OrgJodaConvertAnnotationStringConverterFactory_findFromStringWithIOSClass_(self, loopCls);
    if (fromString != nil) {
      return [new_OrgJodaConvertMethodsStringConverter_initWithIOSClass_withJavaLangReflectMethod_withJavaLangReflectMethod_withIOSClass_(cls, toString, fromString, loopCls) autorelease];
    }
    if (searchSuperclasses == false) {
      break;
    }
    loopCls = [((IOSClass *) nil_chk(loopCls)) getSuperclass];
  }
  OrgJodaConvertMethodsStringConverter *matched = nil;
  if (searchSuperclasses) {
    {
      IOSObjectArray *a__ = [((IOSClass *) nil_chk(OrgJodaConvertAnnotationStringConverterFactory_eliminateEnumSubclassWithIOSClass_(self, cls))) getInterfaces];
      IOSClass * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
      IOSClass * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        IOSClass *loopIfc = *b__++;
        JavaLangReflectMethod *fromString = OrgJodaConvertAnnotationStringConverterFactory_findFromStringWithIOSClass_(self, loopIfc);
        if (fromString != nil) {
          if (matched != nil) {
            @throw [new_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$$", @"Two different interfaces are annotated with @FromString or @FromStringFactory: ", [((IOSClass *) nil_chk(cls)) getName])) autorelease];
          }
          matched = [new_OrgJodaConvertMethodsStringConverter_initWithIOSClass_withJavaLangReflectMethod_withJavaLangReflectMethod_withIOSClass_(cls, toString, fromString, loopIfc) autorelease];
        }
      }
    }
  }
  return matched;
}

JavaLangReflectMethod *OrgJodaConvertAnnotationStringConverterFactory_findFromStringWithIOSClass_(OrgJodaConvertAnnotationStringConverterFactory *self, IOSClass *cls) {
  IOSObjectArray *methods = [((IOSClass *) nil_chk(cls)) getDeclaredMethods];
  JavaLangReflectMethod *matched = nil;
  {
    IOSObjectArray *a__ = methods;
    JavaLangReflectMethod * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    JavaLangReflectMethod * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      JavaLangReflectMethod *method = *b__++;
      id<OrgJodaConvertFromString> fromString = [((JavaLangReflectMethod *) nil_chk(method)) getAnnotationWithIOSClass:OrgJodaConvertFromString_class_()];
      if (fromString != nil) {
        if (matched != nil) {
          @throw [new_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$$", @"Two methods are annotated with @FromString: ", [cls getName])) autorelease];
        }
        matched = method;
      }
    }
  }
  id<OrgJodaConvertFromStringFactory> factory = [cls getAnnotationWithIOSClass:OrgJodaConvertFromStringFactory_class_()];
  if (factory != nil) {
    if (matched != nil) {
      @throw [new_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$$", @"Class annotated with @FromString and @FromStringFactory: ", [cls getName])) autorelease];
    }
    IOSObjectArray *factoryMethods = [((IOSClass *) nil_chk([factory factory])) getDeclaredMethods];
    {
      IOSObjectArray *a__ = factoryMethods;
      JavaLangReflectMethod * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
      JavaLangReflectMethod * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        JavaLangReflectMethod *method = *b__++;
        if ([cls isAssignableFrom:[((JavaLangReflectMethod *) nil_chk(method)) getReturnType]]) {
          id<OrgJodaConvertFromString> fromString = [method getAnnotationWithIOSClass:OrgJodaConvertFromString_class_()];
          if (fromString != nil) {
            if (matched != nil) {
              @throw [new_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$$", @"Two methods are annotated with @FromString on the factory: ", [((IOSClass *) nil_chk([factory factory])) getName])) autorelease];
            }
            matched = method;
          }
        }
      }
    }
  }
  return matched;
}

IOSClass *OrgJodaConvertAnnotationStringConverterFactory_eliminateEnumSubclassWithIOSClass_(OrgJodaConvertAnnotationStringConverterFactory *self, IOSClass *cls) {
  IOSClass *sup = [((IOSClass *) nil_chk(cls)) getSuperclass];
  if (sup != nil && [sup getSuperclass] == (id) JavaLangEnum_class_()) {
    return sup;
  }
  return cls;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJodaConvertAnnotationStringConverterFactory)
