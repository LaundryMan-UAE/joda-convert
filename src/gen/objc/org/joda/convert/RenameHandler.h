//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/nbransby/Documents/joda-convert/src/main/java/org/joda/convert/RenameHandler.java
//

#ifndef _OrgJodaConvertRenameHandler_H_
#define _OrgJodaConvertRenameHandler_H_

@class IOSClass;
@class JavaLangEnum;
@class JavaUtilConcurrentConcurrentHashMap;
@protocol JavaUtilMap;
@protocol JavaUtilSet;

#include "J2ObjC_header.h"

/**
 @brief A general purpose utility for registering renames.
 <p> This handles type and enum constant renames. For example, use as follows: <pre> RenameHandler.INSTANCE.renamedType("org.joda.OldName", NewName.class); RenameHandler.INSTANCE.renamedEnum("CORRECT", Status.VALID); RenameHandler.INSTANCE.renamedEnum("INCORRECT", Status.INVALID); </pre> The recommended usage is to edit the static singleton before using other classes. Editing a static is acceptable because renames are driven by bytecode which is static. <p> This class is thread-safe with concurrent caches.
 @since 1.6
 */
@interface OrgJodaConvertRenameHandler : NSObject {
}

/**
 @brief Creates an instance.
 <p> This is not normally used as the preferred option is to edit the singleton.
 @return a new instance, not null
 */
+ (OrgJodaConvertRenameHandler *)create;

/**
 @brief Register the fact that a type was renamed.
 @param oldName the old name of the type including the package name, not null
 @param currentValue the current type, not null
 */
- (void)renamedTypeWithNSString:(NSString *)oldName
                   withIOSClass:(IOSClass *)currentValue;

/**
 @brief Gets the map of renamed types.
 <p> An empty map is returned if there are no renames.
 @return a copy of the set of enum types with renames, not null
 */
- (id<JavaUtilMap>)getTypeRenames;

/**
 @brief Lookup a type from a name, handling renames.
 @param name the name of the type to lookup, not null
 @return the type, not null
 @throws ClassNotFoundException if the name is not a valid type
 */
- (IOSClass *)lookupTypeWithNSString:(NSString *)name;

/**
 @brief Register the fact that an enum constant was renamed.
 @param oldName the old name of the enum constant, not null
 @param currentValue the current enum constant, not null
 */
- (void)renamedEnumWithNSString:(NSString *)oldName
               withJavaLangEnum:(JavaLangEnum *)currentValue;

/**
 @brief Gets the set of enum types that have renames.
 <p> An empty set is returned if there are no renames.
 @return a copy of the set of enum types with renames, not null
 */
- (id<JavaUtilSet>)getEnumTypesWithRenames;

/**
 @brief Gets the map of renamed for an enum type.
 <p> An empty map is returned if there are no renames.
 @param type the enum type, not null
 @return a copy of the set of enum renames, not null
 */
- (id<JavaUtilMap>)getEnumRenamesWithIOSClass:(IOSClass *)type;

/**
 @brief Lookup an enum from a name, handling renames.
 @param < T > the type of the desired enum
 @param type the enum type, not null
 @param name the name of the enum to lookup, not null
 @return the enum value, not null
 @throws IllegalArgumentException if the name is not a valid enum constant
 */
- (id)lookupEnumWithIOSClass:(IOSClass *)type
                withNSString:(NSString *)name;

- (NSString *)description;

@end

FOUNDATION_EXPORT BOOL OrgJodaConvertRenameHandler_initialized;
J2OBJC_STATIC_INIT(OrgJodaConvertRenameHandler)

CF_EXTERN_C_BEGIN

FOUNDATION_EXPORT OrgJodaConvertRenameHandler *OrgJodaConvertRenameHandler_create();

FOUNDATION_EXPORT OrgJodaConvertRenameHandler *OrgJodaConvertRenameHandler_INSTANCE_;
J2OBJC_STATIC_FIELD_GETTER(OrgJodaConvertRenameHandler, INSTANCE_, OrgJodaConvertRenameHandler *)
CF_EXTERN_C_END

J2OBJC_TYPE_LITERAL_HEADER(OrgJodaConvertRenameHandler)

#endif // _OrgJodaConvertRenameHandler_H_
