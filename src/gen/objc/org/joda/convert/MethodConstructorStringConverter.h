//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/andrefonseca/Documents/PodsFolders/joda-convert/src/main/java/org/joda/convert/MethodConstructorStringConverter.java
//

#include "J2ObjC_header.h"

#pragma push_macro("OrgJodaConvertMethodConstructorStringConverter_INCLUDE_ALL")
#ifdef OrgJodaConvertMethodConstructorStringConverter_RESTRICT
#define OrgJodaConvertMethodConstructorStringConverter_INCLUDE_ALL 0
#else
#define OrgJodaConvertMethodConstructorStringConverter_INCLUDE_ALL 1
#endif
#undef OrgJodaConvertMethodConstructorStringConverter_RESTRICT

#if !defined (OrgJodaConvertMethodConstructorStringConverter_) && (OrgJodaConvertMethodConstructorStringConverter_INCLUDE_ALL || defined(OrgJodaConvertMethodConstructorStringConverter_INCLUDE))
#define OrgJodaConvertMethodConstructorStringConverter_

#define OrgJodaConvertReflectionStringConverter_RESTRICT 1
#define OrgJodaConvertReflectionStringConverter_INCLUDE 1
#include "org/joda/convert/ReflectionStringConverter.h"

@class IOSClass;
@class JavaLangReflectConstructor;
@class JavaLangReflectMethod;

/*!
 @brief Conversion to and from a string using a toString method and a fromString constructor.
 <p>
 The toString method must meet the following signature:<br />
 <code>String anyName()</code> on Class T.
 <p>
 The fromString constructor must take a single <code>String</code> parameter.
 <p>
 MethodConstructorStringConverter is thread-safe and immutable.
 */
@interface OrgJodaConvertMethodConstructorStringConverter : OrgJodaConvertReflectionStringConverter

#pragma mark Public

/*!
 @brief Converts the <code>String</code> to an object.
 @param cls  the class to convert to, not null
 @param str  the string to convert, not null
 @return the converted object, may be null but generally not
 */
- (id)convertFromStringWithIOSClass:(IOSClass *)cls
                       withNSString:(NSString *)str;

- (IOSClass *)getEffectiveType;

#pragma mark Package-Private

/*!
 @brief Creates an instance using a method and a constructor.
 @param cls  the class this converts for, not null
 @param toString  the toString method, not null
 @param fromString  the fromString method, not null
 @throws RuntimeException (or subclass) if the method signatures are invalid
 */
- (instancetype)initWithIOSClass:(IOSClass *)cls
       withJavaLangReflectMethod:(JavaLangReflectMethod *)toString
  withJavaLangReflectConstructor:(JavaLangReflectConstructor *)fromString;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgJodaConvertMethodConstructorStringConverter)

FOUNDATION_EXPORT void OrgJodaConvertMethodConstructorStringConverter_initWithIOSClass_withJavaLangReflectMethod_withJavaLangReflectConstructor_(OrgJodaConvertMethodConstructorStringConverter *self, IOSClass *cls, JavaLangReflectMethod *toString, JavaLangReflectConstructor *fromString);

FOUNDATION_EXPORT OrgJodaConvertMethodConstructorStringConverter *new_OrgJodaConvertMethodConstructorStringConverter_initWithIOSClass_withJavaLangReflectMethod_withJavaLangReflectConstructor_(IOSClass *cls, JavaLangReflectMethod *toString, JavaLangReflectConstructor *fromString) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(OrgJodaConvertMethodConstructorStringConverter)

#endif

#pragma pop_macro("OrgJodaConvertMethodConstructorStringConverter_INCLUDE_ALL")
