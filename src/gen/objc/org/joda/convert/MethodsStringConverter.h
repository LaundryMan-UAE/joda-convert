//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/marcussmith/Laundryman/Libraries/joda-convert/src/main/java/org/joda/convert/MethodsStringConverter.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgJodaConvertMethodsStringConverter")
#ifdef RESTRICT_OrgJodaConvertMethodsStringConverter
#define INCLUDE_ALL_OrgJodaConvertMethodsStringConverter 0
#else
#define INCLUDE_ALL_OrgJodaConvertMethodsStringConverter 1
#endif
#undef RESTRICT_OrgJodaConvertMethodsStringConverter

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (OrgJodaConvertMethodsStringConverter_) && (INCLUDE_ALL_OrgJodaConvertMethodsStringConverter || defined(INCLUDE_OrgJodaConvertMethodsStringConverter))
#define OrgJodaConvertMethodsStringConverter_

#define RESTRICT_OrgJodaConvertReflectionStringConverter 1
#define INCLUDE_OrgJodaConvertReflectionStringConverter 1
#include "org/joda/convert/ReflectionStringConverter.h"

@class IOSClass;
@class JavaLangReflectMethod;

@interface OrgJodaConvertMethodsStringConverter : OrgJodaConvertReflectionStringConverter

#pragma mark Public

- (id)convertFromStringWithIOSClass:(IOSClass *)cls
                       withNSString:(NSString *)str;

- (IOSClass *)getEffectiveType;

#pragma mark Package-Private

- (instancetype __nonnull)initPackagePrivateWithIOSClass:(IOSClass *)cls
                               withJavaLangReflectMethod:(JavaLangReflectMethod *)toString
                               withJavaLangReflectMethod:(JavaLangReflectMethod *)fromString
                                            withIOSClass:(IOSClass *)effectiveType;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)initPackagePrivateWithIOSClass:(IOSClass *)arg0
                               withJavaLangReflectMethod:(JavaLangReflectMethod *)arg1 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgJodaConvertMethodsStringConverter)

FOUNDATION_EXPORT void OrgJodaConvertMethodsStringConverter_initPackagePrivateWithIOSClass_withJavaLangReflectMethod_withJavaLangReflectMethod_withIOSClass_(OrgJodaConvertMethodsStringConverter *self, IOSClass *cls, JavaLangReflectMethod *toString, JavaLangReflectMethod *fromString, IOSClass *effectiveType);

FOUNDATION_EXPORT OrgJodaConvertMethodsStringConverter *new_OrgJodaConvertMethodsStringConverter_initPackagePrivateWithIOSClass_withJavaLangReflectMethod_withJavaLangReflectMethod_withIOSClass_(IOSClass *cls, JavaLangReflectMethod *toString, JavaLangReflectMethod *fromString, IOSClass *effectiveType) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgJodaConvertMethodsStringConverter *create_OrgJodaConvertMethodsStringConverter_initPackagePrivateWithIOSClass_withJavaLangReflectMethod_withJavaLangReflectMethod_withIOSClass_(IOSClass *cls, JavaLangReflectMethod *toString, JavaLangReflectMethod *fromString, IOSClass *effectiveType);

J2OBJC_TYPE_LITERAL_HEADER(OrgJodaConvertMethodsStringConverter)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_OrgJodaConvertMethodsStringConverter")
