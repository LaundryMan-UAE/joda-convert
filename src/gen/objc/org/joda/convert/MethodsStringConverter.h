//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/andrefonseca/Documents/PodsFolders/joda-convert/src/main/java/org/joda/convert/MethodsStringConverter.java
//

#include "J2ObjC_header.h"

#pragma push_macro("OrgJodaConvertMethodsStringConverter_INCLUDE_ALL")
#ifdef OrgJodaConvertMethodsStringConverter_RESTRICT
#define OrgJodaConvertMethodsStringConverter_INCLUDE_ALL 0
#else
#define OrgJodaConvertMethodsStringConverter_INCLUDE_ALL 1
#endif
#undef OrgJodaConvertMethodsStringConverter_RESTRICT

#if !defined (OrgJodaConvertMethodsStringConverter_) && (OrgJodaConvertMethodsStringConverter_INCLUDE_ALL || defined(OrgJodaConvertMethodsStringConverter_INCLUDE))
#define OrgJodaConvertMethodsStringConverter_

#define OrgJodaConvertReflectionStringConverter_RESTRICT 1
#define OrgJodaConvertReflectionStringConverter_INCLUDE 1
#include "org/joda/convert/ReflectionStringConverter.h"

@class IOSClass;
@class JavaLangReflectMethod;

/*!
 @brief Conversion to and from a string using two methods.
 <p>
 The toString method must meet the following signature:<br />
 <code>String anyName()</code> on Class T.
 <p>
 The fromString method must meet the following signature:<br />
 <code>static T anyName(String)</code> on any class.
 <p>
 MethodsStringConverter is thread-safe and immutable.
 */
@interface OrgJodaConvertMethodsStringConverter : OrgJodaConvertReflectionStringConverter

#pragma mark Public

/*!
 @brief Converts the <code>String</code> to an object.
 @param cls  the class to convert to, not null
 @param str  the string to convert, not null
 @return the converted object, may be null but generally not
 */
- (id)convertFromStringWithIOSClass:(IOSClass *)cls
                       withNSString:(NSString *)str;

- (IOSClass *)getEffectiveType;

#pragma mark Package-Private

/*!
 @brief Creates an instance using two methods.
 @param cls  the class this converts for, not null
 @param toString  the toString method, not null
 @param fromString  the fromString method, not null
 @throws RuntimeException (or subclass) if the method signatures are invalid
 */
- (instancetype)initWithIOSClass:(IOSClass *)cls
       withJavaLangReflectMethod:(JavaLangReflectMethod *)toString
       withJavaLangReflectMethod:(JavaLangReflectMethod *)fromString
                    withIOSClass:(IOSClass *)effectiveType;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgJodaConvertMethodsStringConverter)

FOUNDATION_EXPORT void OrgJodaConvertMethodsStringConverter_initWithIOSClass_withJavaLangReflectMethod_withJavaLangReflectMethod_withIOSClass_(OrgJodaConvertMethodsStringConverter *self, IOSClass *cls, JavaLangReflectMethod *toString, JavaLangReflectMethod *fromString, IOSClass *effectiveType);

FOUNDATION_EXPORT OrgJodaConvertMethodsStringConverter *new_OrgJodaConvertMethodsStringConverter_initWithIOSClass_withJavaLangReflectMethod_withJavaLangReflectMethod_withIOSClass_(IOSClass *cls, JavaLangReflectMethod *toString, JavaLangReflectMethod *fromString, IOSClass *effectiveType) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgJodaConvertMethodsStringConverter *create_OrgJodaConvertMethodsStringConverter_initWithIOSClass_withJavaLangReflectMethod_withJavaLangReflectMethod_withIOSClass_(IOSClass *cls, JavaLangReflectMethod *toString, JavaLangReflectMethod *fromString, IOSClass *effectiveType);

J2OBJC_TYPE_LITERAL_HEADER(OrgJodaConvertMethodsStringConverter)

#endif

#pragma pop_macro("OrgJodaConvertMethodsStringConverter_INCLUDE_ALL")
