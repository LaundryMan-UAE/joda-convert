//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/marcussmith/temp/joda-convert/src/main/java/org/joda/convert/StringConvert.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgJodaConvertStringConvert")
#ifdef RESTRICT_OrgJodaConvertStringConvert
#define INCLUDE_ALL_OrgJodaConvertStringConvert 0
#else
#define INCLUDE_ALL_OrgJodaConvertStringConvert 1
#endif
#undef RESTRICT_OrgJodaConvertStringConvert

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (OrgJodaConvertStringConvert_) && (INCLUDE_ALL_OrgJodaConvertStringConvert || defined(INCLUDE_OrgJodaConvertStringConvert))
#define OrgJodaConvertStringConvert_

@class IOSClass;
@protocol OrgJodaConvertStringConverter;

@interface OrgJodaConvertStringConvert : NSObject

#pragma mark Public

- (instancetype __nonnull)init;

- (instancetype __nonnull)initWithBoolean:(jboolean)includeJdkConverters;

- (id)convertFromStringWithIOSClass:(IOSClass *)cls
                       withNSString:(NSString *)str;

- (NSString *)convertToStringWithIOSClass:(IOSClass *)cls
                                   withId:(id)object;

- (NSString *)convertToStringWithId:(id)object;

- (id<OrgJodaConvertStringConverter>)findConverterWithIOSClass:(IOSClass *)cls;

- (void)register__WithIOSClass:(IOSClass *)cls
withOrgJodaConvertStringConverter:(id<OrgJodaConvertStringConverter>)converter;

- (void)registerMethodConstructorWithIOSClass:(IOSClass *)cls
                                 withNSString:(NSString *)toStringMethodName;

- (void)registerMethodsWithIOSClass:(IOSClass *)cls
                       withNSString:(NSString *)toStringMethodName
                       withNSString:(NSString *)fromStringMethodName;

- (NSString *)description;

@end

J2OBJC_STATIC_INIT(OrgJodaConvertStringConvert)

inline OrgJodaConvertStringConvert *OrgJodaConvertStringConvert_get_INSTANCE(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT OrgJodaConvertStringConvert *OrgJodaConvertStringConvert_INSTANCE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgJodaConvertStringConvert, INSTANCE, OrgJodaConvertStringConvert *)

FOUNDATION_EXPORT void OrgJodaConvertStringConvert_init(OrgJodaConvertStringConvert *self);

FOUNDATION_EXPORT OrgJodaConvertStringConvert *new_OrgJodaConvertStringConvert_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgJodaConvertStringConvert *create_OrgJodaConvertStringConvert_init(void);

FOUNDATION_EXPORT void OrgJodaConvertStringConvert_initWithBoolean_(OrgJodaConvertStringConvert *self, jboolean includeJdkConverters);

FOUNDATION_EXPORT OrgJodaConvertStringConvert *new_OrgJodaConvertStringConvert_initWithBoolean_(jboolean includeJdkConverters) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgJodaConvertStringConvert *create_OrgJodaConvertStringConvert_initWithBoolean_(jboolean includeJdkConverters);

J2OBJC_TYPE_LITERAL_HEADER(OrgJodaConvertStringConvert)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_OrgJodaConvertStringConvert")
