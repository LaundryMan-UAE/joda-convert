//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/marcussmith/HambroPerks/hambroperks_org/joda-convert/src/main/java/org/joda/convert/StringConverterFactory.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgJodaConvertStringConverterFactory")
#ifdef RESTRICT_OrgJodaConvertStringConverterFactory
#define INCLUDE_ALL_OrgJodaConvertStringConverterFactory 0
#else
#define INCLUDE_ALL_OrgJodaConvertStringConverterFactory 1
#endif
#undef RESTRICT_OrgJodaConvertStringConverterFactory

#if !defined (OrgJodaConvertStringConverterFactory_) && (INCLUDE_ALL_OrgJodaConvertStringConverterFactory || defined(INCLUDE_OrgJodaConvertStringConverterFactory))
#define OrgJodaConvertStringConverterFactory_

@class IOSClass;
@protocol OrgJodaConvertStringConverter;

/*!
 @brief Factory for <code>StringConverter</code> that allows converters to be
  created dynamically or easily initialised.
 <p>
  Implementations must be immutable and thread-safe.
 @since 1.5
 */
@protocol OrgJodaConvertStringConverterFactory < JavaObject >

/*!
 @brief Finds a converter by type.
 @param cls the type to lookup, not null
 @return the converter, null if not found
 @throw RuntimeException(or subclass) if source code is invalid
 */
- (id<OrgJodaConvertStringConverter>)findConverterWithIOSClass:(IOSClass *)cls;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgJodaConvertStringConverterFactory)

J2OBJC_TYPE_LITERAL_HEADER(OrgJodaConvertStringConverterFactory)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgJodaConvertStringConverterFactory")
