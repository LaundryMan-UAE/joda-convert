//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/andrefonseca/Documents/PodsFolders/joda-convert/src/main/java/org/joda/convert/StringConverterFactory.java
//

#include "J2ObjC_header.h"

#pragma push_macro("OrgJodaConvertStringConverterFactory_INCLUDE_ALL")
#ifdef OrgJodaConvertStringConverterFactory_RESTRICT
#define OrgJodaConvertStringConverterFactory_INCLUDE_ALL 0
#else
#define OrgJodaConvertStringConverterFactory_INCLUDE_ALL 1
#endif
#undef OrgJodaConvertStringConverterFactory_RESTRICT

#if !defined (OrgJodaConvertStringConverterFactory_) && (OrgJodaConvertStringConverterFactory_INCLUDE_ALL || defined(OrgJodaConvertStringConverterFactory_INCLUDE))
#define OrgJodaConvertStringConverterFactory_

@class IOSClass;
@protocol OrgJodaConvertStringConverter;

/*!
 @brief Factory for <code>StringConverter</code> that allows converters to be
 created dynamically or easily initialised.
 <p>
 Implementations must be immutable and thread-safe.
 @since 1.5
 */
@protocol OrgJodaConvertStringConverterFactory < NSObject, JavaObject >

/*!
 @brief Finds a converter by type.
 @param cls  the type to lookup, not null
 @return the converter, null if not found
 @throws RuntimeException (or subclass) if source code is invalid
 */
- (id<OrgJodaConvertStringConverter>)findConverterWithIOSClass:(IOSClass *)cls;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgJodaConvertStringConverterFactory)

J2OBJC_TYPE_LITERAL_HEADER(OrgJodaConvertStringConverterFactory)

#endif

#pragma pop_macro("OrgJodaConvertStringConverterFactory_INCLUDE_ALL")
