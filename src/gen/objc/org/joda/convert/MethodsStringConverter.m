//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/marcussmith/HambroPerks/hambroperks_org/joda-convert/src/main/java/org/joda/convert/MethodsStringConverter.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/CharSequence.h"
#include "java/lang/IllegalAccessException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/Throwable.h"
#include "java/lang/reflect/InvocationTargetException.h"
#include "java/lang/reflect/Method.h"
#include "java/lang/reflect/Modifier.h"
#include "org/joda/convert/MethodsStringConverter.h"
#include "org/joda/convert/ReflectionStringConverter.h"

@interface OrgJodaConvertMethodsStringConverter () {
 @public
  /**
   @brief Conversion from a string.
   */
  JavaLangReflectMethod *fromString_;
  /**
   @brief Effective type.
   */
  IOSClass *effectiveType_;
}

@end

J2OBJC_FIELD_SETTER(OrgJodaConvertMethodsStringConverter, fromString_, JavaLangReflectMethod *)
J2OBJC_FIELD_SETTER(OrgJodaConvertMethodsStringConverter, effectiveType_, IOSClass *)

@implementation OrgJodaConvertMethodsStringConverter

- (instancetype)initWithIOSClass:(IOSClass *)cls
       withJavaLangReflectMethod:(JavaLangReflectMethod *)toString
       withJavaLangReflectMethod:(JavaLangReflectMethod *)fromString
                    withIOSClass:(IOSClass *)effectiveType {
  OrgJodaConvertMethodsStringConverter_initWithIOSClass_withJavaLangReflectMethod_withJavaLangReflectMethod_withIOSClass_(self, cls, toString, fromString, effectiveType);
  return self;
}

- (id)convertFromStringWithIOSClass:(IOSClass *)cls
                       withNSString:(NSString *)str {
  @try {
    return [((IOSClass *) nil_chk(cls)) cast:[((JavaLangReflectMethod *) nil_chk(fromString_)) invokeWithId:nil withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ str } count:1 type:NSObject_class_()]]];
  }
  @catch (JavaLangIllegalAccessException *ex) {
    @throw [new_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$@", @"Method is not accessible: ", fromString_)) autorelease];
  }
  @catch (JavaLangReflectInvocationTargetException *ex) {
    if ([[((JavaLangReflectInvocationTargetException *) nil_chk(ex)) getCause] isKindOfClass:[JavaLangRuntimeException class]]) {
      @throw (JavaLangRuntimeException *) check_class_cast([ex getCause], [JavaLangRuntimeException class]);
    }
    @throw [new_JavaLangRuntimeException_initWithNSString_withJavaLangThrowable_([ex getMessage], [ex getCause]) autorelease];
  }
}

- (IOSClass *)getEffectiveType {
  return effectiveType_;
}

- (void)dealloc {
  RELEASE_(fromString_);
  RELEASE_(effectiveType_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithIOSClass:withJavaLangReflectMethod:withJavaLangReflectMethod:withIOSClass:", "MethodsStringConverter", NULL, 0x0, NULL, NULL },
    { "convertFromStringWithIOSClass:withNSString:", "convertFromString", "TT;", 0x1, NULL, "(Ljava/lang/Class<+TT;>;Ljava/lang/String;)TT;" },
    { "getEffectiveType", NULL, "Ljava.lang.Class;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "fromString_", NULL, 0x12, "Ljava.lang.reflect.Method;", NULL, NULL,  },
    { "effectiveType_", NULL, 0x12, "Ljava.lang.Class;", NULL, "Ljava/lang/Class<*>;",  },
  };
  static const char *superclass_type_args[] = {"TT;"};
  static const J2ObjcClassInfo _OrgJodaConvertMethodsStringConverter = { 2, "MethodsStringConverter", "org.joda.convert", NULL, 0x10, 3, methods, 2, fields, 1, superclass_type_args, 0, NULL, NULL, "<T:Ljava/lang/Object;>Lorg/joda/convert/ReflectionStringConverter<TT;>;" };
  return &_OrgJodaConvertMethodsStringConverter;
}

@end

void OrgJodaConvertMethodsStringConverter_initWithIOSClass_withJavaLangReflectMethod_withJavaLangReflectMethod_withIOSClass_(OrgJodaConvertMethodsStringConverter *self, IOSClass *cls, JavaLangReflectMethod *toString, JavaLangReflectMethod *fromString, IOSClass *effectiveType) {
  OrgJodaConvertReflectionStringConverter_initWithIOSClass_withJavaLangReflectMethod_(self, cls, toString);
  if (JavaLangReflectModifier_isStaticWithInt_([((JavaLangReflectMethod *) nil_chk(fromString)) getModifiers]) == NO) {
    @throw [new_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$@", @"FromString method must be static: ", fromString)) autorelease];
  }
  if (((IOSObjectArray *) nil_chk([fromString getParameterTypes]))->size_ != 1) {
    @throw [new_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$@", @"FromString method must have one parameter: ", fromString)) autorelease];
  }
  IOSClass *param = IOSObjectArray_Get(nil_chk([fromString getParameterTypes]), 0);
  if (param != NSString_class_() && param != JavaLangCharSequence_class_()) {
    @throw [new_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$@", @"FromString method must take a String or CharSequence: ", fromString)) autorelease];
  }
  if ([((IOSClass *) nil_chk([fromString getReturnType])) isAssignableFrom:cls] == NO && [((IOSClass *) nil_chk(cls)) isAssignableFrom:[fromString getReturnType]] == NO) {
    @throw [new_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$@", @"FromString method must return specified class or a supertype: ", fromString)) autorelease];
  }
  OrgJodaConvertMethodsStringConverter_set_fromString_(self, fromString);
  OrgJodaConvertMethodsStringConverter_set_effectiveType_(self, effectiveType);
}

OrgJodaConvertMethodsStringConverter *new_OrgJodaConvertMethodsStringConverter_initWithIOSClass_withJavaLangReflectMethod_withJavaLangReflectMethod_withIOSClass_(IOSClass *cls, JavaLangReflectMethod *toString, JavaLangReflectMethod *fromString, IOSClass *effectiveType) {
  OrgJodaConvertMethodsStringConverter *self = [OrgJodaConvertMethodsStringConverter alloc];
  OrgJodaConvertMethodsStringConverter_initWithIOSClass_withJavaLangReflectMethod_withJavaLangReflectMethod_withIOSClass_(self, cls, toString, fromString, effectiveType);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJodaConvertMethodsStringConverter)
