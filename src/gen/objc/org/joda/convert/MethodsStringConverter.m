//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/marcussmith/temp/joda-convert/src/main/java/org/joda/convert/MethodsStringConverter.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/CharSequence.h"
#include "java/lang/IllegalAccessException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/Throwable.h"
#include "java/lang/reflect/InvocationTargetException.h"
#include "java/lang/reflect/Method.h"
#include "org/joda/convert/MethodsStringConverter.h"
#include "org/joda/convert/ReflectionStringConverter.h"

@interface OrgJodaConvertMethodsStringConverter () {
 @public
  JavaLangReflectMethod *fromString_;
}

@end

J2OBJC_FIELD_SETTER(OrgJodaConvertMethodsStringConverter, fromString_, JavaLangReflectMethod *)

@implementation OrgJodaConvertMethodsStringConverter

- (instancetype __nonnull)initWithIOSClass:(IOSClass *)cls
                 withJavaLangReflectMethod:(JavaLangReflectMethod *)toString
                 withJavaLangReflectMethod:(JavaLangReflectMethod *)fromString {
  OrgJodaConvertMethodsStringConverter_initWithIOSClass_withJavaLangReflectMethod_withJavaLangReflectMethod_(self, cls, toString, fromString);
  return self;
}

- (id)convertFromStringWithIOSClass:(IOSClass *)cls
                       withNSString:(NSString *)str {
  @try {
    return [((IOSClass *) nil_chk(cls)) cast:[((JavaLangReflectMethod *) nil_chk(fromString_)) invokeWithId:nil withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ str } count:1 type:NSObject_class_()]]];
  }
  @catch (JavaLangIllegalAccessException *ex) {
    @throw create_JavaLangIllegalStateException_initWithNSString_(@"Method is not accessible");
  }
  @catch (JavaLangReflectInvocationTargetException *ex) {
    if ([[ex getCause] isKindOfClass:[JavaLangRuntimeException class]]) {
      @throw nil_chk((JavaLangRuntimeException *) cast_chk([ex getCause], [JavaLangRuntimeException class]));
    }
    @throw create_JavaLangRuntimeException_initWithNSString_withJavaLangThrowable_([ex getMessage], [ex getCause]);
  }
}

- (void)dealloc {
  RELEASE_(fromString_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 2, 3, -1, 4, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithIOSClass:withJavaLangReflectMethod:withJavaLangReflectMethod:);
  methods[1].selector = @selector(convertFromStringWithIOSClass:withNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "fromString_", "LJavaLangReflectMethod;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LIOSClass;LJavaLangReflectMethod;LJavaLangReflectMethod;", "(Ljava/lang/Class<TT;>;Ljava/lang/reflect/Method;Ljava/lang/reflect/Method;)V", "convertFromString", "LIOSClass;LNSString;", "(Ljava/lang/Class<+TT;>;Ljava/lang/String;)TT;", "<T:Ljava/lang/Object;>Lorg/joda/convert/ReflectionStringConverter<TT;>;" };
  static const J2ObjcClassInfo _OrgJodaConvertMethodsStringConverter = { "MethodsStringConverter", "org.joda.convert", ptrTable, methods, fields, 7, 0x10, 2, 1, -1, -1, -1, 5, -1 };
  return &_OrgJodaConvertMethodsStringConverter;
}

@end

void OrgJodaConvertMethodsStringConverter_initWithIOSClass_withJavaLangReflectMethod_withJavaLangReflectMethod_(OrgJodaConvertMethodsStringConverter *self, IOSClass *cls, JavaLangReflectMethod *toString, JavaLangReflectMethod *fromString) {
  OrgJodaConvertReflectionStringConverter_initWithIOSClass_withJavaLangReflectMethod_(self, cls, toString);
  if (((IOSObjectArray *) nil_chk([((JavaLangReflectMethod *) nil_chk(fromString)) getParameterTypes]))->size_ != 1) {
    @throw create_JavaLangIllegalStateException_initWithNSString_(@"FromString method must have one parameter");
  }
  IOSClass *param = IOSObjectArray_Get(nil_chk([fromString getParameterTypes]), 0);
  if (param != NSString_class_() && param != JavaLangCharSequence_class_()) {
    @throw create_JavaLangIllegalStateException_initWithNSString_(@"FromString method must take a String or CharSequence");
  }
  if ([((IOSClass *) nil_chk([fromString getReturnType])) isAssignableFrom:cls] == false) {
    @throw create_JavaLangIllegalStateException_initWithNSString_(@"FromString method must return specified class or a superclass");
  }
  JreStrongAssign(&self->fromString_, fromString);
}

OrgJodaConvertMethodsStringConverter *new_OrgJodaConvertMethodsStringConverter_initWithIOSClass_withJavaLangReflectMethod_withJavaLangReflectMethod_(IOSClass *cls, JavaLangReflectMethod *toString, JavaLangReflectMethod *fromString) {
  J2OBJC_NEW_IMPL(OrgJodaConvertMethodsStringConverter, initWithIOSClass_withJavaLangReflectMethod_withJavaLangReflectMethod_, cls, toString, fromString)
}

OrgJodaConvertMethodsStringConverter *create_OrgJodaConvertMethodsStringConverter_initWithIOSClass_withJavaLangReflectMethod_withJavaLangReflectMethod_(IOSClass *cls, JavaLangReflectMethod *toString, JavaLangReflectMethod *fromString) {
  J2OBJC_CREATE_IMPL(OrgJodaConvertMethodsStringConverter, initWithIOSClass_withJavaLangReflectMethod_withJavaLangReflectMethod_, cls, toString, fromString)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJodaConvertMethodsStringConverter)
