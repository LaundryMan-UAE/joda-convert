//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/andrefonseca/Documents/PodsFolders/joda-convert/src/main/java/org/joda/convert/factory/CharObjectArrayStringConverterFactory.java
//

#include "J2ObjC_header.h"

#pragma push_macro("OrgJodaConvertFactoryCharObjectArrayStringConverterFactory_INCLUDE_ALL")
#ifdef OrgJodaConvertFactoryCharObjectArrayStringConverterFactory_RESTRICT
#define OrgJodaConvertFactoryCharObjectArrayStringConverterFactory_INCLUDE_ALL 0
#else
#define OrgJodaConvertFactoryCharObjectArrayStringConverterFactory_INCLUDE_ALL 1
#endif
#undef OrgJodaConvertFactoryCharObjectArrayStringConverterFactory_RESTRICT

#if !defined (OrgJodaConvertFactoryCharObjectArrayStringConverterFactory_) && (OrgJodaConvertFactoryCharObjectArrayStringConverterFactory_INCLUDE_ALL || defined(OrgJodaConvertFactoryCharObjectArrayStringConverterFactory_INCLUDE))
#define OrgJodaConvertFactoryCharObjectArrayStringConverterFactory_

#define OrgJodaConvertStringConverterFactory_RESTRICT 1
#define OrgJodaConvertStringConverterFactory_INCLUDE 1
#include "org/joda/convert/StringConverterFactory.h"

@class IOSClass;
@class JavaUtilRegexPattern;
@protocol OrgJodaConvertStringConverter;

/*!
 @brief Factory for <code>StringConverter</code> providing support for Character object arrays
 as a string, using backslash as an escape.
 <p>
 Double backslash is a backslash.
 One backslash followed by a dash is null.
 <p>
 To use, simply register the instance with a <code>StringConvert</code> instance.
 <p>
 This class is immutable and thread-safe.
 @since 1.5
 */
@interface OrgJodaConvertFactoryCharObjectArrayStringConverterFactory : NSObject < OrgJodaConvertStringConverterFactory >

#pragma mark Public

/*!
 @brief Finds a converter by type.
 @param cls  the type to lookup, not null
 @return the converter, null if not found
 @throws RuntimeException (or subclass) if source code is invalid
 */
- (id<OrgJodaConvertStringConverter>)findConverterWithIOSClass:(IOSClass *)cls;

- (NSString *)description;

@end

J2OBJC_STATIC_INIT(OrgJodaConvertFactoryCharObjectArrayStringConverterFactory)

/*!
 @brief Singleton instance.
 */
inline id<OrgJodaConvertStringConverterFactory> OrgJodaConvertFactoryCharObjectArrayStringConverterFactory_get_INSTANCE();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT id<OrgJodaConvertStringConverterFactory> OrgJodaConvertFactoryCharObjectArrayStringConverterFactory_INSTANCE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgJodaConvertFactoryCharObjectArrayStringConverterFactory, INSTANCE, id<OrgJodaConvertStringConverterFactory>)

/*!
 @brief Delimiter to find.
 */
inline JavaUtilRegexPattern *OrgJodaConvertFactoryCharObjectArrayStringConverterFactory_get_DELIMITER();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaUtilRegexPattern *OrgJodaConvertFactoryCharObjectArrayStringConverterFactory_DELIMITER;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgJodaConvertFactoryCharObjectArrayStringConverterFactory, DELIMITER, JavaUtilRegexPattern *)

J2OBJC_TYPE_LITERAL_HEADER(OrgJodaConvertFactoryCharObjectArrayStringConverterFactory)

#endif

#if !defined (OrgJodaConvertFactoryCharObjectArrayStringConverterFactory_CharecterArrayStringConverter_) && (OrgJodaConvertFactoryCharObjectArrayStringConverterFactory_INCLUDE_ALL || defined(OrgJodaConvertFactoryCharObjectArrayStringConverterFactory_CharecterArrayStringConverter_INCLUDE))
#define OrgJodaConvertFactoryCharObjectArrayStringConverterFactory_CharecterArrayStringConverter_

#define JavaLangEnum_RESTRICT 1
#define JavaLangEnum_INCLUDE 1
#include "java/lang/Enum.h"

#define OrgJodaConvertTypedStringConverter_RESTRICT 1
#define OrgJodaConvertTypedStringConverter_INCLUDE 1
#include "org/joda/convert/TypedStringConverter.h"

typedef NS_ENUM(NSUInteger, OrgJodaConvertFactoryCharObjectArrayStringConverterFactory_CharecterArrayStringConverter_Enum) {
  OrgJodaConvertFactoryCharObjectArrayStringConverterFactory_CharecterArrayStringConverter_Enum_INSTANCE = 0,
};

@interface OrgJodaConvertFactoryCharObjectArrayStringConverterFactory_CharecterArrayStringConverter : JavaLangEnum < NSCopying, OrgJodaConvertTypedStringConverter >

#pragma mark Package-Private

+ (IOSObjectArray *)values;

+ (OrgJodaConvertFactoryCharObjectArrayStringConverterFactory_CharecterArrayStringConverter *)valueOfWithNSString:(NSString *)name;

- (id)copyWithZone:(NSZone *)zone;

@end

J2OBJC_STATIC_INIT(OrgJodaConvertFactoryCharObjectArrayStringConverterFactory_CharecterArrayStringConverter)

/*! INTERNAL ONLY - Use enum accessors declared below. */
FOUNDATION_EXPORT OrgJodaConvertFactoryCharObjectArrayStringConverterFactory_CharecterArrayStringConverter *OrgJodaConvertFactoryCharObjectArrayStringConverterFactory_CharecterArrayStringConverter_values_[];

inline OrgJodaConvertFactoryCharObjectArrayStringConverterFactory_CharecterArrayStringConverter *OrgJodaConvertFactoryCharObjectArrayStringConverterFactory_CharecterArrayStringConverter_get_INSTANCE();
J2OBJC_ENUM_CONSTANT(OrgJodaConvertFactoryCharObjectArrayStringConverterFactory_CharecterArrayStringConverter, INSTANCE)

FOUNDATION_EXPORT IOSObjectArray *OrgJodaConvertFactoryCharObjectArrayStringConverterFactory_CharecterArrayStringConverter_values();

FOUNDATION_EXPORT OrgJodaConvertFactoryCharObjectArrayStringConverterFactory_CharecterArrayStringConverter *OrgJodaConvertFactoryCharObjectArrayStringConverterFactory_CharecterArrayStringConverter_valueOfWithNSString_(NSString *name);

FOUNDATION_EXPORT OrgJodaConvertFactoryCharObjectArrayStringConverterFactory_CharecterArrayStringConverter *OrgJodaConvertFactoryCharObjectArrayStringConverterFactory_CharecterArrayStringConverter_fromOrdinal(NSUInteger ordinal);

J2OBJC_TYPE_LITERAL_HEADER(OrgJodaConvertFactoryCharObjectArrayStringConverterFactory_CharecterArrayStringConverter)

#endif

#pragma pop_macro("OrgJodaConvertFactoryCharObjectArrayStringConverterFactory_INCLUDE_ALL")
