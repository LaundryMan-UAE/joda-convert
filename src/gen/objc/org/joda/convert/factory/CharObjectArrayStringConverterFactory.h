//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/marcussmith/HambroPerks/hambroperks_org/joda-convert/src/main/java/org/joda/convert/factory/CharObjectArrayStringConverterFactory.java
//

#ifndef _OrgJodaConvertFactoryCharObjectArrayStringConverterFactory_H_
#define _OrgJodaConvertFactoryCharObjectArrayStringConverterFactory_H_

#include "J2ObjC_header.h"
#include "java/lang/Enum.h"
#include "org/joda/convert/StringConverterFactory.h"
#include "org/joda/convert/TypedStringConverter.h"

@class IOSClass;
@class JavaUtilRegexPattern;
@protocol OrgJodaConvertStringConverter;

/**
 @brief Factory for <code>StringConverter</code> providing support for Character object arrays as a string, using backslash as an escape.
 <p> Double backslash is a backslash. One backslash followed by a dash is null. <p> To use, simply register the instance with a <code>StringConvert</code> instance. <p> This class is immutable and thread-safe.
 @since 1.5
 */
@interface OrgJodaConvertFactoryCharObjectArrayStringConverterFactory : NSObject < OrgJodaConvertStringConverterFactory >

#pragma mark Public

/**
 @brief Finds a converter by type.
 @param cls the type to lookup, not null
 @return the converter, null if not found
 @throws RuntimeException (or subclass) if source code is invalid
 */
- (id<OrgJodaConvertStringConverter>)findConverterWithIOSClass:(IOSClass *)cls;

- (NSString *)description;

@end

J2OBJC_STATIC_INIT(OrgJodaConvertFactoryCharObjectArrayStringConverterFactory)

FOUNDATION_EXPORT id<OrgJodaConvertStringConverterFactory> OrgJodaConvertFactoryCharObjectArrayStringConverterFactory_INSTANCE_;
J2OBJC_STATIC_FIELD_GETTER(OrgJodaConvertFactoryCharObjectArrayStringConverterFactory, INSTANCE_, id<OrgJodaConvertStringConverterFactory>)

FOUNDATION_EXPORT JavaUtilRegexPattern *OrgJodaConvertFactoryCharObjectArrayStringConverterFactory_DELIMITER_;
J2OBJC_STATIC_FIELD_GETTER(OrgJodaConvertFactoryCharObjectArrayStringConverterFactory, DELIMITER_, JavaUtilRegexPattern *)

J2OBJC_TYPE_LITERAL_HEADER(OrgJodaConvertFactoryCharObjectArrayStringConverterFactory)

typedef NS_ENUM(NSUInteger, OrgJodaConvertFactoryCharObjectArrayStringConverterFactory_CharecterArrayStringConverter) {
  OrgJodaConvertFactoryCharObjectArrayStringConverterFactory_CharecterArrayStringConverter_INSTANCE = 0,
};

@interface OrgJodaConvertFactoryCharObjectArrayStringConverterFactory_CharecterArrayStringConverterEnum : JavaLangEnum < NSCopying, OrgJodaConvertTypedStringConverter >

#pragma mark Package-Private

+ (IOSObjectArray *)values;
FOUNDATION_EXPORT IOSObjectArray *OrgJodaConvertFactoryCharObjectArrayStringConverterFactory_CharecterArrayStringConverterEnum_values();

+ (OrgJodaConvertFactoryCharObjectArrayStringConverterFactory_CharecterArrayStringConverterEnum *)valueOfWithNSString:(NSString *)name;
FOUNDATION_EXPORT OrgJodaConvertFactoryCharObjectArrayStringConverterFactory_CharecterArrayStringConverterEnum *OrgJodaConvertFactoryCharObjectArrayStringConverterFactory_CharecterArrayStringConverterEnum_valueOfWithNSString_(NSString *name);

- (id)copyWithZone:(NSZone *)zone;

@end

J2OBJC_STATIC_INIT(OrgJodaConvertFactoryCharObjectArrayStringConverterFactory_CharecterArrayStringConverterEnum)

FOUNDATION_EXPORT OrgJodaConvertFactoryCharObjectArrayStringConverterFactory_CharecterArrayStringConverterEnum *OrgJodaConvertFactoryCharObjectArrayStringConverterFactory_CharecterArrayStringConverterEnum_values_[];

#define OrgJodaConvertFactoryCharObjectArrayStringConverterFactory_CharecterArrayStringConverterEnum_INSTANCE OrgJodaConvertFactoryCharObjectArrayStringConverterFactory_CharecterArrayStringConverterEnum_values_[OrgJodaConvertFactoryCharObjectArrayStringConverterFactory_CharecterArrayStringConverter_INSTANCE]
J2OBJC_ENUM_CONSTANT_GETTER(OrgJodaConvertFactoryCharObjectArrayStringConverterFactory_CharecterArrayStringConverterEnum, INSTANCE)

J2OBJC_TYPE_LITERAL_HEADER(OrgJodaConvertFactoryCharObjectArrayStringConverterFactory_CharecterArrayStringConverterEnum)

#endif // _OrgJodaConvertFactoryCharObjectArrayStringConverterFactory_H_
