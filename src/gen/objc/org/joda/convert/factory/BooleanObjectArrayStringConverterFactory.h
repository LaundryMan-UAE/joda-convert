//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/andrefonseca/Documents/PodsFolders/joda-convert/src/main/java/org/joda/convert/factory/BooleanObjectArrayStringConverterFactory.java
//

#include "J2ObjC_header.h"

#pragma push_macro("OrgJodaConvertFactoryBooleanObjectArrayStringConverterFactory_INCLUDE_ALL")
#ifdef OrgJodaConvertFactoryBooleanObjectArrayStringConverterFactory_RESTRICT
#define OrgJodaConvertFactoryBooleanObjectArrayStringConverterFactory_INCLUDE_ALL 0
#else
#define OrgJodaConvertFactoryBooleanObjectArrayStringConverterFactory_INCLUDE_ALL 1
#endif
#undef OrgJodaConvertFactoryBooleanObjectArrayStringConverterFactory_RESTRICT

#if !defined (OrgJodaConvertFactoryBooleanObjectArrayStringConverterFactory_) && (OrgJodaConvertFactoryBooleanObjectArrayStringConverterFactory_INCLUDE_ALL || defined(OrgJodaConvertFactoryBooleanObjectArrayStringConverterFactory_INCLUDE))
#define OrgJodaConvertFactoryBooleanObjectArrayStringConverterFactory_

#define OrgJodaConvertStringConverterFactory_RESTRICT 1
#define OrgJodaConvertStringConverterFactory_INCLUDE 1
#include "org/joda/convert/StringConverterFactory.h"

@class IOSClass;
@protocol OrgJodaConvertStringConverter;

/*!
 @brief Factory for <code>StringConverter</code> providing support for Boolean object array
 as a sequence of 'T', 'F' and '-' for null.
 <p>
 This is intended as a human readable format, not a compact format.
 <p>
 To use, simply register the instance with a <code>StringConvert</code> instance.
 <p>
 This class is immutable and thread-safe.
 @since 1.5
 */
@interface OrgJodaConvertFactoryBooleanObjectArrayStringConverterFactory : NSObject < OrgJodaConvertStringConverterFactory >

#pragma mark Public

/*!
 @brief Finds a converter by type.
 @param cls  the type to lookup, not null
 @return the converter, null if not found
 @throws RuntimeException (or subclass) if source code is invalid
 */
- (id<OrgJodaConvertStringConverter>)findConverterWithIOSClass:(IOSClass *)cls;

- (NSString *)description;

@end

J2OBJC_STATIC_INIT(OrgJodaConvertFactoryBooleanObjectArrayStringConverterFactory)

/*!
 @brief Singleton instance.
 */
inline id<OrgJodaConvertStringConverterFactory> OrgJodaConvertFactoryBooleanObjectArrayStringConverterFactory_get_INSTANCE();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT id<OrgJodaConvertStringConverterFactory> OrgJodaConvertFactoryBooleanObjectArrayStringConverterFactory_INSTANCE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgJodaConvertFactoryBooleanObjectArrayStringConverterFactory, INSTANCE, id<OrgJodaConvertStringConverterFactory>)

J2OBJC_TYPE_LITERAL_HEADER(OrgJodaConvertFactoryBooleanObjectArrayStringConverterFactory)

#endif

#if !defined (OrgJodaConvertFactoryBooleanObjectArrayStringConverterFactory_BooleanArrayStringConverter_) && (OrgJodaConvertFactoryBooleanObjectArrayStringConverterFactory_INCLUDE_ALL || defined(OrgJodaConvertFactoryBooleanObjectArrayStringConverterFactory_BooleanArrayStringConverter_INCLUDE))
#define OrgJodaConvertFactoryBooleanObjectArrayStringConverterFactory_BooleanArrayStringConverter_

#define JavaLangEnum_RESTRICT 1
#define JavaLangEnum_INCLUDE 1
#include "java/lang/Enum.h"

#define OrgJodaConvertTypedStringConverter_RESTRICT 1
#define OrgJodaConvertTypedStringConverter_INCLUDE 1
#include "org/joda/convert/TypedStringConverter.h"

typedef NS_ENUM(NSUInteger, OrgJodaConvertFactoryBooleanObjectArrayStringConverterFactory_BooleanArrayStringConverter_Enum) {
  OrgJodaConvertFactoryBooleanObjectArrayStringConverterFactory_BooleanArrayStringConverter_Enum_INSTANCE = 0,
};

@interface OrgJodaConvertFactoryBooleanObjectArrayStringConverterFactory_BooleanArrayStringConverter : JavaLangEnum < NSCopying, OrgJodaConvertTypedStringConverter >

#pragma mark Package-Private

+ (IOSObjectArray *)values;

+ (OrgJodaConvertFactoryBooleanObjectArrayStringConverterFactory_BooleanArrayStringConverter *)valueOfWithNSString:(NSString *)name;

- (id)copyWithZone:(NSZone *)zone;

@end

J2OBJC_STATIC_INIT(OrgJodaConvertFactoryBooleanObjectArrayStringConverterFactory_BooleanArrayStringConverter)

/*! INTERNAL ONLY - Use enum accessors declared below. */
FOUNDATION_EXPORT OrgJodaConvertFactoryBooleanObjectArrayStringConverterFactory_BooleanArrayStringConverter *OrgJodaConvertFactoryBooleanObjectArrayStringConverterFactory_BooleanArrayStringConverter_values_[];

inline OrgJodaConvertFactoryBooleanObjectArrayStringConverterFactory_BooleanArrayStringConverter *OrgJodaConvertFactoryBooleanObjectArrayStringConverterFactory_BooleanArrayStringConverter_get_INSTANCE();
J2OBJC_ENUM_CONSTANT(OrgJodaConvertFactoryBooleanObjectArrayStringConverterFactory_BooleanArrayStringConverter, INSTANCE)

FOUNDATION_EXPORT IOSObjectArray *OrgJodaConvertFactoryBooleanObjectArrayStringConverterFactory_BooleanArrayStringConverter_values();

FOUNDATION_EXPORT OrgJodaConvertFactoryBooleanObjectArrayStringConverterFactory_BooleanArrayStringConverter *OrgJodaConvertFactoryBooleanObjectArrayStringConverterFactory_BooleanArrayStringConverter_valueOfWithNSString_(NSString *name);

FOUNDATION_EXPORT OrgJodaConvertFactoryBooleanObjectArrayStringConverterFactory_BooleanArrayStringConverter *OrgJodaConvertFactoryBooleanObjectArrayStringConverterFactory_BooleanArrayStringConverter_fromOrdinal(NSUInteger ordinal);

J2OBJC_TYPE_LITERAL_HEADER(OrgJodaConvertFactoryBooleanObjectArrayStringConverterFactory_BooleanArrayStringConverter)

#endif

#pragma pop_macro("OrgJodaConvertFactoryBooleanObjectArrayStringConverterFactory_INCLUDE_ALL")
