//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/marcussmith/temp/joda-convert/src/main/java/org/joda/convert/factory/ByteObjectArrayStringConverterFactory.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Byte.h"
#include "java/lang/Enum.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/StringBuilder.h"
#include "org/joda/convert/StringConverter.h"
#include "org/joda/convert/StringConverterFactory.h"
#include "org/joda/convert/factory/ByteObjectArrayStringConverterFactory.h"

#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wincomplete-implementation"

@interface OrgJodaConvertFactoryByteObjectArrayStringConverterFactory ()

/*!
 @brief Restricted constructor.
 */
- (instancetype __nonnull)init;

@end

__attribute__((unused)) static void OrgJodaConvertFactoryByteObjectArrayStringConverterFactory_init(OrgJodaConvertFactoryByteObjectArrayStringConverterFactory *self);

__attribute__((unused)) static OrgJodaConvertFactoryByteObjectArrayStringConverterFactory *new_OrgJodaConvertFactoryByteObjectArrayStringConverterFactory_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgJodaConvertFactoryByteObjectArrayStringConverterFactory *create_OrgJodaConvertFactoryByteObjectArrayStringConverterFactory_init(void);

inline IOSObjectArray *OrgJodaConvertFactoryByteObjectArrayStringConverterFactory_ByteArrayStringConverter_get_EMPTY(void);
static IOSObjectArray *OrgJodaConvertFactoryByteObjectArrayStringConverterFactory_ByteArrayStringConverter_EMPTY;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgJodaConvertFactoryByteObjectArrayStringConverterFactory_ByteArrayStringConverter, EMPTY, IOSObjectArray *)

inline NSString *OrgJodaConvertFactoryByteObjectArrayStringConverterFactory_ByteArrayStringConverter_get_HEX(void);
static NSString *OrgJodaConvertFactoryByteObjectArrayStringConverterFactory_ByteArrayStringConverter_HEX = @"0123456789ABCDEF";
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgJodaConvertFactoryByteObjectArrayStringConverterFactory_ByteArrayStringConverter, HEX, NSString *)

__attribute__((unused)) static void OrgJodaConvertFactoryByteObjectArrayStringConverterFactory_ByteArrayStringConverter_initWithNSString_withInt_(OrgJodaConvertFactoryByteObjectArrayStringConverterFactory_ByteArrayStringConverter *self, NSString *__name, jint __ordinal);

@interface OrgJodaConvertFactoryByteObjectArrayStringConverterFactory_ByteArrayStringConverter_1 : OrgJodaConvertFactoryByteObjectArrayStringConverterFactory_ByteArrayStringConverter

- (NSString *)convertToStringWithId:(IOSObjectArray *)array;

- (IOSObjectArray *)convertFromStringWithIOSClass:(IOSClass *)cls
                                     withNSString:(NSString *)str;

- (IOSClass *)getEffectiveType;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgJodaConvertFactoryByteObjectArrayStringConverterFactory_ByteArrayStringConverter_1)

__attribute__((unused)) static void OrgJodaConvertFactoryByteObjectArrayStringConverterFactory_ByteArrayStringConverter_1_initWithNSString_withInt_(OrgJodaConvertFactoryByteObjectArrayStringConverterFactory_ByteArrayStringConverter_1 *self, NSString *__name, jint __ordinal);

J2OBJC_INITIALIZED_DEFN(OrgJodaConvertFactoryByteObjectArrayStringConverterFactory)

id<OrgJodaConvertStringConverterFactory> OrgJodaConvertFactoryByteObjectArrayStringConverterFactory_INSTANCE;

@implementation OrgJodaConvertFactoryByteObjectArrayStringConverterFactory

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype __nonnull)init {
  OrgJodaConvertFactoryByteObjectArrayStringConverterFactory_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id<OrgJodaConvertStringConverter>)findConverterWithIOSClass:(IOSClass *)cls {
  if (cls == IOSClass_arrayType(JavaLangByte_class_(), 1)) {
    return JreLoadEnum(OrgJodaConvertFactoryByteObjectArrayStringConverterFactory_ByteArrayStringConverter, INSTANCE);
  }
  return nil;
}

- (NSString *)description {
  return [[self java_getClass] getSimpleName];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaConvertStringConverter;", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, "LNSString;", 0x1, 3, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(findConverterWithIOSClass:);
  methods[2].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "INSTANCE", "LOrgJodaConvertStringConverterFactory;", .constantValue.asLong = 0, 0x19, -1, 4, -1, -1 },
  };
  static const void *ptrTable[] = { "findConverter", "LIOSClass;", "(Ljava/lang/Class<*>;)Lorg/joda/convert/StringConverter<*>;", "toString", &OrgJodaConvertFactoryByteObjectArrayStringConverterFactory_INSTANCE, "LOrgJodaConvertFactoryByteObjectArrayStringConverterFactory_ByteArrayStringConverter;" };
  static const J2ObjcClassInfo _OrgJodaConvertFactoryByteObjectArrayStringConverterFactory = { "ByteObjectArrayStringConverterFactory", "org.joda.convert.factory", ptrTable, methods, fields, 7, 0x11, 3, 1, -1, 5, -1, -1, -1 };
  return &_OrgJodaConvertFactoryByteObjectArrayStringConverterFactory;
}

+ (void)initialize {
  if (self == [OrgJodaConvertFactoryByteObjectArrayStringConverterFactory class]) {
    JreStrongAssignAndConsume(&OrgJodaConvertFactoryByteObjectArrayStringConverterFactory_INSTANCE, new_OrgJodaConvertFactoryByteObjectArrayStringConverterFactory_init());
    J2OBJC_SET_INITIALIZED(OrgJodaConvertFactoryByteObjectArrayStringConverterFactory)
  }
}

@end

void OrgJodaConvertFactoryByteObjectArrayStringConverterFactory_init(OrgJodaConvertFactoryByteObjectArrayStringConverterFactory *self) {
  NSObject_init(self);
}

OrgJodaConvertFactoryByteObjectArrayStringConverterFactory *new_OrgJodaConvertFactoryByteObjectArrayStringConverterFactory_init() {
  J2OBJC_NEW_IMPL(OrgJodaConvertFactoryByteObjectArrayStringConverterFactory, init)
}

OrgJodaConvertFactoryByteObjectArrayStringConverterFactory *create_OrgJodaConvertFactoryByteObjectArrayStringConverterFactory_init() {
  J2OBJC_CREATE_IMPL(OrgJodaConvertFactoryByteObjectArrayStringConverterFactory, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJodaConvertFactoryByteObjectArrayStringConverterFactory)

J2OBJC_INITIALIZED_DEFN(OrgJodaConvertFactoryByteObjectArrayStringConverterFactory_ByteArrayStringConverter)

OrgJodaConvertFactoryByteObjectArrayStringConverterFactory_ByteArrayStringConverter *OrgJodaConvertFactoryByteObjectArrayStringConverterFactory_ByteArrayStringConverter_values_[1];

@implementation OrgJodaConvertFactoryByteObjectArrayStringConverterFactory_ByteArrayStringConverter

+ (IOSObjectArray *)values {
  return OrgJodaConvertFactoryByteObjectArrayStringConverterFactory_ByteArrayStringConverter_values();
}

+ (OrgJodaConvertFactoryByteObjectArrayStringConverterFactory_ByteArrayStringConverter *)valueOfWithNSString:(NSString *)name {
  return OrgJodaConvertFactoryByteObjectArrayStringConverterFactory_ByteArrayStringConverter_valueOfWithNSString_(name);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "[LOrgJodaConvertFactoryByteObjectArrayStringConverterFactory_ByteArrayStringConverter;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaConvertFactoryByteObjectArrayStringConverterFactory_ByteArrayStringConverter;", 0x9, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(values);
  methods[1].selector = @selector(valueOfWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "INSTANCE", "LOrgJodaConvertFactoryByteObjectArrayStringConverterFactory_ByteArrayStringConverter;", .constantValue.asLong = 0, 0x4019, -1, 2, -1, -1 },
    { "EMPTY", "[LJavaLangByte;", .constantValue.asLong = 0, 0x1a, -1, 3, -1, -1 },
    { "HEX", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 4, -1, -1 },
  };
  static const void *ptrTable[] = { "valueOf", "LNSString;", &JreEnum(OrgJodaConvertFactoryByteObjectArrayStringConverterFactory_ByteArrayStringConverter, INSTANCE), &OrgJodaConvertFactoryByteObjectArrayStringConverterFactory_ByteArrayStringConverter_EMPTY, &OrgJodaConvertFactoryByteObjectArrayStringConverterFactory_ByteArrayStringConverter_HEX, "LOrgJodaConvertFactoryByteObjectArrayStringConverterFactory;", "Ljava/lang/Enum<Lorg/joda/convert/factory/ByteObjectArrayStringConverterFactory$ByteArrayStringConverter;>;Lorg/joda/convert/TypedStringConverter<[Ljava/lang/Byte;>;" };
  static const J2ObjcClassInfo _OrgJodaConvertFactoryByteObjectArrayStringConverterFactory_ByteArrayStringConverter = { "ByteArrayStringConverter", "org.joda.convert.factory", ptrTable, methods, fields, 7, 0x4408, 2, 3, 5, -1, -1, 6, -1 };
  return &_OrgJodaConvertFactoryByteObjectArrayStringConverterFactory_ByteArrayStringConverter;
}

+ (void)initialize {
  if (self == [OrgJodaConvertFactoryByteObjectArrayStringConverterFactory_ByteArrayStringConverter class]) {
    size_t allocSize = 0;
    size_t objSize_INSTANCE = class_getInstanceSize([OrgJodaConvertFactoryByteObjectArrayStringConverterFactory_ByteArrayStringConverter_1 class]);
    allocSize += objSize_INSTANCE;
    uintptr_t ptr = (uintptr_t)calloc(allocSize, 1);
    id e;
    ((void) (JreEnum(OrgJodaConvertFactoryByteObjectArrayStringConverterFactory_ByteArrayStringConverter, INSTANCE) = e = objc_constructInstance([OrgJodaConvertFactoryByteObjectArrayStringConverterFactory_ByteArrayStringConverter_1 class], (void *)ptr)), ptr += objSize_INSTANCE);
    OrgJodaConvertFactoryByteObjectArrayStringConverterFactory_ByteArrayStringConverter_1_initWithNSString_withInt_(e, @"INSTANCE", 0);
    JreStrongAssignAndConsume(&OrgJodaConvertFactoryByteObjectArrayStringConverterFactory_ByteArrayStringConverter_EMPTY, [IOSObjectArray newArrayWithLength:0 type:JavaLangByte_class_()]);
    J2OBJC_SET_INITIALIZED(OrgJodaConvertFactoryByteObjectArrayStringConverterFactory_ByteArrayStringConverter)
  }
}

@end

void OrgJodaConvertFactoryByteObjectArrayStringConverterFactory_ByteArrayStringConverter_initWithNSString_withInt_(OrgJodaConvertFactoryByteObjectArrayStringConverterFactory_ByteArrayStringConverter *self, NSString *__name, jint __ordinal) {
  JavaLangEnum_initWithNSString_withInt_(self, __name, __ordinal);
}

IOSObjectArray *OrgJodaConvertFactoryByteObjectArrayStringConverterFactory_ByteArrayStringConverter_values() {
  OrgJodaConvertFactoryByteObjectArrayStringConverterFactory_ByteArrayStringConverter_initialize();
  return [IOSObjectArray arrayWithObjects:OrgJodaConvertFactoryByteObjectArrayStringConverterFactory_ByteArrayStringConverter_values_ count:1 type:OrgJodaConvertFactoryByteObjectArrayStringConverterFactory_ByteArrayStringConverter_class_()];
}

OrgJodaConvertFactoryByteObjectArrayStringConverterFactory_ByteArrayStringConverter *OrgJodaConvertFactoryByteObjectArrayStringConverterFactory_ByteArrayStringConverter_valueOfWithNSString_(NSString *name) {
  OrgJodaConvertFactoryByteObjectArrayStringConverterFactory_ByteArrayStringConverter_initialize();
  for (int i = 0; i < 1; i++) {
    OrgJodaConvertFactoryByteObjectArrayStringConverterFactory_ByteArrayStringConverter *e = OrgJodaConvertFactoryByteObjectArrayStringConverterFactory_ByteArrayStringConverter_values_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw create_JavaLangIllegalArgumentException_initWithNSString_(name);
  return nil;
}

OrgJodaConvertFactoryByteObjectArrayStringConverterFactory_ByteArrayStringConverter *OrgJodaConvertFactoryByteObjectArrayStringConverterFactory_ByteArrayStringConverter_fromOrdinal(NSUInteger ordinal) {
  OrgJodaConvertFactoryByteObjectArrayStringConverterFactory_ByteArrayStringConverter_initialize();
  if (ordinal >= 1) {
    return nil;
  }
  return OrgJodaConvertFactoryByteObjectArrayStringConverterFactory_ByteArrayStringConverter_values_[ordinal];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJodaConvertFactoryByteObjectArrayStringConverterFactory_ByteArrayStringConverter)

@implementation OrgJodaConvertFactoryByteObjectArrayStringConverterFactory_ByteArrayStringConverter_1

- (NSString *)convertToStringWithId:(IOSObjectArray *)array {
  if (((IOSObjectArray *) nil_chk(array))->size_ == 0) {
    return @"";
  }
  JavaLangStringBuilder *buf = create_JavaLangStringBuilder_initWithInt_(array->size_);
  for (jint i = 0; i < array->size_; i++) {
    if (IOSObjectArray_Get(array, i) == nil) {
      [((JavaLangStringBuilder *) nil_chk([buf appendWithChar:'-'])) appendWithChar:'-'];
    }
    else {
      jint b = [((JavaLangByte *) nil_chk(IOSObjectArray_Get(array, i))) charValue];
      [((JavaLangStringBuilder *) nil_chk([buf appendWithChar:[((NSString *) nil_chk(OrgJodaConvertFactoryByteObjectArrayStringConverterFactory_ByteArrayStringConverter_HEX)) charAtWithInt:JreURShift32((b & (jint) 0xF0), 4)]])) appendWithChar:[OrgJodaConvertFactoryByteObjectArrayStringConverterFactory_ByteArrayStringConverter_HEX charAtWithInt:b & (jint) 0x0F]];
    }
  }
  return [buf description];
}

- (IOSObjectArray *)convertFromStringWithIOSClass:(IOSClass *)cls
                                     withNSString:(NSString *)str {
  if ([((NSString *) nil_chk(str)) java_length] == 0) {
    return JreLoadStatic(OrgJodaConvertFactoryByteObjectArrayStringConverterFactory_ByteArrayStringConverter, EMPTY);
  }
  if ([str java_length] % 2 == 1) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"Invalid Byte[] string");
  }
  IOSObjectArray *array = [IOSObjectArray arrayWithLength:[str java_length] / 2 type:JavaLangByte_class_()];
  for (jint i = 0; i < array->size_; i++) {
    NSString *in = [str java_substring:i * 2 endIndex:i * 2 + 2];
    if ([((NSString *) nil_chk(in)) isEqual:@"--"]) {
      IOSObjectArray_Set(array, i, nil);
    }
    else {
      IOSObjectArray_Set(array, i, JavaLangByte_valueOfWithByte_((jbyte) JavaLangInteger_parseIntWithNSString_withInt_(in, 16)));
    }
  }
  return array;
}

- (IOSClass *)getEffectiveType {
  return IOSClass_arrayType(JavaLangByte_class_(), 1);
}

- (void)dealloc {
  JreCheckFinalize(self, [OrgJodaConvertFactoryByteObjectArrayStringConverterFactory_ByteArrayStringConverter_1 class]);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSString;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "[LJavaLangByte;", 0x1, 2, 3, -1, 4, -1, -1 },
    { NULL, "LIOSClass;", 0x1, -1, -1, -1, 5, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(convertToStringWithId:);
  methods[1].selector = @selector(convertFromStringWithIOSClass:withNSString:);
  methods[2].selector = @selector(getEffectiveType);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "convertToString", "[LJavaLangByte;", "convertFromString", "LIOSClass;LNSString;", "(Ljava/lang/Class<+[Ljava/lang/Byte;>;Ljava/lang/String;)[Ljava/lang/Byte;", "()Ljava/lang/Class<*>;", "LOrgJodaConvertFactoryByteObjectArrayStringConverterFactory_ByteArrayStringConverter;" };
  static const J2ObjcClassInfo _OrgJodaConvertFactoryByteObjectArrayStringConverterFactory_ByteArrayStringConverter_1 = { "", "org.joda.convert.factory", ptrTable, methods, NULL, 7, 0xc018, 3, 0, 6, -1, -1, -1, -1 };
  return &_OrgJodaConvertFactoryByteObjectArrayStringConverterFactory_ByteArrayStringConverter_1;
}

@end

void OrgJodaConvertFactoryByteObjectArrayStringConverterFactory_ByteArrayStringConverter_1_initWithNSString_withInt_(OrgJodaConvertFactoryByteObjectArrayStringConverterFactory_ByteArrayStringConverter_1 *self, NSString *__name, jint __ordinal) {
  OrgJodaConvertFactoryByteObjectArrayStringConverterFactory_ByteArrayStringConverter_initWithNSString_withInt_(self, __name, __ordinal);
}
