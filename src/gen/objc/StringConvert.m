//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/nbransby/Documents/joda-convert/src/main/java/org/joda/convert/StringConvert.java
//

#include "AnnotationStringConverterFactory.h"
#include "BooleanArrayStringConverterFactory.h"
#include "BooleanObjectArrayStringConverterFactory.h"
#include "ByteObjectArrayStringConverterFactory.h"
#include "CharObjectArrayStringConverterFactory.h"
#include "EnumStringConverterFactory.h"
#include "FromStringConverter.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "JDKStringConverter.h"
#include "MethodConstructorStringConverter.h"
#include "MethodsStringConverter.h"
#include "NumericArrayStringConverterFactory.h"
#include "NumericObjectArrayStringConverterFactory.h"
#include "StringConvert.h"
#include "StringConverter.h"
#include "StringConverterFactory.h"
#include "ToStringConverter.h"
#include "TypedAdapter.h"
#include "TypedStringConverter.h"
#include "java/lang/Boolean.h"
#include "java/lang/Byte.h"
#include "java/lang/CharSequence.h"
#include "java/lang/Character.h"
#include "java/lang/ClassLoader.h"
#include "java/lang/Double.h"
#include "java/lang/Exception.h"
#include "java/lang/Float.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Integer.h"
#include "java/lang/Long.h"
#include "java/lang/NoSuchMethodException.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/Short.h"
#include "java/lang/reflect/Constructor.h"
#include "java/lang/reflect/Method.h"
#include "java/lang/reflect/Modifier.h"
#include "java/util/Arrays.h"
#include "java/util/List.h"
#include "java/util/concurrent/ConcurrentHashMap.h"
#include "java/util/concurrent/ConcurrentMap.h"
#include "java/util/concurrent/CopyOnWriteArrayList.h"

BOOL OrgJodaConvertStringConvert_initialized = NO;

@implementation OrgJodaConvertStringConvert

OrgJodaConvertStringConvert * OrgJodaConvertStringConvert_INSTANCE_;
id<OrgJodaConvertTypedStringConverter> OrgJodaConvertStringConvert_CACHED_NULL_;

+ (OrgJodaConvertStringConvert *)create {
  return OrgJodaConvertStringConvert_create();
}

- (instancetype)init {
  return [self initOrgJodaConvertStringConvertWithBoolean:YES withOrgJodaConvertStringConverterFactoryArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithProtocol:@protocol(OrgJodaConvertStringConverterFactory)]]];
}

- (instancetype)initOrgJodaConvertStringConvertWithBoolean:(jboolean)includeJdkConverters
             withOrgJodaConvertStringConverterFactoryArray:(IOSObjectArray *)factories {
  if (self = [super init]) {
    factories_ = [[JavaUtilConcurrentCopyOnWriteArrayList alloc] init];
    registered_ = [[JavaUtilConcurrentConcurrentHashMap alloc] init];
    if (factories == nil) {
      @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:@"StringConverterFactory array must not be null"];
    }
    for (jint i = 0; i < ((IOSObjectArray *) nil_chk(factories))->size_; i++) {
      if (IOSObjectArray_Get(factories, i) == nil) {
        @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:@"StringConverterFactory array must not contain a null element"];
      }
    }
    if (includeJdkConverters) {
      {
        IOSObjectArray *a__ = OrgJodaConvertJDKStringConverterEnum_values();
        OrgJodaConvertJDKStringConverterEnum * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
        OrgJodaConvertJDKStringConverterEnum * const *e__ = b__ + a__->size_;
        while (b__ < e__) {
          OrgJodaConvertJDKStringConverterEnum *conv = *b__++;
          (void) [registered_ putWithId:[((OrgJodaConvertJDKStringConverterEnum *) nil_chk(conv)) getType] withId:conv];
        }
      }
      (void) [registered_ putWithId:JavaLangBoolean_get_TYPE_() withId:OrgJodaConvertJDKStringConverterEnum_get_BOOLEAN()];
      (void) [registered_ putWithId:JavaLangByte_get_TYPE_() withId:OrgJodaConvertJDKStringConverterEnum_get_BYTE()];
      (void) [registered_ putWithId:JavaLangShort_get_TYPE_() withId:OrgJodaConvertJDKStringConverterEnum_get_SHORT()];
      (void) [registered_ putWithId:JavaLangInteger_get_TYPE_() withId:OrgJodaConvertJDKStringConverterEnum_get_INTEGER()];
      (void) [registered_ putWithId:JavaLangLong_get_TYPE_() withId:OrgJodaConvertJDKStringConverterEnum_get_LONG()];
      (void) [registered_ putWithId:JavaLangFloat_get_TYPE_() withId:OrgJodaConvertJDKStringConverterEnum_get_FLOAT()];
      (void) [registered_ putWithId:JavaLangDouble_get_TYPE_() withId:OrgJodaConvertJDKStringConverterEnum_get_DOUBLE()];
      (void) [registered_ putWithId:JavaLangCharacter_get_TYPE_() withId:OrgJodaConvertJDKStringConverterEnum_get_CHARACTER()];
      [self tryRegisterWithNSString:@"java.time.Instant" withNSString:@"parse"];
      [self tryRegisterWithNSString:@"java.time.Duration" withNSString:@"parse"];
      [self tryRegisterWithNSString:@"java.time.LocalDate" withNSString:@"parse"];
      [self tryRegisterWithNSString:@"java.time.LocalTime" withNSString:@"parse"];
      [self tryRegisterWithNSString:@"java.time.LocalDateTime" withNSString:@"parse"];
      [self tryRegisterWithNSString:@"java.time.OffsetTime" withNSString:@"parse"];
      [self tryRegisterWithNSString:@"java.time.OffsetDateTime" withNSString:@"parse"];
      [self tryRegisterWithNSString:@"java.time.ZonedDateTime" withNSString:@"parse"];
      [self tryRegisterWithNSString:@"java.time.Year" withNSString:@"parse"];
      [self tryRegisterWithNSString:@"java.time.YearMonth" withNSString:@"parse"];
      [self tryRegisterWithNSString:@"java.time.MonthDay" withNSString:@"parse"];
      [self tryRegisterWithNSString:@"java.time.Period" withNSString:@"parse"];
      [self tryRegisterWithNSString:@"java.time.ZoneOffset" withNSString:@"of"];
      [self tryRegisterWithNSString:@"java.time.ZoneId" withNSString:@"of"];
      [self tryRegisterWithNSString:@"org.threeten.bp.Instant" withNSString:@"parse"];
      [self tryRegisterWithNSString:@"org.threeten.bp.Duration" withNSString:@"parse"];
      [self tryRegisterWithNSString:@"org.threeten.bp.LocalDate" withNSString:@"parse"];
      [self tryRegisterWithNSString:@"org.threeten.bp.LocalTime" withNSString:@"parse"];
      [self tryRegisterWithNSString:@"org.threeten.bp.LocalDateTime" withNSString:@"parse"];
      [self tryRegisterWithNSString:@"org.threeten.bp.OffsetTime" withNSString:@"parse"];
      [self tryRegisterWithNSString:@"org.threeten.bp.OffsetDateTime" withNSString:@"parse"];
      [self tryRegisterWithNSString:@"org.threeten.bp.ZonedDateTime" withNSString:@"parse"];
      [self tryRegisterWithNSString:@"org.threeten.bp.Year" withNSString:@"parse"];
      [self tryRegisterWithNSString:@"org.threeten.bp.YearMonth" withNSString:@"parse"];
      [self tryRegisterWithNSString:@"org.threeten.bp.MonthDay" withNSString:@"parse"];
      [self tryRegisterWithNSString:@"org.threeten.bp.Period" withNSString:@"parse"];
      [self tryRegisterWithNSString:@"org.threeten.bp.ZoneOffset" withNSString:@"of"];
      [self tryRegisterWithNSString:@"org.threeten.bp.ZoneId" withNSString:@"of"];
      [self tryRegisterWithNSString:@"javax.time.Instant" withNSString:@"parse"];
      [self tryRegisterWithNSString:@"javax.time.Duration" withNSString:@"parse"];
      [self tryRegisterWithNSString:@"javax.time.calendar.LocalDate" withNSString:@"parse"];
      [self tryRegisterWithNSString:@"javax.time.calendar.LocalTime" withNSString:@"parse"];
      [self tryRegisterWithNSString:@"javax.time.calendar.LocalDateTime" withNSString:@"parse"];
      [self tryRegisterWithNSString:@"javax.time.calendar.OffsetDate" withNSString:@"parse"];
      [self tryRegisterWithNSString:@"javax.time.calendar.OffsetTime" withNSString:@"parse"];
      [self tryRegisterWithNSString:@"javax.time.calendar.OffsetDateTime" withNSString:@"parse"];
      [self tryRegisterWithNSString:@"javax.time.calendar.ZonedDateTime" withNSString:@"parse"];
      [self tryRegisterWithNSString:@"javax.time.calendar.Year" withNSString:@"parse"];
      [self tryRegisterWithNSString:@"javax.time.calendar.YearMonth" withNSString:@"parse"];
      [self tryRegisterWithNSString:@"javax.time.calendar.MonthDay" withNSString:@"parse"];
      [self tryRegisterWithNSString:@"javax.time.calendar.Period" withNSString:@"parse"];
      [self tryRegisterWithNSString:@"javax.time.calendar.ZoneOffset" withNSString:@"of"];
      [self tryRegisterWithNSString:@"javax.time.calendar.ZoneId" withNSString:@"of"];
      [self tryRegisterWithNSString:@"javax.time.calendar.TimeZone" withNSString:@"of"];
    }
    if (factories->size_ > 0) {
      [self->factories_ addAllWithJavaUtilCollection:JavaUtilArrays_asListWithNSObjectArray_(factories)];
    }
    [self->factories_ addWithId:OrgJodaConvertAnnotationStringConverterFactory_get_INSTANCE_()];
    if (includeJdkConverters) {
      [self->factories_ addWithId:OrgJodaConvertEnumStringConverterFactory_get_INSTANCE_()];
    }
  }
  return self;
}

- (instancetype)initWithBoolean:(jboolean)includeJdkConverters
withOrgJodaConvertStringConverterFactoryArray:(IOSObjectArray *)factories {
  return [self initOrgJodaConvertStringConvertWithBoolean:includeJdkConverters withOrgJodaConvertStringConverterFactoryArray:factories];
}

- (void)tryRegisterWithNSString:(NSString *)className_
                   withNSString:(NSString *)fromStringMethodName {
  @try {
    IOSClass *cls = [((JavaLangClassLoader *) nil_chk([[self getClass] getClassLoader])) loadClassWithNSString:className_];
    [self registerMethodsWithIOSClass:cls withNSString:@"toString" withNSString:fromStringMethodName];
  }
  @catch (JavaLangException *ex) {
  }
}

- (NSString *)convertToStringWithId:(id)object {
  if (object == nil) {
    return nil;
  }
  IOSClass *cls = [nil_chk(object) getClass];
  id<OrgJodaConvertStringConverter> conv = [self findConverterNoGenericsWithIOSClass:cls];
  return [((id<OrgJodaConvertStringConverter>) nil_chk(conv)) convertToStringWithId:object];
}

- (NSString *)convertToStringWithIOSClass:(IOSClass *)cls
                                   withId:(id)object {
  if (object == nil) {
    return nil;
  }
  id<OrgJodaConvertStringConverter> conv = [self findConverterNoGenericsWithIOSClass:cls];
  return [((id<OrgJodaConvertStringConverter>) nil_chk(conv)) convertToStringWithId:object];
}

- (id)convertFromStringWithIOSClass:(IOSClass *)cls
                       withNSString:(NSString *)str {
  if (str == nil) {
    return nil;
  }
  id<OrgJodaConvertStringConverter> conv = [self findConverterWithIOSClass:cls];
  return [((id<OrgJodaConvertStringConverter>) nil_chk(conv)) convertFromStringWithIOSClass:cls withNSString:str];
}

- (jboolean)isConvertibleWithIOSClass:(IOSClass *)cls {
  @try {
    return cls != nil && [self findConverterQuietWithIOSClass:cls] != nil;
  }
  @catch (JavaLangRuntimeException *ex) {
    return NO;
  }
}

- (id<OrgJodaConvertStringConverter>)findConverterWithIOSClass:(IOSClass *)cls {
  return [self findTypedConverterWithIOSClass:cls];
}

- (id<OrgJodaConvertStringConverter>)findConverterNoGenericsWithIOSClass:(IOSClass *)cls {
  return [self findTypedConverterNoGenericsWithIOSClass:cls];
}

- (id<OrgJodaConvertTypedStringConverter>)findTypedConverterWithIOSClass:(IOSClass *)cls {
  id<OrgJodaConvertTypedStringConverter> conv = [self findConverterQuietWithIOSClass:cls];
  if (conv == nil) {
    @throw [[JavaLangIllegalStateException alloc] initWithNSString:JreStrcat("$@", @"No registered converter found: ", cls)];
  }
  return conv;
}

- (id<OrgJodaConvertTypedStringConverter>)findTypedConverterNoGenericsWithIOSClass:(IOSClass *)cls {
  id<OrgJodaConvertTypedStringConverter> conv = (id<OrgJodaConvertTypedStringConverter>) check_protocol_cast([self findConverterQuietWithIOSClass:cls], @protocol(OrgJodaConvertTypedStringConverter));
  if (conv == nil) {
    @throw [[JavaLangIllegalStateException alloc] initWithNSString:JreStrcat("$@", @"No registered converter found: ", cls)];
  }
  return conv;
}

- (id<OrgJodaConvertTypedStringConverter>)findConverterQuietWithIOSClass:(IOSClass *)cls {
  if (cls == nil) {
    @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:@"Class must not be null"];
  }
  id<OrgJodaConvertTypedStringConverter> conv = (id<OrgJodaConvertTypedStringConverter>) check_protocol_cast([((id<JavaUtilConcurrentConcurrentMap>) nil_chk(registered_)) getWithId:cls], @protocol(OrgJodaConvertTypedStringConverter));
  if (conv == OrgJodaConvertStringConvert_CACHED_NULL_) {
    return nil;
  }
  if (conv == nil) {
    @try {
      conv = [self findAnyConverterWithIOSClass:cls];
    }
    @catch (JavaLangRuntimeException *ex) {
      (void) [registered_ putIfAbsentWithId:cls withId:OrgJodaConvertStringConvert_CACHED_NULL_];
      @throw ex;
    }
    if (conv == nil) {
      (void) [registered_ putIfAbsentWithId:cls withId:OrgJodaConvertStringConvert_CACHED_NULL_];
      return nil;
    }
    (void) [registered_ putIfAbsentWithId:cls withId:conv];
  }
  return conv;
}

- (id<OrgJodaConvertTypedStringConverter>)findAnyConverterWithIOSClass:(IOSClass *)cls {
  id<OrgJodaConvertTypedStringConverter> conv = nil;
  IOSClass *loopCls = [((IOSClass *) nil_chk(cls)) getSuperclass];
  while (loopCls != nil && conv == nil) {
    conv = (id<OrgJodaConvertTypedStringConverter>) check_protocol_cast([((id<JavaUtilConcurrentConcurrentMap>) nil_chk(registered_)) getWithId:loopCls], @protocol(OrgJodaConvertTypedStringConverter));
    if (conv != nil && conv != OrgJodaConvertStringConvert_CACHED_NULL_) {
      return conv;
    }
    loopCls = [((IOSClass *) nil_chk(loopCls)) getSuperclass];
  }
  {
    IOSObjectArray *a__ = [cls getInterfaces];
    IOSClass * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    IOSClass * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      IOSClass *loopIfc = *b__++;
      conv = (id<OrgJodaConvertTypedStringConverter>) check_protocol_cast([((id<JavaUtilConcurrentConcurrentMap>) nil_chk(registered_)) getWithId:loopIfc], @protocol(OrgJodaConvertTypedStringConverter));
      if (conv != nil && conv != OrgJodaConvertStringConvert_CACHED_NULL_) {
        return conv;
      }
    }
  }
  for (id<OrgJodaConvertStringConverterFactory> __strong factory in nil_chk(factories_)) {
    id<OrgJodaConvertStringConverter> factoryConv = (id<OrgJodaConvertStringConverter>) check_protocol_cast([((id<OrgJodaConvertStringConverterFactory>) nil_chk(factory)) findConverterWithIOSClass:cls], @protocol(OrgJodaConvertStringConverter));
    if (factoryConv != nil) {
      return OrgJodaConvertTypedAdapter_adaptWithIOSClass_withOrgJodaConvertStringConverter_(cls, factoryConv);
    }
  }
  return nil;
}

- (void)registerFactoryWithOrgJodaConvertStringConverterFactory:(id<OrgJodaConvertStringConverterFactory>)factory {
  if (factory == nil) {
    @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:@"Factory must not be null"];
  }
  if (self == OrgJodaConvertStringConvert_INSTANCE_) {
    @throw [[JavaLangIllegalStateException alloc] initWithNSString:@"Global singleton cannot be extended"];
  }
  [((JavaUtilConcurrentCopyOnWriteArrayList *) nil_chk(factories_)) addWithInt:0 withId:factory];
}

- (void)register__WithIOSClass:(IOSClass *)cls
withOrgJodaConvertStringConverter:(id<OrgJodaConvertStringConverter>)converter {
  if (cls == nil) {
    @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:@"Class must not be null"];
  }
  if (converter == nil) {
    @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:@"StringConverter must not be null"];
  }
  if (self == OrgJodaConvertStringConvert_INSTANCE_) {
    @throw [[JavaLangIllegalStateException alloc] initWithNSString:@"Global singleton cannot be extended"];
  }
  (void) [((id<JavaUtilConcurrentConcurrentMap>) nil_chk(registered_)) putWithId:cls withId:OrgJodaConvertTypedAdapter_adaptWithIOSClass_withOrgJodaConvertStringConverter_(cls, converter)];
}

- (void)register__WithIOSClass:(IOSClass *)cls
withOrgJodaConvertToStringConverter:(id<OrgJodaConvertToStringConverter>)toString
withOrgJodaConvertFromStringConverter:(id<OrgJodaConvertFromStringConverter>)fromString {
  if (fromString == nil || toString == nil) {
    @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:@"Converters must not be null"];
  }
  [self register__WithIOSClass:cls withOrgJodaConvertStringConverter:[[OrgJodaConvertStringConvert_$2 alloc] initWithOrgJodaConvertToStringConverter:toString withOrgJodaConvertFromStringConverter:fromString withIOSClass:cls]];
}

- (void)registerMethodsWithIOSClass:(IOSClass *)cls
                       withNSString:(NSString *)toStringMethodName
                       withNSString:(NSString *)fromStringMethodName {
  if (cls == nil) {
    @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:@"Class must not be null"];
  }
  if (toStringMethodName == nil || fromStringMethodName == nil) {
    @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:@"Method names must not be null"];
  }
  if (self == OrgJodaConvertStringConvert_INSTANCE_) {
    @throw [[JavaLangIllegalStateException alloc] initWithNSString:@"Global singleton cannot be extended"];
  }
  JavaLangReflectMethod *toString = [self findToStringMethodWithIOSClass:cls withNSString:toStringMethodName];
  JavaLangReflectMethod *fromString = [self findFromStringMethodWithIOSClass:cls withNSString:fromStringMethodName];
  OrgJodaConvertMethodsStringConverter *converter = [[OrgJodaConvertMethodsStringConverter alloc] initWithIOSClass:cls withJavaLangReflectMethod:toString withJavaLangReflectMethod:fromString withIOSClass:cls];
  (void) [((id<JavaUtilConcurrentConcurrentMap>) nil_chk(registered_)) putIfAbsentWithId:cls withId:converter];
}

- (void)registerMethodConstructorWithIOSClass:(IOSClass *)cls
                                 withNSString:(NSString *)toStringMethodName {
  if (cls == nil) {
    @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:@"Class must not be null"];
  }
  if (toStringMethodName == nil) {
    @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:@"Method name must not be null"];
  }
  if (self == OrgJodaConvertStringConvert_INSTANCE_) {
    @throw [[JavaLangIllegalStateException alloc] initWithNSString:@"Global singleton cannot be extended"];
  }
  JavaLangReflectMethod *toString = [self findToStringMethodWithIOSClass:cls withNSString:toStringMethodName];
  JavaLangReflectConstructor *fromString = [self findFromStringConstructorByTypeWithIOSClass:cls];
  OrgJodaConvertMethodConstructorStringConverter *converter = [[OrgJodaConvertMethodConstructorStringConverter alloc] initWithIOSClass:cls withJavaLangReflectMethod:toString withJavaLangReflectConstructor:fromString];
  (void) [((id<JavaUtilConcurrentConcurrentMap>) nil_chk(registered_)) putIfAbsentWithId:cls withId:converter];
}

- (JavaLangReflectMethod *)findToStringMethodWithIOSClass:(IOSClass *)cls
                                             withNSString:(NSString *)methodName {
  JavaLangReflectMethod *m;
  @try {
    m = [((IOSClass *) nil_chk(cls)) getMethod:methodName parameterTypes:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[IOSClass class]]]];
  }
  @catch (JavaLangNoSuchMethodException *ex) {
    @throw [[JavaLangIllegalArgumentException alloc] initWithJavaLangThrowable:ex];
  }
  if (JavaLangReflectModifier_isStaticWithInt_([((JavaLangReflectMethod *) nil_chk(m)) getModifiers])) {
    @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:JreStrcat("$$", @"Method must not be static: ", methodName)];
  }
  return m;
}

- (JavaLangReflectMethod *)findFromStringMethodWithIOSClass:(IOSClass *)cls
                                               withNSString:(NSString *)methodName {
  JavaLangReflectMethod *m;
  @try {
    m = [((IOSClass *) nil_chk(cls)) getMethod:methodName parameterTypes:[IOSObjectArray arrayWithObjects:(id[]){ [IOSClass classWithClass:[NSString class]] } count:1 type:[IOSClass classWithClass:[IOSClass class]]]];
  }
  @catch (JavaLangNoSuchMethodException *ex) {
    @try {
      m = [((IOSClass *) nil_chk(cls)) getMethod:methodName parameterTypes:[IOSObjectArray arrayWithObjects:(id[]){ [IOSClass classWithProtocol:@protocol(JavaLangCharSequence)] } count:1 type:[IOSClass classWithClass:[IOSClass class]]]];
    }
    @catch (JavaLangNoSuchMethodException *ex2) {
      @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:@"Method not found" withJavaLangThrowable:ex2];
    }
  }
  if (JavaLangReflectModifier_isStaticWithInt_([((JavaLangReflectMethod *) nil_chk(m)) getModifiers]) == NO) {
    @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:JreStrcat("$$", @"Method must be static: ", methodName)];
  }
  return m;
}

- (JavaLangReflectConstructor *)findFromStringConstructorByTypeWithIOSClass:(IOSClass *)cls {
  @try {
    return [((IOSClass *) nil_chk(cls)) getDeclaredConstructor:[IOSObjectArray arrayWithObjects:(id[]){ [IOSClass classWithClass:[NSString class]] } count:1 type:[IOSClass classWithClass:[IOSClass class]]]];
  }
  @catch (JavaLangNoSuchMethodException *ex) {
    @try {
      return [((IOSClass *) nil_chk(cls)) getDeclaredConstructor:[IOSObjectArray arrayWithObjects:(id[]){ [IOSClass classWithProtocol:@protocol(JavaLangCharSequence)] } count:1 type:[IOSClass classWithClass:[IOSClass class]]]];
    }
    @catch (JavaLangNoSuchMethodException *ex2) {
      @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:@"Constructor not found" withJavaLangThrowable:ex2];
    }
  }
}

- (NSString *)description {
  return [[self getClass] getSimpleName];
}

- (void)copyAllFieldsTo:(OrgJodaConvertStringConvert *)other {
  [super copyAllFieldsTo:other];
  other->factories_ = factories_;
  other->registered_ = registered_;
}

+ (void)initialize {
  if (self == [OrgJodaConvertStringConvert class]) {
    OrgJodaConvertStringConvert_INSTANCE_ = [[OrgJodaConvertStringConvert alloc] init];
    OrgJodaConvertStringConvert_CACHED_NULL_ = [[OrgJodaConvertStringConvert_$1 alloc] init];
    J2OBJC_SET_INITIALIZED(OrgJodaConvertStringConvert)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "create", NULL, "Lorg.joda.convert.StringConvert;", 0x9, NULL },
    { "init", "StringConvert", NULL, 0x1, NULL },
    { "initWithBoolean:withOrgJodaConvertStringConverterFactoryArray:", "StringConvert", NULL, 0x81, NULL },
    { "tryRegisterWithNSString:withNSString:", "tryRegister", "V", 0x2, NULL },
    { "convertToStringWithId:", "convertToString", "Ljava.lang.String;", 0x1, NULL },
    { "convertToStringWithIOSClass:withId:", "convertToString", "Ljava.lang.String;", 0x1, NULL },
    { "convertFromStringWithIOSClass:withNSString:", "convertFromString", "TT;", 0x1, NULL },
    { "isConvertibleWithIOSClass:", "isConvertible", "Z", 0x1, NULL },
    { "findConverterWithIOSClass:", "findConverter", "Lorg.joda.convert.StringConverter;", 0x1, NULL },
    { "findConverterNoGenericsWithIOSClass:", "findConverterNoGenerics", "Lorg.joda.convert.StringConverter;", 0x1, NULL },
    { "findTypedConverterWithIOSClass:", "findTypedConverter", "Lorg.joda.convert.TypedStringConverter;", 0x1, NULL },
    { "findTypedConverterNoGenericsWithIOSClass:", "findTypedConverterNoGenerics", "Lorg.joda.convert.TypedStringConverter;", 0x1, NULL },
    { "findConverterQuietWithIOSClass:", "findConverterQuiet", "Lorg.joda.convert.TypedStringConverter;", 0x2, NULL },
    { "findAnyConverterWithIOSClass:", "findAnyConverter", "Lorg.joda.convert.TypedStringConverter;", 0x2, NULL },
    { "registerFactoryWithOrgJodaConvertStringConverterFactory:", "registerFactory", "V", 0x1, NULL },
    { "register__WithIOSClass:withOrgJodaConvertStringConverter:", "register", "V", 0x1, NULL },
    { "register__WithIOSClass:withOrgJodaConvertToStringConverter:withOrgJodaConvertFromStringConverter:", "register", "V", 0x1, NULL },
    { "registerMethodsWithIOSClass:withNSString:withNSString:", "registerMethods", "V", 0x1, NULL },
    { "registerMethodConstructorWithIOSClass:withNSString:", "registerMethodConstructor", "V", 0x1, NULL },
    { "findToStringMethodWithIOSClass:withNSString:", "findToStringMethod", "Ljava.lang.reflect.Method;", 0x2, NULL },
    { "findFromStringMethodWithIOSClass:withNSString:", "findFromStringMethod", "Ljava.lang.reflect.Method;", 0x2, NULL },
    { "findFromStringConstructorByTypeWithIOSClass:", "findFromStringConstructorByType", "Ljava.lang.reflect.Constructor;", 0x2, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "INSTANCE_", NULL, 0x19, "Lorg.joda.convert.StringConvert;", &OrgJodaConvertStringConvert_INSTANCE_,  },
    { "CACHED_NULL_", NULL, 0x1a, "Lorg.joda.convert.TypedStringConverter;", &OrgJodaConvertStringConvert_CACHED_NULL_,  },
    { "factories_", NULL, 0x12, "Ljava.util.concurrent.CopyOnWriteArrayList;", NULL,  },
    { "registered_", NULL, 0x12, "Ljava.util.concurrent.ConcurrentMap;", NULL,  },
  };
  static const J2ObjcClassInfo _OrgJodaConvertStringConvert = { "StringConvert", "org.joda.convert", NULL, 0x11, 23, methods, 4, fields, 0, NULL};
  return &_OrgJodaConvertStringConvert;
}

@end

OrgJodaConvertStringConvert *OrgJodaConvertStringConvert_create() {
  OrgJodaConvertStringConvert_init();
  return [[OrgJodaConvertStringConvert alloc] initWithBoolean:YES withOrgJodaConvertStringConverterFactoryArray:[IOSObjectArray arrayWithObjects:(id[]){ OrgJodaConvertFactoryNumericArrayStringConverterFactory_get_INSTANCE_(), OrgJodaConvertFactoryNumericObjectArrayStringConverterFactory_get_INSTANCE_(), OrgJodaConvertFactoryCharObjectArrayStringConverterFactory_get_INSTANCE_(), OrgJodaConvertFactoryByteObjectArrayStringConverterFactory_get_INSTANCE_(), OrgJodaConvertFactoryBooleanArrayStringConverterFactory_get_INSTANCE_(), OrgJodaConvertFactoryBooleanObjectArrayStringConverterFactory_get_INSTANCE_() } count:6 type:[IOSClass classWithProtocol:@protocol(OrgJodaConvertStringConverterFactory)]]];
}

@implementation OrgJodaConvertStringConvert_$1

- (NSString *)convertToStringWithId:(id)object {
  return nil;
}

- (id)convertFromStringWithIOSClass:(IOSClass *)cls
                       withNSString:(NSString *)str {
  return nil;
}

- (IOSClass *)getEffectiveType {
  return nil;
}

- (instancetype)init {
  return [super init];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "convertToStringWithId:", "convertToString", "Ljava.lang.String;", 0x1, NULL },
    { "convertFromStringWithIOSClass:withNSString:", "convertFromString", "Ljava.lang.Object;", 0x1, NULL },
    { "getEffectiveType", NULL, "Ljava.lang.Class;", 0x1, NULL },
    { "init", NULL, NULL, 0x0, NULL },
  };
  static const J2ObjcClassInfo _OrgJodaConvertStringConvert_$1 = { "$1", "org.joda.convert", "StringConvert", 0x8000, 4, methods, 0, NULL, 0, NULL};
  return &_OrgJodaConvertStringConvert_$1;
}

@end

@implementation OrgJodaConvertStringConvert_$2

- (NSString *)convertToStringWithId:(id)object {
  return [((id<OrgJodaConvertToStringConverter>) nil_chk(val$toString_)) convertToStringWithId:object];
}

- (id)convertFromStringWithIOSClass:(IOSClass *)cls
                       withNSString:(NSString *)str {
  return [((id<OrgJodaConvertFromStringConverter>) nil_chk(val$fromString_)) convertFromStringWithIOSClass:cls withNSString:str];
}

- (IOSClass *)getEffectiveType {
  return val$cls_;
}

- (instancetype)initWithOrgJodaConvertToStringConverter:(id<OrgJodaConvertToStringConverter>)capture$0
                  withOrgJodaConvertFromStringConverter:(id<OrgJodaConvertFromStringConverter>)capture$1
                                           withIOSClass:(IOSClass *)capture$2 {
  val$toString_ = capture$0;
  val$fromString_ = capture$1;
  val$cls_ = capture$2;
  return [super init];
}

- (void)copyAllFieldsTo:(OrgJodaConvertStringConvert_$2 *)other {
  [super copyAllFieldsTo:other];
  other->val$toString_ = val$toString_;
  other->val$fromString_ = val$fromString_;
  other->val$cls_ = val$cls_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "convertToStringWithId:", "convertToString", "Ljava.lang.String;", 0x1, NULL },
    { "convertFromStringWithIOSClass:withNSString:", "convertFromString", "TT;", 0x1, NULL },
    { "getEffectiveType", NULL, "Ljava.lang.Class;", 0x1, NULL },
    { "initWithOrgJodaConvertToStringConverter:withOrgJodaConvertFromStringConverter:withIOSClass:", "init", NULL, 0x0, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "val$toString_", NULL, 0x1012, "Lorg.joda.convert.ToStringConverter;", NULL,  },
    { "val$fromString_", NULL, 0x1012, "Lorg.joda.convert.FromStringConverter;", NULL,  },
    { "val$cls_", NULL, 0x1012, "Ljava.lang.Class;", NULL,  },
  };
  static const J2ObjcClassInfo _OrgJodaConvertStringConvert_$2 = { "$2", "org.joda.convert", "StringConvert", 0x8000, 4, methods, 3, fields, 0, NULL};
  return &_OrgJodaConvertStringConvert_$2;
}

@end
