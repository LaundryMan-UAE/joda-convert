//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/andrewebling/Laundrapp/Joda-time-Project/Joda-Convert/src/main/java/org/joda/convert/MethodConstructorStringConverter.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "MethodConstructorStringConverter.h"
#include "java/lang/IllegalAccessException.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/InstantiationException.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/Throwable.h"
#include "java/lang/reflect/Constructor.h"
#include "java/lang/reflect/InvocationTargetException.h"
#include "java/lang/reflect/Method.h"
#include "java/lang/reflect/Modifier.h"

@implementation OrgJodaConvertMethodConstructorStringConverter

- (instancetype)initWithIOSClass:(IOSClass *)cls
       withJavaLangReflectMethod:(JavaLangReflectMethod *)toString
  withJavaLangReflectConstructor:(JavaLangReflectConstructor *)fromString {
  if (self = [super initWithIOSClass:cls withJavaLangReflectMethod:toString]) {
    if ([((IOSClass *) nil_chk(cls)) isInterface] || [JavaLangReflectModifier isAbstractWithInt:[cls getModifiers]] || [cls isLocalClass] || [cls isMemberClass]) {
      @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:[NSString stringWithFormat:@"FromString constructor must be on an instantiable class: %@", fromString]];
    }
    if ([((JavaLangReflectConstructor *) nil_chk(fromString)) getDeclaringClass] != cls) {
      @throw [[JavaLangIllegalStateException alloc] initWithNSString:[NSString stringWithFormat:@"FromString constructor must be defined on specified class: %@", fromString]];
    }
    self->fromString_ = fromString;
  }
  return self;
}

- (id)convertFromStringWithIOSClass:(IOSClass *)cls
                       withNSString:(NSString *)str {
  @try {
    return [((JavaLangReflectConstructor *) nil_chk(fromString_)) newInstanceWithNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ str } count:1 type:[IOSClass classWithClass:[NSObject class]]]];
  }
  @catch (JavaLangIllegalAccessException *ex) {
    @throw [[JavaLangIllegalStateException alloc] initWithNSString:[NSString stringWithFormat:@"Constructor is not accessible: %@", fromString_]];
  }
  @catch (JavaLangInstantiationException *ex) {
    @throw [[JavaLangIllegalStateException alloc] initWithNSString:[NSString stringWithFormat:@"Constructor is not valid: %@", fromString_]];
  }
  @catch (JavaLangReflectInvocationTargetException *ex) {
    if ([[((JavaLangReflectInvocationTargetException *) nil_chk(ex)) getCause] isKindOfClass:[JavaLangRuntimeException class]]) {
      @throw (JavaLangRuntimeException *) check_class_cast([ex getCause], [JavaLangRuntimeException class]);
    }
    @throw [[JavaLangRuntimeException alloc] initWithNSString:[ex getMessage] withJavaLangThrowable:[ex getCause]];
  }
}

- (IOSClass *)getEffectiveType {
  return [((JavaLangReflectConstructor *) nil_chk(fromString_)) getDeclaringClass];
}

- (void)copyAllFieldsTo:(OrgJodaConvertMethodConstructorStringConverter *)other {
  [super copyAllFieldsTo:other];
  other->fromString_ = fromString_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "initWithIOSClass:withJavaLangReflectMethod:withJavaLangReflectConstructor:", "MethodConstructorStringConverter", NULL, 0x0, NULL },
    { "convertFromStringWithIOSClass:withNSString:", "convertFromString", "TT;", 0x1, NULL },
    { "getEffectiveType", NULL, "Ljava.lang.Class;", 0x1, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "fromString_", NULL, 0x12, "Ljava.lang.reflect.Constructor;", NULL,  },
  };
  static const char *superclass_type_args[] = {"TT;"};
  static J2ObjcClassInfo _OrgJodaConvertMethodConstructorStringConverter = { "MethodConstructorStringConverter", "org.joda.convert", NULL, 0x10, 3, methods, 1, fields, 1, superclass_type_args};
  return &_OrgJodaConvertMethodConstructorStringConverter;
}

@end
