//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/nbransby/Documents/joda-convert/src/main/java/org/joda/convert/MethodsStringConverter.java
//

#ifndef _OrgJodaConvertMethodsStringConverter_H_
#define _OrgJodaConvertMethodsStringConverter_H_

@class IOSClass;
@class JavaLangReflectMethod;

#include "J2ObjC_header.h"
#include "ReflectionStringConverter.h"

/**
 @brief Conversion to and from a string using two methods.
 <p> The toString method must meet the following signature:<br /> <code>String anyName()</code> on Class T. <p> The fromString method must meet the following signature:<br /> <code>static T anyName(String)</code> on any class. <p> MethodsStringConverter is thread-safe and immutable.
 @param < T > the type of the converter
 */
@interface OrgJodaConvertMethodsStringConverter : OrgJodaConvertReflectionStringConverter {
}

/**
 @brief Creates an instance using two methods.
 @param cls the class this converts for, not null
 @param toString the toString method, not null
 @param fromString the fromString method, not null
 @throws RuntimeException (or subclass) if the method signatures are invalid
 */
- (instancetype)initWithIOSClass:(IOSClass *)cls
       withJavaLangReflectMethod:(JavaLangReflectMethod *)toString
       withJavaLangReflectMethod:(JavaLangReflectMethod *)fromString
                    withIOSClass:(IOSClass *)effectiveType;

/**
 @brief Converts the <code>String</code> to an object.
 @param cls the class to convert to, not null
 @param str the string to convert, not null
 @return the converted object, may be null but generally not
 */
- (id)convertFromStringWithIOSClass:(IOSClass *)cls
                       withNSString:(NSString *)str;

- (IOSClass *)getEffectiveType;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgJodaConvertMethodsStringConverter)

CF_EXTERN_C_BEGIN
CF_EXTERN_C_END

J2OBJC_TYPE_LITERAL_HEADER(OrgJodaConvertMethodsStringConverter)

#endif // _OrgJodaConvertMethodsStringConverter_H_
