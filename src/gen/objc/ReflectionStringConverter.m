//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/andrewebling/Laundrapp/Joda-time-Project/Joda-Convert/src/main/java/org/joda/convert/ReflectionStringConverter.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "ReflectionStringConverter.h"
#include "java/lang/IllegalAccessException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/Throwable.h"
#include "java/lang/reflect/InvocationTargetException.h"
#include "java/lang/reflect/Method.h"

@implementation OrgJodaConvertReflectionStringConverter

- (instancetype)initWithIOSClass:(IOSClass *)cls
       withJavaLangReflectMethod:(JavaLangReflectMethod *)toString {
  if (self = [super init]) {
    if ((int) [((IOSObjectArray *) nil_chk([((JavaLangReflectMethod *) nil_chk(toString)) getParameterTypes])) count] != 0) {
      @throw [[JavaLangIllegalStateException alloc] initWithNSString:[NSString stringWithFormat:@"ToString method must have no parameters: %@", toString]];
    }
    if ([toString getReturnType] != [IOSClass classWithClass:[NSString class]]) {
      @throw [[JavaLangIllegalStateException alloc] initWithNSString:[NSString stringWithFormat:@"ToString method must return a String: %@", toString]];
    }
    self->cls_ = cls;
    self->toString__ = toString;
  }
  return self;
}

- (NSString *)convertToStringWithId:(id)object {
  @try {
    return (NSString *) check_class_cast([((JavaLangReflectMethod *) nil_chk(toString__)) invokeWithId:object withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSObject class]]]], [NSString class]);
  }
  @catch (JavaLangIllegalAccessException *ex) {
    @throw [[JavaLangIllegalStateException alloc] initWithNSString:[NSString stringWithFormat:@"Method is not accessible: %@", toString__]];
  }
  @catch (JavaLangReflectInvocationTargetException *ex) {
    if ([[((JavaLangReflectInvocationTargetException *) nil_chk(ex)) getCause] isKindOfClass:[JavaLangRuntimeException class]]) {
      @throw (JavaLangRuntimeException *) check_class_cast([ex getCause], [JavaLangRuntimeException class]);
    }
    @throw [[JavaLangRuntimeException alloc] initWithNSString:[ex getMessage] withJavaLangThrowable:[ex getCause]];
  }
}

- (NSString *)description {
  return [NSString stringWithFormat:@"RefectionStringConverter[%@]", [((IOSClass *) nil_chk(cls_)) getSimpleName]];
}

- (IOSClass *)getEffectiveType {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (id)convertFromStringWithIOSClass:(IOSClass *)param0
                       withNSString:(NSString *)param1 {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)copyAllFieldsTo:(OrgJodaConvertReflectionStringConverter *)other {
  [super copyAllFieldsTo:other];
  other->cls_ = cls_;
  other->toString__ = toString__;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "initWithIOSClass:withJavaLangReflectMethod:", "ReflectionStringConverter", NULL, 0x0, NULL },
    { "convertToStringWithId:", "convertToString", "Ljava.lang.String;", 0x1, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL },
    { "getEffectiveType", NULL, "Ljava.lang.Class;", 0x401, NULL },
    { "convertFromStringWithIOSClass:withNSString:", "convertFromString", "TT;", 0x401, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "cls_", NULL, 0x12, "Ljava.lang.Class;", NULL,  },
    { "toString__", "toString", 0x12, "Ljava.lang.reflect.Method;", NULL,  },
  };
  static J2ObjcClassInfo _OrgJodaConvertReflectionStringConverter = { "ReflectionStringConverter", "org.joda.convert", NULL, 0x400, 5, methods, 2, fields, 0, NULL};
  return &_OrgJodaConvertReflectionStringConverter;
}

@end
